{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/AbortablePromise.js","../src/Util.js","../src/loaders/UncompressedSplatArray.js","../src/Constants.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/PlayCanvasCompressedPlyParser.js","../src/loaders/ply/PlyFormat.js","../src/loaders/ply/PlyParserUtils.js","../src/loaders/ply/INRIAV1PlyParser.js","../src/loaders/ply/INRIAV2PlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/LoaderStatus.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/OrbitControls.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/ui/LoadingProgressBar.js","../src/ui/InfoPanel.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/SplatRenderMode.js","../src/raycaster/Raycaster.js","../src/splatmesh/SplatMaterial.js","../src/splatmesh/SplatMaterial3D.js","../src/splatmesh/SplatMaterial2D.js","../src/splatmesh/SplatGeometry.js","../src/splatmesh/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/SceneRevealMode.js","../src/LogLevel.js","../src/splatmesh/SplatMesh.js","../src/worker/sorter.wasm","../src/worker/sorter_no_simd.wasm","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/RenderMode.js","../src/Viewer.js","../src/worker/sorter_non_shared.wasm","../src/worker/sorter_no_simd_non_shared.wasm","../src/DropInViewer.js"],"sourcesContent":["/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n\n    static idGen = 0;\n\n    constructor(promiseFunc, abortHandler) {\n\n        let resolver;\n        let rejecter;\n        this.promise = new Promise((resolve, reject) => {\n            resolver = resolve;\n            rejecter = reject;\n        });\n\n        const promiseResolve = resolver.bind(this);\n        const promiseReject = rejecter.bind(this);\n\n        const resolve = (...args) => {\n            promiseResolve(...args);\n        };\n\n        const reject = (error) => {\n            promiseReject(error);\n        };\n\n        promiseFunc(resolve.bind(this), reject.bind(this));\n        this.abortHandler = abortHandler;\n        this.id = AbortablePromise.idGen++;\n    }\n\n    then(onResolve) {\n        return new AbortablePromise((resolve, reject) => {\n            this.promise = this.promise\n            .then((...args) => {\n                const onResolveResult = onResolve(...args);\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\n                    onResolveResult.then((...args2) => {\n                        resolve(...args2);\n                    });\n                } else {\n                    resolve(onResolveResult);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        }, this.abortHandler);\n    }\n\n    catch(onFail) {\n        return new AbortablePromise((resolve) => {\n            this.promise = this.promise.then((...args) => {\n                resolve(...args);\n            })\n            .catch(onFail);\n        }, this.abortHandler);\n    }\n\n    abort() {\n        if (this.abortHandler) this.abortHandler();\n    }\n\n}\n\nexport class AbortedPromiseError extends Error {\n\n    constructor(msg) {\n        super(msg);\n    }\n\n}\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\n\nexport const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const rgbaArrayToInteger = function(arr, offset) {\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true) {\n\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    let rejectFunc = null;\n    const abortHandler = (reason) => {\n        abortController.abort(reason);\n        rejectFunc(new AbortedPromiseError('Fetch aborted.'));\n        aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n        rejectFunc = reject;\n        fetch(path, { signal })\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (!aborted) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk, fileSize);\n                        }\n                        if (saveChunks) {\n                            const buffer = new Blob(chunks).arrayBuffer();\n                            resolve(buffer);\n                        } else {\n                            resolve();\n                        }\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    if (saveChunks) chunks.push(chunk);\n                    if (onProgress) {\n                        const cancelSaveChucnks = onProgress(percent, percentLabel, chunk, fileSize);\n                        if (cancelSaveChucnks) saveChunks = false;\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    }, abortHandler);\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n    if (object3D.geometry) {\n        object3D.geometry.dispose();\n        object3D.geometry = null;\n    }\n    if (object3D.material) {\n        object3D.material.dispose();\n        object3D.material = null;\n    }\n    if (object3D.children) {\n        for (let child of object3D.children) {\n            disposeAllMeshes(child);\n        }\n    }\n};\n\nexport const delayedExecute = (func, fast) => {\n    return new Promise((resolve) => {\n        window.setTimeout(() => {\n            resolve(func());\n        }, fast ? 1 : 50);\n    });\n};\n\n\nexport const getSphericalHarmonicsComponentCountForDegree = (sphericalHarmonicsDegree = 0) => {\n    switch (sphericalHarmonicsDegree) {\n        case 1:\n            return 9;\n        case 2:\n            return 24;\n    }\n    return 0;\n};\n\nexport const nativePromiseWithExtractedComponents = () => {\n    let resolver;\n    let rejecter;\n    const promise = new Promise((resolve, reject) => {\n        resolver = resolve;\n        rejecter = reject;\n    });\n    return {\n        'promise': promise,\n        'resolve': resolver,\n        'reject': rejecter\n    };\n};\n\nexport const abortablePromiseWithExtractedComponents = (abortHandler) => {\n    let resolver;\n    let rejecter;\n    if (!abortHandler) {\n        abortHandler = () => {};\n    }\n    const promise = new AbortablePromise((resolve, reject) => {\n        resolver = resolve;\n        rejecter = reject;\n    }, abortHandler);\n    return {\n        'promise': promise,\n        'resolve': resolver,\n        'reject': rejecter\n    };\n};\n\nclass Semver {\n    constructor(major, minor, patch) {\n        this.major = major;\n        this.minor = minor;\n        this.patch = patch;\n    }\n\n    toString() {\n        return `${this.major}_${this.minor}_${this.patch}`;\n    }\n}\n\nexport function isIOS() {\n    const ua = navigator.userAgent;\n    return ua.indexOf('iPhone') > 0 || ua.indexOf('iPad') > 0;\n}\n\nexport function getIOSSemever() {\n    if (isIOS()) {\n        const extract = navigator.userAgent.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n        return new Semver(\n            parseInt(extract[1] || 0, 10),\n            parseInt(extract[2] || 0, 10),\n            parseInt(extract[3] || 0, 10)\n        );\n    } else {\n        return null; // or [0,0,0]\n    }\n}\n","import { getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\n\nconst BASE_COMPONENT_COUNT = 14;\n\nexport class UncompressedSplatArray {\n\n    static OFFSET = {\n        X: 0,\n        Y: 1,\n        Z: 2,\n        SCALE0: 3,\n        SCALE1: 4,\n        SCALE2: 5,\n        ROTATION0: 6,\n        ROTATION1: 7,\n        ROTATION2: 8,\n        ROTATION3: 9,\n        FDC0: 10,\n        FDC1: 11,\n        FDC2: 12,\n        OPACITY: 13,\n        FRC0: 14,\n        FRC1: 15,\n        FRC2: 16,\n        FRC3: 17,\n        FRC4: 18,\n        FRC5: 19,\n        FRC6: 20,\n        FRC7: 21,\n        FRC8: 22,\n        FRC9: 23,\n        FRC10: 24,\n        FRC11: 25,\n        FRC12: 26,\n        FRC13: 27,\n        FRC14: 28,\n        FRC15: 29,\n        FRC16: 30,\n        FRC17: 31,\n        FRC18: 32,\n        FRC19: 33,\n        FRC20: 34,\n        FRC21: 35,\n        FRC22: 36,\n        FRC23: 37\n    };\n\n    constructor(sphericalHarmonicsDegree = 0) {\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n        this.sphericalHarmonicsCount = getSphericalHarmonicsComponentCountForDegree(this.sphericalHarmonicsDegree);\n        this.componentCount = this.sphericalHarmonicsCount + BASE_COMPONENT_COUNT;\n        this.defaultSphericalHarmonics = new Array(this.sphericalHarmonicsCount).fill(0);\n        this.splats = [];\n        this.splatCount = 0;\n    }\n\n    static createSplat(sphericalHarmonicsDegree = 0) {\n        const baseSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n        let shEntries = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n        for (let i = 0; i < shEntries; i++) baseSplat.push(0);\n        return baseSplat;\n    }\n\n    addSplat(splat) {\n        this.splats.push(splat);\n        this.splatCount++;\n    }\n\n    getSplat(index) {\n        return this.splats[index];\n    }\n\n    addDefaultSplat() {\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...rest) {\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...this.defaultSphericalHarmonics];\n        for (let i = 0; i < rest.length && i < this.sphericalHarmonicsCount; i++) {\n            newSplat[i] = rest[i];\n        }\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromArray(src, srcIndex) {\n        const srcSplat = src.splats[srcIndex];\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\n        for (let i = 0; i < this.componentCount && i < srcSplat.length; i++) {\n            newSplat[i] = srcSplat[i];\n        }\n        this.addSplat(newSplat);\n    }\n}\n","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n    static MaxScenes = 32;\n    static ProgressiveLoadSectionSize = 262144;\n    static ProgressiveLoadSectionDelayDuration = 15;\n    static SphericalHarmonics8BitCompressionRange = 3;\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nconst SphericalHarmonics8BitCompressionHalfRange = Constants.SphericalHarmonics8BitCompressionRange / 2.0;\n\nconst toHalfFloat = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\nconst fromHalfFloat = THREE.DataUtils.fromHalfFloat.bind(THREE.DataUtils);\n\nconst toUncompressedFloat = (f, compressionLevel, isSH = false) => {\n    if (compressionLevel === 0) {\n        return f;\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\n        return THREE.DataUtils.fromHalfFloat(f);\n    } else if (compressionLevel === 2) {\n        return fromUint8(f);\n    }\n};\n\nconst toUint8 = (v) => {\n    v = clamp(v, -SphericalHarmonics8BitCompressionHalfRange, SphericalHarmonics8BitCompressionHalfRange);\n    return clamp(Math.floor((v * (0.5 / SphericalHarmonics8BitCompressionHalfRange) + 0.5) * 255), 0, 255);\n};\n\nconst fromUint8 = (v) => {\n    return (v / 255) * Constants.SphericalHarmonics8BitCompressionRange - SphericalHarmonics8BitCompressionHalfRange;\n};\n\nconst fromHalfFloatToUint8 = (v) => {\n    return toUint8(fromHalfFloat(v));\n};\n\nconst fromUint8ToHalfFloat = (v) => {\n    return toHalfFloat(fromUint8(v));\n};\n\nconst dataViewFloatForCompressionLevel = (dataView, floatIndex, compressionLevel, isSH = false) => {\n    if (compressionLevel === 0) {\n        return dataView.getFloat32(floatIndex * 4, true);\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\n        return dataView.getUint16(floatIndex * 2, true);\n    } else {\n        return dataView.getUint8(floatIndex, true);\n    }\n};\n\nconst convertBetweenCompressionLevels = function() {\n\n    const noop = (v) => v;\n\n    return function(val, fromLevel, toLevel, isSH = false) {\n        if (fromLevel === toLevel) return val;\n        let outputConversionFunc = noop;\n\n        if (fromLevel === 2 && isSH) {\n            if (toLevel === 1) outputConversionFunc = fromUint8ToHalfFloat;\n            else if (toLevel == 0) {\n                outputConversionFunc = fromUint8;\n            }\n        } else if (fromLevel === 2 || fromLevel === 1) {\n            if (toLevel === 0) outputConversionFunc = fromHalfFloat;\n            else if (toLevel == 2) {\n                if (!isSH) outputConversionFunc = noop;\n                else outputConversionFunc = fromHalfFloatToUint8;\n            }\n        } else if (fromLevel === 0) {\n            if (toLevel === 1) outputConversionFunc = toHalfFloat;\n            else if (toLevel == 2) {\n                if (!isSH) outputConversionFunc = toHalfFloat;\n                else outputConversionFunc = toUint8;\n            }\n        }\n\n        return outputConversionFunc(val);\n    };\n\n}();\n\nconst copyBetweenBuffers = (srcBuffer, srcOffset, destBuffer, destOffset, byteCount = 0) => {\n    const src = new Uint8Array(srcBuffer, srcOffset);\n    const dest = new Uint8Array(destBuffer, destOffset);\n    for (let i = 0; i < byteCount; i++) {\n        dest[i] = src[i];\n    }\n};\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n\n    static CurrentMajorVersion = 0;\n    static CurrentMinorVersion = 1;\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n    static CovarianceComponentCount = 6;\n\n    static SplatScaleOffsetFloat = 3;\n    static SplatRotationOffsetFloat = 6;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerScale: 12,\n            BytesPerRotation: 16,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 12,\n            RotationffsetBytes: 24,\n            ColorOffsetBytes: 40,\n            SphericalHarmonicsOffsetBytes: 44,\n            ScaleRange: 1,\n            BytesPerSphericalHarmonicsComponent: 4,\n            SphericalHarmonicsOffsetFloat: 11,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 44 },\n                1: { BytesPerSplat: 80 },\n                2: { BytesPerSplat: 140 }\n            },\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 6,\n            RotationffsetBytes: 12,\n            ColorOffsetBytes: 20,\n            SphericalHarmonicsOffsetBytes: 24,\n            ScaleRange: 32767,\n            BytesPerSphericalHarmonicsComponent: 2,\n            SphericalHarmonicsOffsetFloat: 12,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 24 },\n                1: { BytesPerSplat: 42 },\n                2: { BytesPerSplat: 72 }\n            },\n        },\n        2: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 6,\n            RotationffsetBytes: 12,\n            ColorOffsetBytes: 20,\n            SphericalHarmonicsOffsetBytes: 24,\n            ScaleRange: 32767,\n            BytesPerSphericalHarmonicsComponent: 1,\n            SphericalHarmonicsOffsetFloat: 12,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 24 },\n                1: { BytesPerSplat: 33 },\n                2: { BytesPerSplat: 48 }\n            },\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n\n    static HeaderSizeBytes = 4096;\n    static SectionHeaderSizeBytes = 1024;\n\n    static BucketStorageSizeBytes = 12;\n    static BucketStorageSizeFloats = 3;\n\n    static BucketBlockSize = 5.0;\n    static BucketSize = 256;\n\n    constructor(bufferData, secLoadedCountsToMax = true) {\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\n    }\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    getMaxSplatCount() {\n        return this.maxSplatCount;\n    }\n\n    getMinSphericalHarmonicsDegree() {\n        let minSphericalHarmonicsDegree = 0;\n        for (let i = 0; i < this.sections.length; i++) {\n            const section = this.sections[i];\n            if (i === 0 || section.sphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n                minSphericalHarmonicsDegree = section.sphericalHarmonicsDegree;\n            }\n        }\n        return minSphericalHarmonicsDegree;\n    }\n\n    getBucketIndex(section, localSplatIndex) {\n        let bucketIndex;\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\n        } else {\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\n            bucketIndex = section.fullBucketCount;\n            let partiallyFullBucketIndex = 0;\n            while (bucketSplatIndex < section.splatCount) {\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\n                    break;\n                }\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\n                bucketIndex++;\n                partiallyFullBucketIndex++;\n            }\n        }\n        return bucketIndex;\n    }\n\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n        const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n        const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\n\n        const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\n        const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\n        const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\n        if (this.compressionLevel >= 1) {\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n            const sf = section.compressionScaleFactor;\n            const sr = section.compressionScaleRange;\n            outCenter.x = (x - sr) * sf + section.bucketArray[bucketBase];\n            outCenter.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n            outCenter.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n        } else {\n            outCenter.x = x;\n            outCenter.y = y;\n            outCenter.z = z;\n        }\n        if (transform) outCenter.applyMatrix4(transform);\n    }\n\n    getSplatScaleAndRotation = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempPosition = new THREE.Vector3();\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        return function(index, outScale, outRotation, transform, scaleOverride) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = index - section.splatCountOffset;\n\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\n\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\n            if (scaleOverride) {\n                if (scaleOverride.x !== undefined) scale.x = scaleOverride.x;\n                if (scaleOverride.y !== undefined) scale.y = scaleOverride.y;\n                if (scaleOverride.z !== undefined) scale.z = scaleOverride.z;\n            }\n\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\n\n            if (transform) {\n                scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n                rotationMatrix.makeRotationFromQuaternion(rotation);\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\n            } else {\n                outScale.copy(scale);\n                outRotation.copy(rotation);\n            }\n        };\n\n    }();\n\n    getSplatColor(globalSplatIndex, outColor) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n        const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\n                                   SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n        const splatColorsArray = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase, 4);\n\n        outColor.set(splatColorsArray[0], splatColorsArray[1],\n                     splatColorsArray[2], splatColorsArray[3]);\n    }\n\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        const center = new THREE.Vector3();\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\n\n            const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\n\n            const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\n            const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\n            const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\n            if (this.compressionLevel >= 1) {\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n                const sf = section.compressionScaleFactor;\n                const sr = section.compressionScaleRange;\n                center.x = (x - sr) * sf + section.bucketArray[bucketBase];\n                center.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n                center.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n            } else {\n                center.x = x;\n                center.y = y;\n                center.z = z;\n            }\n            if (transform) {\n                center.applyMatrix4(transform);\n            }\n            outCenterArray[centerDestBase] = center.x;\n            outCenterArray[centerDestBase + 1] = center.y;\n            outCenterArray[centerDestBase + 2] = center.z;\n        }\n    }\n\n    fillSplatScaleRotationArray = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n        const tempPosition = new THREE.Vector3();\n\n        const ensurePositiveW = (quaternion) => {\n            const flip = quaternion.w < 0 ? -1 : 1;\n            quaternion.x *= flip;\n            quaternion.y *= flip;\n            quaternion.z *= flip;\n            quaternion.w *= flip;\n        };\n\n        return function(outScaleArray, outRotationArray, transform, srcFrom, srcTo, destFrom,\n                        desiredOutputCompressionLevel, scaleOverride) {\n            const splatCount = this.splatCount;\n\n            srcFrom = srcFrom || 0;\n            srcTo = srcTo || splatCount - 1;\n            if (destFrom === undefined) destFrom = srcFrom;\n\n            const outputConversion = (value, srcCompressionLevel) => {\n                if (srcCompressionLevel === undefined) srcCompressionLevel = this.compressionLevel;\n                return convertBetweenCompressionLevels(value, srcCompressionLevel, desiredOutputCompressionLevel);\n            };\n\n            for (let i = srcFrom; i <= srcTo; i++) {\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\n                const section = this.sections[sectionIndex];\n                const localSplatIndex = i - section.splatCountOffset;\n\n                const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\n                                        SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n                const scaleDestBase = (i - srcFrom + destFrom) * SplatBuffer.ScaleComponentCount;\n                const rotationDestBase = (i - srcFrom + destFrom) * SplatBuffer.RotationComponentCount;\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\n\n                const srcScaleX = (scaleOverride && scaleOverride.x !== undefined) ? scaleOverride.x :\n                                   dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\n                const srcScaleY = (scaleOverride && scaleOverride.y !== undefined) ? scaleOverride.y :\n                                   dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\n                const srcScaleZ = (scaleOverride && scaleOverride.z !== undefined) ? scaleOverride.z :\n                                   dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\n\n                const srcRotationW = dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel);\n                const srcRotationX = dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel);\n                const srcRotationY = dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel);\n                const srcRotationZ = dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel);\n\n                scale.set(toUncompressedFloat(srcScaleX, this.compressionLevel),\n                          toUncompressedFloat(srcScaleY, this.compressionLevel),\n                          toUncompressedFloat(srcScaleZ, this.compressionLevel));\n\n                rotation.set(toUncompressedFloat(srcRotationX, this.compressionLevel),\n                             toUncompressedFloat(srcRotationY, this.compressionLevel),\n                             toUncompressedFloat(srcRotationZ, this.compressionLevel),\n                             toUncompressedFloat(srcRotationW, this.compressionLevel)).normalize();\n\n                if (transform) {\n                    tempPosition.set(0, 0, 0);\n                    scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n                    rotationMatrix.makeRotationFromQuaternion(rotation);\n                    tempMatrix.identity().premultiply(scaleMatrix).premultiply(rotationMatrix);\n                    tempMatrix.premultiply(transform);\n                    tempMatrix.decompose(tempPosition, rotation, scale);\n                    rotation.normalize();\n                }\n\n                ensurePositiveW(rotation);\n\n                if (outScaleArray) {\n                    outScaleArray[scaleDestBase] = outputConversion(scale.x, 0);\n                    outScaleArray[scaleDestBase + 1] = outputConversion(scale.y, 0);\n                    outScaleArray[scaleDestBase + 2] = outputConversion(scale.z, 0);\n                }\n\n                if (outRotationArray) {\n                    outRotationArray[rotationDestBase] = outputConversion(rotation.x, 0);\n                    outRotationArray[rotationDestBase + 1] = outputConversion(rotation.y, 0);\n                    outRotationArray[rotationDestBase + 2] = outputConversion(rotation.z, 0);\n                    outRotationArray[rotationDestBase + 3] = outputConversion(rotation.w, 0);\n                }\n            }\n        };\n    }();\n\n    static computeCovariance = function() {\n\n        const tempMatrix4 = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix3();\n        const rotationMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const transformedCovariance = new THREE.Matrix3();\n        const transform3x3 = new THREE.Matrix3();\n        const transform3x3Transpose = new THREE.Matrix3();\n\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\n\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\n\n            if (transform) {\n                transform3x3.setFromMatrix4(transform);\n                transform3x3Transpose.copy(transform3x3).transpose();\n                transformedCovariance.multiply(transform3x3Transpose);\n                transformedCovariance.premultiply(transform3x3);\n            }\n\n            if (desiredOutputCompressionLevel >= 1) {\n                outCovariance[outOffset] = toHalfFloat(transformedCovariance.elements[0]);\n                outCovariance[outOffset + 1] = toHalfFloat(transformedCovariance.elements[3]);\n                outCovariance[outOffset + 2] = toHalfFloat(transformedCovariance.elements[6]);\n                outCovariance[outOffset + 3] = toHalfFloat(transformedCovariance.elements[4]);\n                outCovariance[outOffset + 4] = toHalfFloat(transformedCovariance.elements[7]);\n                outCovariance[outOffset + 5] = toHalfFloat(transformedCovariance.elements[8]);\n            } else {\n                outCovariance[outOffset] = transformedCovariance.elements[0];\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\n            }\n\n        };\n\n    }();\n\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\n\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\n\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\n\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\n        }\n    }\n\n    fillSplatColorArray(outColorArray, minimumAlpha, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\n            const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n\n            const dataView = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase);\n\n            let alpha = dataView[3];\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\n\n            outColorArray[colorDestBase] = dataView[0];\n            outColorArray[colorDestBase + 1] = dataView[1];\n            outColorArray[colorDestBase + 2] = dataView[2];\n            outColorArray[colorDestBase + 3] = alpha;\n        }\n    }\n\n    fillSphericalHarmonicsArray = function() {\n\n        const sphericalHarmonicVectors = [];\n        for (let i = 0; i < 15; i++) {\n            sphericalHarmonicVectors[i] = new THREE.Vector3();\n        }\n\n        const tempMatrix3 = new THREE.Matrix3();\n        const tempMatrix4 = new THREE.Matrix4();\n\n        const tempTranslation = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n\n        const sh11 = [];\n        const sh12 = [];\n        const sh13 = [];\n\n        const sh21 = [];\n        const sh22 = [];\n        const sh23 = [];\n        const sh24 = [];\n        const sh25 = [];\n\n        const shIn1 = [];\n        const shIn2 = [];\n        const shIn3 = [];\n        const shIn4 = [];\n        const shIn5 = [];\n\n        const shOut1 = [];\n        const shOut2 = [];\n        const shOut3 = [];\n        const shOut4 = [];\n        const shOut5 = [];\n\n        const noop = (v) => v;\n\n        const set3 = (array, val1, val2, val3) => {\n            array[0] = val1;\n            array[1] = val2;\n            array[2] = val3;\n        };\n\n        const set3FromArray = (array, srcDestView, stride, srcBase, compressionLevel) => {\n            array[0] = dataViewFloatForCompressionLevel(srcDestView, srcBase, compressionLevel, true);\n            array[1] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride, compressionLevel, true);\n            array[2] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride + stride, compressionLevel, true);\n        };\n\n        const copy3 = (srcArray, destArray) => {\n            destArray[0] = srcArray[0];\n            destArray[1] = srcArray[1];\n            destArray[2] = srcArray[2];\n        };\n\n        const setOutput3 = (srcArray, destArray, destBase, conversionFunc) => {\n            destArray[destBase] = conversionFunc(srcArray[0]);\n            destArray[destBase + 1] = conversionFunc(srcArray[1]);\n            destArray[destBase + 2] = conversionFunc(srcArray[2]);\n        };\n\n        const toUncompressedFloatArray3 = (src, dest, compressionLevel) => {\n            dest[0] = toUncompressedFloat(src[0], compressionLevel, true);\n            dest[1] = toUncompressedFloat(src[1], compressionLevel, true);\n            dest[2] = toUncompressedFloat(src[2], compressionLevel, true);\n            return dest;\n        };\n\n        return function(outSphericalHarmonicsArray, outSphericalHarmonicsDegree, transform,\n                        srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n            const splatCount = this.splatCount;\n\n            srcFrom = srcFrom || 0;\n            srcTo = srcTo || splatCount - 1;\n            if (destFrom === undefined) destFrom = srcFrom;\n\n            if (transform && outSphericalHarmonicsDegree >= 1) {\n                tempMatrix4.copy(transform);\n                tempMatrix4.decompose(tempTranslation, tempRotation, tempScale);\n                tempRotation.normalize();\n                tempMatrix4.makeRotationFromQuaternion(tempRotation);\n                tempMatrix3.setFromMatrix4(tempMatrix4);\n                set3(sh11, tempMatrix3.elements[4], -tempMatrix3.elements[7], tempMatrix3.elements[1]);\n                set3(sh12, -tempMatrix3.elements[5], tempMatrix3.elements[8], -tempMatrix3.elements[2]);\n                set3(sh13, tempMatrix3.elements[3], -tempMatrix3.elements[6], tempMatrix3.elements[0]);\n            }\n\n            for (let i = srcFrom; i <= srcTo; i++) {\n\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\n                const section = this.sections[sectionIndex];\n                outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, section.sphericalHarmonicsDegree);\n                const outSphericalHarmonicsComponentsCount = getSphericalHarmonicsComponentCountForDegree(outSphericalHarmonicsDegree);\n\n                const localSplatIndex = i - section.splatCountOffset;\n\n                const srcSplatSHBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes;\n\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatSHBase);\n\n                const shDestBase = (i - srcFrom + destFrom) * outSphericalHarmonicsComponentsCount;\n\n                let compressionLevelForOutputConversion = transform ? 0 : this.compressionLevel;\n                let outputConversionFunc = noop;\n                if (compressionLevelForOutputConversion !== desiredOutputCompressionLevel) {\n                    if (compressionLevelForOutputConversion === 1) {\n                        if (desiredOutputCompressionLevel === 0) outputConversionFunc = fromHalfFloat;\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = fromHalfFloatToUint8;\n                    } else if (compressionLevelForOutputConversion === 0) {\n                        if (desiredOutputCompressionLevel === 1) outputConversionFunc = toHalfFloat;\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = toUint8;\n                    }\n                }\n\n                if (outSphericalHarmonicsDegree >= 1) {\n\n                    set3FromArray(shIn1, dataView, 3, 0, this.compressionLevel);\n                    set3FromArray(shIn2, dataView, 3, 1, this.compressionLevel);\n                    set3FromArray(shIn3, dataView, 3, 2, this.compressionLevel);\n\n                    if (transform) {\n                        toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel);\n                        toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel);\n                        toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel);\n                        SplatBuffer.rotateSphericalHarmonics3(shIn1, shIn2, shIn3, sh11, sh12, sh13, shOut1, shOut2, shOut3);\n                    } else {\n                        copy3(shIn1, shOut1);\n                        copy3(shIn2, shOut2);\n                        copy3(shIn3, shOut3);\n                    }\n\n                    setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase, outputConversionFunc);\n                    setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 3, outputConversionFunc);\n                    setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 6, outputConversionFunc);\n\n                    if (outSphericalHarmonicsDegree >= 2) {\n\n                        set3FromArray(shIn1, dataView, 5, 9, this.compressionLevel);\n                        set3FromArray(shIn2, dataView, 5, 10, this.compressionLevel);\n                        set3FromArray(shIn3, dataView, 5, 11, this.compressionLevel);\n                        set3FromArray(shIn4, dataView, 5, 12, this.compressionLevel);\n                        set3FromArray(shIn5, dataView, 5, 13, this.compressionLevel);\n\n                        if (transform) {\n                            toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn4, shIn4, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn5, shIn5, this.compressionLevel);\n                            SplatBuffer.rotateSphericalHarmonics5(shIn1, shIn2, shIn3, shIn4, shIn5,\n                                                                  sh11, sh12, sh13, sh21, sh22, sh23, sh24, sh25,\n                                                                  shOut1, shOut2, shOut3, shOut4, shOut5);\n                        } else {\n                            copy3(shIn1, shOut1);\n                            copy3(shIn2, shOut2);\n                            copy3(shIn3, shOut3);\n                            copy3(shIn4, shOut4);\n                            copy3(shIn5, shOut5);\n                        }\n\n                        setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase + 9, outputConversionFunc);\n                        setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 12, outputConversionFunc);\n                        setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 15, outputConversionFunc);\n                        setOutput3(shOut4, outSphericalHarmonicsArray, shDestBase + 18, outputConversionFunc);\n                        setOutput3(shOut5, outSphericalHarmonicsArray, shDestBase + 21, outputConversionFunc);\n                    }\n                }\n            }\n        };\n\n    }();\n\n    static dot3 = (v1, v2, v3, transformRow, outArray) => {\n        outArray[0] = outArray[1] = outArray[2] = 0;\n        const t0 = transformRow[0];\n        const t1 = transformRow[1];\n        const t2 = transformRow[2];\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n    };\n\n    static addInto3 = (val1, val2, val3, destArray) => {\n        destArray[0] = destArray[0] + val1;\n        destArray[1] = destArray[1] + val2;\n        destArray[2] = destArray[2] + val3;\n    };\n\n    static dot5 = (v1, v2, v3, v4, v5, transformRow, outArray) => {\n        outArray[0] = outArray[1] = outArray[2] = 0;\n        const t0 = transformRow[0];\n        const t1 = transformRow[1];\n        const t2 = transformRow[2];\n        const t3 = transformRow[3];\n        const t4 = transformRow[4];\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n        SplatBuffer.addInto3(v4[0] * t3, v4[1] * t3, v4[2] * t3, outArray);\n        SplatBuffer.addInto3(v5[0] * t4, v5[1] * t4, v5[2] * t4, outArray);\n    };\n\n    static rotateSphericalHarmonics3 = (in1, in2, in3, tsh11, tsh12, tsh13, out1, out2, out3) => {\n        SplatBuffer.dot3(in1, in2, in3, tsh11, out1);\n        SplatBuffer.dot3(in1, in2, in3, tsh12, out2);\n        SplatBuffer.dot3(in1, in2, in3, tsh13, out3);\n    };\n\n    static rotateSphericalHarmonics5 = (in1, in2, in3, in4, in5, tsh11, tsh12, tsh13,\n                                        tsh21, tsh22, tsh23, tsh24, tsh25, out1, out2, out3, out4, out5) => {\n\n        const kSqrt0104 = Math.sqrt(1.0 / 4.0);\n        const kSqrt0304 = Math.sqrt(3.0 / 4.0);\n        const kSqrt0103 = Math.sqrt(1.0 / 3.0);\n        const kSqrt0403 = Math.sqrt(4.0 / 3.0);\n        const kSqrt0112 = Math.sqrt(1.0 / 12.0);\n\n        tsh21[0] = kSqrt0104 * ((tsh13[2] * tsh11[0] + tsh13[0] * tsh11[2]) + (tsh11[2] * tsh13[0] + tsh11[0] * tsh13[2]));\n        tsh21[1] = (tsh13[1] * tsh11[0] + tsh11[1] * tsh13[0]);\n        tsh21[2] = kSqrt0304 * (tsh13[1] * tsh11[1] + tsh11[1] * tsh13[1]);\n        tsh21[3] = (tsh13[1] * tsh11[2] + tsh11[1] * tsh13[2]);\n        tsh21[4] = kSqrt0104 * ((tsh13[2] * tsh11[2] - tsh13[0] * tsh11[0]) + (tsh11[2] * tsh13[2] - tsh11[0] * tsh13[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh21, out1);\n\n        tsh22[0] = kSqrt0104 * ((tsh12[2] * tsh11[0] + tsh12[0] * tsh11[2]) + (tsh11[2] * tsh12[0] + tsh11[0] * tsh12[2]));\n        tsh22[1] = tsh12[1] * tsh11[0] + tsh11[1] * tsh12[0];\n        tsh22[2] = kSqrt0304 * (tsh12[1] * tsh11[1] + tsh11[1] * tsh12[1]);\n        tsh22[3] = tsh12[1] * tsh11[2] + tsh11[1] * tsh12[2];\n        tsh22[4] = kSqrt0104 * ((tsh12[2] * tsh11[2] - tsh12[0] * tsh11[0]) + (tsh11[2] * tsh12[2] - tsh11[0] * tsh12[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh22, out2);\n\n        tsh23[0] = kSqrt0103 * (tsh12[2] * tsh12[0] + tsh12[0] * tsh12[2]) + -kSqrt0112 *\n                   ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) + (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n        tsh23[1] = kSqrt0403 * tsh12[1] * tsh12[0] + -kSqrt0103 * (tsh13[1] * tsh13[0] + tsh11[1] * tsh11[0]);\n        tsh23[2] = tsh12[1] * tsh12[1] + -kSqrt0104 * (tsh13[1] * tsh13[1] + tsh11[1] * tsh11[1]);\n        tsh23[3] = kSqrt0403 * tsh12[1] * tsh12[2] + -kSqrt0103 * (tsh13[1] * tsh13[2] + tsh11[1] * tsh11[2]);\n        tsh23[4] = kSqrt0103 * (tsh12[2] * tsh12[2] - tsh12[0] * tsh12[0]) + -kSqrt0112 *\n                   ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) + (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh23, out3);\n\n        tsh24[0] = kSqrt0104 * ((tsh12[2] * tsh13[0] + tsh12[0] * tsh13[2]) + (tsh13[2] * tsh12[0] + tsh13[0] * tsh12[2]));\n        tsh24[1] = tsh12[1] * tsh13[0] + tsh13[1] * tsh12[0];\n        tsh24[2] = kSqrt0304 * (tsh12[1] * tsh13[1] + tsh13[1] * tsh12[1]);\n        tsh24[3] = tsh12[1] * tsh13[2] + tsh13[1] * tsh12[2];\n        tsh24[4] = kSqrt0104 * ((tsh12[2] * tsh13[2] - tsh12[0] * tsh13[0]) + (tsh13[2] * tsh12[2] - tsh13[0] * tsh12[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh24, out4);\n\n        tsh25[0] = kSqrt0104 * ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) - (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n        tsh25[1] = (tsh13[1] * tsh13[0] - tsh11[1] * tsh11[0]);\n        tsh25[2] = kSqrt0304 * (tsh13[1] * tsh13[1] - tsh11[1] * tsh11[1]);\n        tsh25[3] = (tsh13[1] * tsh13[2] - tsh11[1] * tsh11[2]);\n        tsh25[4] = kSqrt0104 * ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) - (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh25, out5);\n    };\n\n    static parseHeader(buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const versionMajor = headerArrayUint8[0];\n        const versionMinor = headerArrayUint8[1];\n        const maxSectionCount = headerArrayUint32[1];\n        const sectionCount = headerArrayUint32[2];\n        const maxSplatCount = headerArrayUint32[3];\n        const splatCount = headerArrayUint32[4];\n        const compressionLevel = headerArrayUint16[10];\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\n\n        return {\n            versionMajor,\n            versionMinor,\n            maxSectionCount,\n            sectionCount,\n            maxSplatCount,\n            splatCount,\n            compressionLevel,\n            sceneCenter\n        };\n    }\n\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        headerArrayUint32[2] = sectionCount;\n        headerArrayUint32[4] = splatCount;\n    }\n\n    static writeHeaderToBuffer(header, buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        headerArrayUint8[0] = header.versionMajor;\n        headerArrayUint8[1] = header.versionMinor;\n        headerArrayUint8[2] = 0; // unused for now\n        headerArrayUint8[3] = 0; // unused for now\n        headerArrayUint32[1] = header.maxSectionCount;\n        headerArrayUint32[2] = header.sectionCount;\n        headerArrayUint32[3] = header.maxSplatCount;\n        headerArrayUint32[4] = header.splatCount;\n        headerArrayUint16[10] = header.compressionLevel;\n        headerArrayFloat32[6] = header.sceneCenter.x;\n        headerArrayFloat32[7] = header.sceneCenter.y;\n        headerArrayFloat32[8] = header.sceneCenter.z;\n    }\n\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\n        const compressionLevel = header.compressionLevel;\n\n        const maxSectionCount = header.maxSectionCount;\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        const sectionHeaders = [];\n        let sectionHeaderBase = 0;\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\n        let splatCountOffset = 0;\n        for (let i = 0; i < maxSectionCount; i++) {\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n\n            const sphericalHarmonicsDegree = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 20];\n            const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree);\n\n            const splatDataStorageSizeBytes = bytesPerSplat * maxSplatCount;\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n            const sectionHeader = {\n                bytesPerSplat: bytesPerSplat,\n                splatCountOffset: splatCountOffset,\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\n                maxSplatCount: maxSplatCount,\n                bucketSize: bucketSize,\n                bucketCount: bucketCount,\n                bucketBlockSize: bucketBlockSize,\n                halfBucketBlockSize: halfBucketBlockSize,\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\n                storageSizeBytes: storageSizeBytes,\n                compressionScaleRange: compressionScaleRange,\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\n                base: sectionBase,\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\n                dataBase: sectionBase + bucketsStorageSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\n                sphericalHarmonicsDegree: sphericalHarmonicsDegree\n            };\n            sectionHeaders[i] = sectionHeader;\n            sectionBase += storageSizeBytes;\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n            splatCountOffset += maxSplatCount;\n        }\n\n        return sectionHeaders;\n    }\n\n\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\n        sectionHeadeArrayUint32[2] = compressionLevel >= 1 ? sectionHeader.bucketSize : 0;\n        sectionHeadeArrayUint32[3] = compressionLevel >= 1 ? sectionHeader.bucketCount : 0;\n        sectionHeadeArrayFloat32[4] = compressionLevel >= 1 ? sectionHeader.bucketBlockSize : 0.0;\n        sectionHeadeArrayUint16[10] = compressionLevel >= 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\n        sectionHeadeArrayUint32[6] = compressionLevel >= 1 ? sectionHeader.compressionScaleRange : 0;\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\n        sectionHeadeArrayUint32[8] = compressionLevel >= 1 ? sectionHeader.fullBucketCount : 0;\n        sectionHeadeArrayUint32[9] = compressionLevel >= 1 ? sectionHeader.partiallyFilledBucketCount : 0;\n        sectionHeadeArrayUint16[20] = sectionHeader.sphericalHarmonicsDegree;\n\n    }\n\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        sectionHeadeArrayUint32[0] = splatCount;\n    }\n\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\n        this.bufferData = bufferData;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSectionMap = [];\n\n        const header = SplatBuffer.parseHeader(this.bufferData);\n        this.versionMajor = header.versionMajor;\n        this.versionMinor = header.versionMinor;\n        this.maxSectionCount = header.maxSectionCount;\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\n        this.maxSplatCount = header.maxSplatCount;\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\n        this.compressionLevel = header.compressionLevel;\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\n\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\n\n        this.linkBufferArrays();\n        this.buildMaps();\n    }\n\n    static calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree) {\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n        const sphericalHarmonicsBytesPerSplat = SplatBuffer.CompressionLevels[compressionLevel].BytesPerSphericalHarmonicsComponent *\n                                                sphericalHarmonicsComponentsPerSplat;\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation +\n                              bytesPerColor + sphericalHarmonicsBytesPerSplat;\n        return {\n            bytesPerCenter,\n            bytesPerScale,\n            bytesPerRotation,\n            bytesPerColor,\n            sphericalHarmonicsComponentsPerSplat,\n            sphericalHarmonicsBytesPerSplat,\n            bytesPerSplat\n        };\n    }\n\n    linkBufferArrays() {\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\n            if (section.partiallyFilledBucketCount > 0) {\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\n                                                                       section.partiallyFilledBucketCount);\n            }\n        }\n    }\n\n    buildMaps() {\n        let cumulativeSplatCount = 0;\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            for (let j = 0; j < section.maxSplatCount; j++) {\n                const globalSplatIndex = cumulativeSplatCount + j;\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\n            }\n            cumulativeSplatCount += section.maxSplatCount;\n        }\n    }\n\n    updateLoadedCounts(newSectionCount, newSplatCount) {\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\n        this.sectionCount = newSectionCount;\n        this.splatCount = newSplatCount;\n    }\n\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\n        this.sections[sectionIndex].splatCount = newSplatCount;\n    }\n\n    static writeSplatDataToSectionBuffer = function() {\n\n        const tempCenterBuffer = new ArrayBuffer(12);\n        const tempScaleBuffer = new ArrayBuffer(12);\n        const tempRotationBuffer = new ArrayBuffer(16);\n        const tempColorBuffer = new ArrayBuffer(4);\n        const tempSHBuffer = new ArrayBuffer(256);\n        const tempRot = new THREE.Quaternion();\n        const tempScale = new THREE.Vector3();\n        const bucketCenterDelta = new THREE.Vector3();\n\n        const {\n            X: OFFSET_X, Y: OFFSET_Y, Z: OFFSET_Z,\n            SCALE0: OFFSET_SCALE0, SCALE1: OFFSET_SCALE1, SCALE2: OFFSET_SCALE2,\n            ROTATION0: OFFSET_ROT0, ROTATION1: OFFSET_ROT1, ROTATION2: OFFSET_ROT2, ROTATION3: OFFSET_ROT3,\n            FDC0: OFFSET_FDC0, FDC1: OFFSET_FDC1, FDC2: OFFSET_FDC2, OPACITY: OFFSET_OPACITY,\n            FRC0: OFFSET_FRC0, FRC9: OFFSET_FRC9,\n        } = UncompressedSplatArray.OFFSET;\n\n        const compressPositionOffset = (v, compressionScaleFactor, compressionScaleRange) => {\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n            v = Math.round(v * compressionScaleFactor) + compressionScaleRange;\n            return clamp(v, 0, doubleCompressionScaleRange);\n        };\n\n        return function(targetSplat, sectionBuffer, bufferOffset, compressionLevel, sphericalHarmonicsDegree,\n                        bucketCenter, compressionScaleFactor, compressionScaleRange) {\n\n            const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n            const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n            const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n            const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n            const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n\n            const centerBase = bufferOffset;\n            const scaleBase = centerBase + bytesPerCenter;\n            const rotationBase = scaleBase + bytesPerScale;\n            const colorBase = rotationBase + bytesPerRotation;\n            const sphericalHarmonicsBase = colorBase + bytesPerColor;\n\n            if (targetSplat[OFFSET_ROT0] !== undefined) {\n                tempRot.set(targetSplat[OFFSET_ROT0], targetSplat[OFFSET_ROT1], targetSplat[OFFSET_ROT2], targetSplat[OFFSET_ROT3]);\n                tempRot.normalize();\n            } else {\n                tempRot.set(1.0, 0.0, 0.0, 0.0);\n            }\n\n            if (targetSplat[OFFSET_SCALE0] !== undefined) {\n                tempScale.set(targetSplat[OFFSET_SCALE0] || 0,\n                              targetSplat[OFFSET_SCALE1] || 0,\n                              targetSplat[OFFSET_SCALE2] || 0);\n            } else {\n                tempScale.set(0, 0, 0);\n            }\n\n            if (compressionLevel === 0) {\n                const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\n                const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\n                const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\n\n                rot.set([tempRot.x, tempRot.y, tempRot.z, tempRot.w]);\n                scale.set([tempScale.x, tempScale.y, tempScale.z]);\n                center.set([targetSplat[OFFSET_X], targetSplat[OFFSET_Y], targetSplat[OFFSET_Z]]);\n\n                if (sphericalHarmonicsDegree > 0) {\n                    const shOut = new Float32Array(sectionBuffer, sphericalHarmonicsBase, sphericalHarmonicsComponentsPerSplat);\n                    if (sphericalHarmonicsDegree >= 1) {\n                            for (let s = 0; s < 9; s++) shOut[s] = targetSplat[OFFSET_FRC0 + s] || 0;\n                            if (sphericalHarmonicsDegree >= 2) {\n                                for (let s = 0; s < 15; s++) shOut[s + 9] = targetSplat[OFFSET_FRC9 + s] || 0;\n                            }\n                    }\n                }\n            } else {\n                const center = new Uint16Array(tempCenterBuffer, 0, SplatBuffer.CenterComponentCount);\n                const rot = new Uint16Array(tempRotationBuffer, 0, SplatBuffer.RotationComponentCount);\n                const scale = new Uint16Array(tempScaleBuffer, 0, SplatBuffer.ScaleComponentCount);\n\n                rot.set([toHalfFloat(tempRot.x), toHalfFloat(tempRot.y), toHalfFloat(tempRot.z), toHalfFloat(tempRot.w)]);\n                scale.set([toHalfFloat(tempScale.x), toHalfFloat(tempScale.y), toHalfFloat(tempScale.z)]);\n\n                bucketCenterDelta.set(targetSplat[OFFSET_X], targetSplat[OFFSET_Y], targetSplat[OFFSET_Z]).sub(bucketCenter);\n                bucketCenterDelta.x = compressPositionOffset(bucketCenterDelta.x, compressionScaleFactor, compressionScaleRange);\n                bucketCenterDelta.y = compressPositionOffset(bucketCenterDelta.y, compressionScaleFactor, compressionScaleRange);\n                bucketCenterDelta.z = compressPositionOffset(bucketCenterDelta.z, compressionScaleFactor, compressionScaleRange);\n                center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n\n                if (sphericalHarmonicsDegree > 0) {\n                    const SHArrayType = compressionLevel === 1 ? Uint16Array : Uint8Array;\n                    const bytesPerSHComponent = compressionLevel === 1 ? 2 : 1;\n                    const shOut = new SHArrayType(tempSHBuffer, 0, sphericalHarmonicsComponentsPerSplat);\n                    if (sphericalHarmonicsDegree >= 1) {\n                        for (let s = 0; s < 9; s++) {\n                            const srcVal = targetSplat[OFFSET_FRC0 + s] || 0;\n                            shOut[s] = compressionLevel === 1 ? toHalfFloat(srcVal) : toUint8(srcVal);\n                        }\n                        const degree1ByteCount = 9 * bytesPerSHComponent;\n                        copyBetweenBuffers(shOut.buffer, 0, sectionBuffer, sphericalHarmonicsBase, degree1ByteCount);\n                        if (sphericalHarmonicsDegree >= 2) {\n                            for (let s = 0; s < 15; s++) {\n                                const srcVal = targetSplat[OFFSET_FRC9 + s] || 0;\n                                shOut[s + 9] = compressionLevel === 1 ? toHalfFloat(srcVal) : toUint8(srcVal);\n                            }\n                            copyBetweenBuffers(shOut.buffer, degree1ByteCount, sectionBuffer,\n                                               sphericalHarmonicsBase + degree1ByteCount, 15 * bytesPerSHComponent);\n                        }\n                    }\n                }\n\n                copyBetweenBuffers(center.buffer, 0, sectionBuffer, centerBase, 6);\n                copyBetweenBuffers(scale.buffer, 0, sectionBuffer, scaleBase, 6);\n                copyBetweenBuffers(rot.buffer, 0, sectionBuffer, rotationBase, 8);\n            }\n\n            const rgba = new Uint8ClampedArray(tempColorBuffer, 0, 4);\n            rgba.set([targetSplat[OFFSET_FDC0] || 0, targetSplat[OFFSET_FDC1] || 0, targetSplat[OFFSET_FDC2] || 0]);\n            rgba[3] = targetSplat[OFFSET_OPACITY] || 0;\n\n            copyBetweenBuffers(rgba.buffer, 0, sectionBuffer, colorBase, 4);\n        };\n\n    }();\n\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\n                                               sceneCenter, blockSize, bucketSize, options = []) {\n\n        let shDegree = 0;\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n            shDegree = Math.max(splatArray.sphericalHarmonicsDegree, shDegree);\n        }\n\n        const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, shDegree);\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n\n        const sectionBuffers = [];\n        const sectionHeaderBuffers = [];\n        let totalSplatCount = 0;\n\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n            const validSplats = new UncompressedSplatArray(shDegree);\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                const targetSplat = splatArray.splats[i];\n                if ((targetSplat[UncompressedSplatArray.OFFSET.OPACITY] || 0) >= minimumAlpha) {\n                    validSplats.addSplat(targetSplat);\n                }\n            }\n\n            const sectionOptions = options[sa] || {};\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\n\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\n            const fullBucketCount = bucketInfo.fullBuckets.length;\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\n\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketDataBytes = compressionLevel >= 1 ? buckets.length *\n                                                            SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\n\n            const compressionScaleFactor = compressionScaleRange / (sectionBlockSize * 0.5);\n            const bucketCenter = new THREE.Vector3();\n\n            let outSplatCount = 0;\n            for (let b = 0; b < buckets.length; b++) {\n                const bucket = buckets[b];\n                bucketCenter.fromArray(bucket.center);\n                for (let i = 0; i < bucket.splats.length; i++) {\n                    let row = bucket.splats[i];\n                    const targetSplat = validSplats.splats[row];\n                    const bufferOffset = bucketDataBytes + outSplatCount * bytesPerSplat;\n                    SplatBuffer.writeSplatDataToSectionBuffer(targetSplat, sectionBuffer, bufferOffset, compressionLevel, shDegree,\n                                                              bucketCenter, compressionScaleFactor, compressionScaleRange);\n                    outSplatCount++;\n                }\n            }\n            totalSplatCount += outSplatCount;\n\n            if (compressionLevel >= 1) {\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer, 0, partiallyFullBucketLengths.length * 4);\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\n                }\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\n                for (let b = 0; b < buckets.length; b++) {\n                    const bucket = buckets[b];\n                    const base = b * 3;\n                    bucketArray[base] = bucket.center[0];\n                    bucketArray[base + 1] = bucket.center[1];\n                    bucketArray[base + 2] = bucket.center[2];\n                }\n            }\n            sectionBuffers.push(sectionBuffer);\n\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\n            SplatBuffer.writeSectionHeaderToBuffer({\n                maxSplatCount: outSplatCount,\n                splatCount: outSplatCount,\n                bucketSize: sectionBucketSize,\n                bucketCount: buckets.length,\n                bucketBlockSize: sectionBlockSize,\n                compressionScaleRange: compressionScaleRange,\n                storageSizeBytes: sectionSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\n                sphericalHarmonicsDegree: shDegree\n            }, compressionLevel, sectionHeaderBuffer, 0);\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\n\n        }\n\n        let sectionsCumulativeSizeBytes = 0;\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n\n        SplatBuffer.writeHeaderToBuffer({\n            versionMajor: 0,\n            versionMinor: 1,\n            maxSectionCount: sectionBuffers.length,\n            sectionCount: sectionBuffers.length,\n            maxSplatCount: totalSplatCount,\n            splatCount: totalSplatCount,\n            compressionLevel: compressionLevel,\n            sceneCenter: sceneCenter\n        }, unifiedBuffer);\n\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\n        }\n\n        for (let sectionBuffer of sectionBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\n            currentUnifiedBase += sectionBuffer.byteLength;\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n        return splatBuffer;\n    }\n\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\n        let splatCount = splatArray.splatCount;\n        const halfBlockSize = blockSize / 2.0;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\n\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= bucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        const partiallyFullBucketArray = [];\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    partiallyFullBucketArray.push(bucket);\n                }\n            }\n        }\n\n        return {\n            'fullBuckets': fullBuckets,\n            'partiallyFullBuckets': partiallyFullBucketArray,\n        };\n    }\n\n}\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\nimport * as THREE from 'three';\n\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\nconst HeaderEndToken = 'end_header';\n\nconst DataTypeMap = new Map([\n  ['char', Int8Array],\n  ['uchar', Uint8Array],\n  ['short', Int16Array],\n  ['ushort', Uint16Array],\n  ['int', Int32Array],\n  ['uint', Uint32Array],\n  ['float', Float32Array],\n  ['double', Float64Array],\n]);\n\nconst unpackUnorm = (value, bits) => {\n  const t = (1 << bits) - 1;\n  return (value & t) / t;\n};\n\nconst unpack111011 = (result, value) => {\n  result.x = unpackUnorm(value >>> 21, 11);\n  result.y = unpackUnorm(value >>> 11, 10);\n  result.z = unpackUnorm(value, 11);\n};\n\nconst unpack8888 = (result, value) => {\n  result.x = unpackUnorm(value >>> 24, 8);\n  result.y = unpackUnorm(value >>> 16, 8);\n  result.z = unpackUnorm(value >>> 8, 8);\n  result.w = unpackUnorm(value, 8);\n};\n\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\nconst unpackRot = (result, value) => {\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\n\n  switch (value >>> 30) {\n    case 0:\n      result.set(m, a, b, c);\n      break;\n    case 1:\n      result.set(a, m, b, c);\n      break;\n    case 2:\n      result.set(a, b, m, c);\n      break;\n    case 3:\n      result.set(a, b, c, m);\n      break;\n  }\n};\n\nconst lerp = (a, b, t) => {\n  return a * (1 - t) + b * t;\n};\n\nconst getElementPropStorage = (element, name) => {\n  return element.properties.find((p) => p.name === name && p.storage)\n    ?.storage;\n};\n\nexport class PlayCanvasCompressedPlyParser {\n\n  static decodeHeaderText(headerText) {\n\n    let element;\n    let chunkElement;\n    let vertexElement;\n\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\n\n    let bytesPerSplat = 0;\n    let done = false;\n    for (let i = 1; i < headerLines.length; ++i) {\n      const words = headerLines[i].split(' ');\n\n      switch (words[0]) {\n        case 'format':\n          if (words[1] !== 'binary_little_endian') {\n            throw new Error('Unsupported ply format');\n          }\n          break;\n        case 'element':\n          element = {\n            name: words[1],\n            count: parseInt(words[2], 10),\n            properties: [],\n            storageSizeBytes: 0\n          };\n          if (element.name === 'chunk') chunkElement = element;\n          else if (element.name === 'vertex') vertexElement = element;\n          break;\n        case 'property': {\n          if (!DataTypeMap.has(words[1])) {\n            throw new Error(\n              `Unrecognized property data type '${words[1]}' in ply header`\n            );\n          }\n          const StorageType = DataTypeMap.get(words[1]);\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\n          element.properties.push({\n            type: words[1],\n            name: words[2],\n            storage: null,\n            byteSize: StorageType.BYTES_PER_ELEMENT,\n            storageSizeByes: storageSizeByes\n          });\n          element.storageSizeBytes += storageSizeByes;\n          break;\n        }\n        case HeaderEndToken:\n          done = true;\n        break;\n        default:\n          throw new Error(\n            `Unrecognized header value '${words[0]}' in ply header`\n          );\n      }\n      if (done) break;\n    }\n\n    return {\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement,\n      'bytesPerSplat': bytesPerSplat,\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\n      'sphericalHarmonicsDegree': 0\n    };\n  }\n\n  static decodeHeader(plyBuffer) {\n\n    /**\n     * Searches for the first occurrence of a sequence within a buffer.\n     * @example\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\n     * @param {Uint8Array} buf - The buffer in which to search.\n     * @param {Uint8Array} search - The sequence to search for.\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\n     */\n    const find = (buf, search) => {\n      const endIndex = buf.length - search.length;\n      let i;\n      let j;\n      for (i = 0; i <= endIndex; ++i) {\n        for (j = 0; j < search.length; ++j) {\n          if (buf[i + j] !== search[j]) {\n            break;\n          }\n        }\n        if (j === search.length) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n     * Checks if array 'a' starts with the same elements as array 'b'.\n     * @example\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\n     * @param {Uint8Array} a - The array to check against.\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\n     */\n    const startsWith = (a, b) => {\n      if (a.length < b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < b.length; ++i) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let buf = new Uint8Array(plyBuffer);\n    let endHeaderTokenOffset;\n\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\n      throw new Error('Invalid PLY header');\n    }\n\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\n    if (endHeaderTokenOffset === -1) {\n      throw new Error('End of PLY header not found');\n    }\n\n    const headerText = new TextDecoder('ascii').decode(\n      buf.slice(0, endHeaderTokenOffset)\n    );\n\n    const {chunkElement, vertexElement, bytesPerSplat} = PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\n\n    return {\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\n      'bytesPerSplat': bytesPerSplat,\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement\n    };\n  }\n\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\n\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\n\n    fromIndex = fromIndex || 0;\n    toIndex = toIndex || element.count - 1;\n    for (let e = fromIndex; e <= toIndex; ++e) {\n      for (let j = 0; j < element.properties.length; ++j) {\n        const property = element.properties[j];\n\n        const StorageType = DataTypeMap.get(property.type);\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\n            (!propertyFilter || propertyFilter(property.name))) {\n          property.storage = new StorageType(element.count);\n        }\n\n        if (property.storage) {\n          switch (property.type) {\n            case 'char':\n              property.storage[e] = dataView.getInt8(readOffset);\n              break;\n            case 'uchar':\n              property.storage[e] = dataView.getUint8(readOffset);\n              break;\n            case 'short':\n              property.storage[e] = dataView.getInt16(readOffset, true);\n              break;\n            case 'ushort':\n              property.storage[e] = dataView.getUint16(readOffset, true);\n              break;\n            case 'int':\n              property.storage[e] = dataView.getInt32(readOffset, true);\n              break;\n            case 'uint':\n              property.storage[e] = dataView.getUint32(readOffset, true);\n              break;\n            case 'float':\n              property.storage[e] = dataView.getFloat32(readOffset, true);\n              break;\n            case 'double':\n              property.storage[e] = dataView.getFloat64(readOffset, true);\n              break;\n          }\n        }\n\n        readOffset += property.byteSize;\n      }\n    }\n\n    return readOffset;\n  }\n\n  static readPly(plyBuffer, propertyFilter = null) {\n\n    const header = PlayCanvasCompressedPlyParser.decodeHeader(plyBuffer);\n\n    let readIndex = PlayCanvasCompressedPlyParser.readElementData(header.chunkElement, plyBuffer,\n                                                                  header.headerSizeBytes, null, null, propertyFilter);\n    PlayCanvasCompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\n\n    return {\n      'chunkElement': header.chunkElement,\n      'vertexElement': header.vertexElement\n    };\n  }\n\n  static getElementStorageArrays(chunkElement, vertexElement) {\n    const minX = getElementPropStorage(chunkElement, 'min_x');\n    const minY = getElementPropStorage(chunkElement, 'min_y');\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\n    const position = getElementPropStorage(vertexElement, 'packed_position');\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\n    const color = getElementPropStorage(vertexElement, 'packed_color');\n    return {\n      positionExtremes: {\n        minX, maxX,\n        minY, maxY,\n        minZ, maxZ\n      },\n      scaleExtremes: {\n        minScaleX, maxScaleX, minScaleY,\n        maxScaleY, minScaleZ, maxScaleZ\n      },\n      position,\n      rotation,\n      scale,\n      color\n    };\n  }\n\n  static decompressSplat = function() {\n\n    const p = new THREE.Vector3();\n    const r = new THREE.Quaternion();\n    const s = new THREE.Vector3();\n    const c = new THREE.Vector4();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\n                    rotationArray, colorArray, outSplat) {\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\n\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\n\n      unpack111011(p, positionArray[index]);\n      unpackRot(r, rotationArray[index]);\n      unpack111011(s, scaleArray[index]);\n      unpack8888(c, colorArray[index]);\n\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\n\n      outSplat[OFFSET.ROTATION0] = r.x;\n      outSplat[OFFSET.ROTATION1] = r.y;\n      outSplat[OFFSET.ROTATION2] = r.z;\n      outSplat[OFFSET.ROTATION3] = r.w;\n\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\n\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\n\n      return outSplat;\n    };\n\n  }();\n\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\n                                               vertexDataBuffer, veretxReadOffset, outBuffer, outOffset, propertyFilter = null) {\n\n    PlayCanvasCompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\n\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    const tempSplat = UncompressedSplatArray.createSplat();\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n      PlayCanvasCompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\n                                                    scale, scaleExtremes, rotation, color, tempSplat);\n      const outBase = i * outBytesPerSplat + outOffset;\n      SplatBuffer.writeSplatDataToSectionBuffer(tempSplat, outBuffer, outBase, 0, 0);\n    }\n  }\n\n  static parseToUncompressedSplatArray(plyBuffer) {\n    const { chunkElement, vertexElement } = PlayCanvasCompressedPlyParser.readPly(plyBuffer);\n\n    const splatArray = new UncompressedSplatArray();\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    for (let i = 0; i < vertexElement.count; ++i) {\n\n      splatArray.addDefaultSplat();\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\n\n      PlayCanvasCompressedPlyParser.decompressSplat(i, 0, position, positionExtremes, scale, scaleExtremes, rotation, color, newSplat);\n    }\n\n    const mat = new THREE.Matrix4();\n    mat.identity();\n\n    return splatArray;\n  }\n\n}\n","export const PlyFormat = {\n    'INRIAV1': 0,\n    'INRIAV2': 1,\n    'PlayCanvasCompressed': 2\n};\n","import { PlyFormat } from './PlyFormat.js';\n\nconst [\n        FieldSizeIdDouble, FieldSizeIdInt, FieldSizeIdUInt, FieldSizeIdFloat, FieldSizeIdShort, FieldSizeIdUShort, FieldSizeIdUChar\n      ] = [0, 1, 2, 3, 4, 5, 6];\n\nconst FieldSizeStringMap = {\n    'double': FieldSizeIdDouble,\n    'int': FieldSizeIdInt,\n    'uint': FieldSizeIdUInt,\n    'float': FieldSizeIdFloat,\n    'short': FieldSizeIdShort,\n    'ushort': FieldSizeIdUShort,\n    'uchar': FieldSizeIdUChar,\n};\n\nconst FieldSize = {\n    [FieldSizeIdDouble]: 8,\n    [FieldSizeIdInt]: 4,\n    [FieldSizeIdUInt]: 4,\n    [FieldSizeIdFloat]: 4,\n    [FieldSizeIdShort]: 2,\n    [FieldSizeIdUShort]: 2,\n    [FieldSizeIdUChar]: 1,\n};\n\nexport class PlyParserUtils {\n\n    static HeaderEndToken = 'end_header';\n\n    constructor() {\n    }\n\n    decodeSectionHeader(headerLines, fieldNameIdMap, headerStartLine = 0) {\n\n        const extractedLines = [];\n\n        let processingSection = false;\n        let headerEndLine = -1;\n        let vertexCount = 0;\n        let endOfHeader = false;\n        let sectionName = null;\n\n        const fieldIds = [];\n        const fieldTypes = [];\n        const allFieldNames = [];\n        const usedFieldNames = [];\n        const fieldTypesByName = {};\n\n        for (let i = headerStartLine; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element')) {\n                if (processingSection) {\n                    headerEndLine--;\n                    break;\n                } else {\n                    processingSection = true;\n                    headerStartLine = i;\n                    headerEndLine = i;\n                    const lineComponents = line.split(' ');\n                    let validComponents = 0;\n                    for (let lineComponent of lineComponents) {\n                        const trimmedComponent = lineComponent.trim();\n                        if (trimmedComponent.length > 0) {\n                            validComponents++;\n                            if (validComponents === 2) {\n                                sectionName = trimmedComponent;\n                            } else if (validComponents === 3) {\n                                vertexCount = parseInt(trimmedComponent);\n                            }\n                        }\n                    }\n                }\n            } else if (line.startsWith('property')) {\n                const fieldMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (fieldMatch) {\n                    const fieldTypeStr = fieldMatch[2];\n                    const fieldName = fieldMatch[3];\n                    allFieldNames.push(fieldName);\n                    const fieldId = fieldNameIdMap[fieldName];\n                    fieldTypesByName[fieldName] = fieldTypeStr;\n                    const fieldType = FieldSizeStringMap[fieldTypeStr];\n                    if (fieldId !== undefined) {\n                        usedFieldNames.push(fieldName);\n                        fieldIds.push(fieldId);\n                        fieldTypes[fieldId] = fieldType;\n                    }\n                }\n            }\n            if (line === PlyParserUtils.HeaderEndToken) {\n                endOfHeader = true;\n                break;\n            }\n            if (processingSection) {\n                extractedLines.push(line);\n                headerEndLine++;\n            }\n        }\n\n        const fieldOffsets = [];\n        let bytesPerVertex = 0;\n        for (let fieldName of allFieldNames) {\n            const fieldType = fieldTypesByName[fieldName];\n            if (fieldTypesByName.hasOwnProperty(fieldName)) {\n                const fieldId = fieldNameIdMap[fieldName];\n                if (fieldId !== undefined) {\n                    fieldOffsets[fieldId] = bytesPerVertex;\n                }\n            }\n            bytesPerVertex += FieldSize[FieldSizeStringMap[fieldType]];\n        }\n\n        const sphericalHarmonics = this.decodeSphericalHarmonicsFromSectionHeader(allFieldNames, fieldNameIdMap);\n\n        return {\n            'headerLines': extractedLines,\n            'headerStartLine': headerStartLine,\n            'headerEndLine': headerEndLine,\n            'fieldTypes': fieldTypes,\n            'fieldIds': fieldIds,\n            'fieldOffsets': fieldOffsets,\n            'bytesPerVertex': bytesPerVertex,\n            'vertexCount': vertexCount,\n            'dataSizeBytes': bytesPerVertex * vertexCount,\n            'endOfHeader': endOfHeader,\n            'sectionName': sectionName,\n            'sphericalHarmonicsDegree': sphericalHarmonics.degree,\n            'sphericalHarmonicsCoefficientsPerChannel': sphericalHarmonics.coefficientsPerChannel,\n            'sphericalHarmonicsDegree1Fields': sphericalHarmonics.degree1Fields,\n            'sphericalHarmonicsDegree2Fields': sphericalHarmonics.degree2Fields\n        };\n\n    }\n\n    decodeSphericalHarmonicsFromSectionHeader(fieldNames, fieldNameIdMap) {\n        let sphericalHarmonicsFieldCount = 0;\n        let coefficientsPerChannel = 0;\n        for (let fieldName of fieldNames) {\n            if (fieldName.startsWith('f_rest')) sphericalHarmonicsFieldCount++;\n        }\n        coefficientsPerChannel = sphericalHarmonicsFieldCount / 3;\n        let degree = 0;\n        if (coefficientsPerChannel >= 3) degree = 1;\n        if (coefficientsPerChannel >= 8) degree = 2;\n\n        let degree1Fields = [];\n        let degree2Fields = [];\n\n        for (let rgb = 0; rgb < 3; rgb++) {\n            if (degree >= 1) {\n                for (let i = 0; i < 3; i++) {\n                    degree1Fields.push(fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb)]);\n                }\n            }\n            if (degree >= 2) {\n                for (let i = 0; i < 5; i++) {\n                    degree2Fields.push(fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb + 3)]);\n                }\n            }\n        }\n\n        return {\n            'degree': degree,\n            'coefficientsPerChannel': coefficientsPerChannel,\n            'degree1Fields': degree1Fields,\n            'degree2Fields': degree2Fields\n        };\n    }\n\n    static getHeaderSectionNames(headerLines) {\n        const sectionNames = [];\n        for (let headerLine of headerLines) {\n            if (headerLine.startsWith('element')) {\n                const lineComponents = headerLine.split(' ');\n                let validComponents = 0;\n                for (let lineComponent of lineComponents) {\n                    const trimmedComponent = lineComponent.trim();\n                    if (trimmedComponent.length > 0) {\n                        validComponents++;\n                        if (validComponents === 2) {\n                            sectionNames.push(trimmedComponent);\n                        }\n                    }\n                }\n            }\n        }\n        return sectionNames;\n    }\n\n    static checkTextForEndHeader(endHeaderTestText) {\n        if (endHeaderTestText.includes(PlyParserUtils.HeaderEndToken)) {\n            return true;\n        }\n        return false;\n    }\n\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n        return PlyParserUtils.checkTextForEndHeader(endHeaderTestText);\n    }\n\n    static extractHeaderFromBufferToText(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            if (PlyParserUtils.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\n                break;\n            }\n        }\n\n        return headerText;\n    }\n\n    readHeaderFromBuffer(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            if (PlyParserUtils.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\n                break;\n            }\n        }\n\n        return headerText;\n    }\n\n    static convertHeaderTextToLines(headerText) {\n        const headerLines = headerText.split('\\n');\n        const prunedLines = [];\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            prunedLines.push(line);\n            if (line === PlyParserUtils.HeaderEndToken) {\n                break;\n            }\n        }\n        return prunedLines;\n    }\n\n    static determineHeaderFormatFromHeaderText(headertText) {\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headertText);\n        let format = PlyFormat.INRIAV1;\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\n                format = PlyFormat.PlayCanvasCompressed;\n            } else if (line.startsWith('element codebook_centers')) {\n                format = PlyFormat.INRIAV2;\n            } else if (line === PlyParserUtils.HeaderEndToken) {\n                break;\n            }\n        }\n        return format;\n    }\n\n    static determineHeaderFormatFromPlyBuffer(plyBuffer) {\n        const headertText = PlyParserUtils.extractHeaderFromBufferToText(plyBuffer);\n        return PlyParserUtils.determineHeaderFormatFromHeaderText(headertText);\n    }\n\n    static readVertex(vertexData, header, row, dataOffset, fieldsToRead, rawVertex, normalize = true) {\n        const offset = row * header.bytesPerVertex + dataOffset;\n        const fieldOffsets = header.fieldOffsets;\n        const fieldTypes = header.fieldTypes;\n        for (let fieldId of fieldsToRead) {\n            const fieldType = fieldTypes[fieldId];\n            if (fieldType === FieldSizeIdFloat) {\n                rawVertex[fieldId] = vertexData.getFloat32(offset + fieldOffsets[fieldId], true);\n            } else if (fieldType === FieldSizeIdShort) {\n                rawVertex[fieldId] = vertexData.getInt16(offset + fieldOffsets[fieldId], true);\n            } else if (fieldType === FieldSizeIdUShort) {\n                rawVertex[fieldId] = vertexData.getUint16(offset + fieldOffsets[fieldId], true);\n            } else if (fieldType === FieldSizeIdInt) {\n                rawVertex[fieldId] = vertexData.getInt32(offset + fieldOffsets[fieldId], true);\n            } else if (fieldType === FieldSizeIdUInt) {\n                rawVertex[fieldId] = vertexData.getUint32(offset + fieldOffsets[fieldId], true);\n            } else if (fieldType === FieldSizeIdUChar) {\n                if (normalize) {\n                    rawVertex[fieldId] = vertexData.getUint8(offset + fieldOffsets[fieldId]) / 255.0;\n                } else {\n                    rawVertex[fieldId] = vertexData.getUint8(offset + fieldOffsets[fieldId]);\n                }\n            }\n        }\n    }\n}\n","import * as THREE from 'three';\nimport { clamp } from '../../Util.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\n\nconst BaseFieldNamesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3', 'x', 'y', 'z',\n                              'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity', 'red', 'green', 'blue', 'f_rest_0'];\n\nconst BaseFieldsToReadIndexes = BaseFieldNamesToRead.map((e, i) => i);\n\nconst [\n        SCALE_0, SCALE_1, SCALE_2, ROT_0, ROT_1, ROT_2, ROT_3, X, Y, Z, F_DC_0, F_DC_1, F_DC_2, OPACITY, RED, GREEN, BLUE, F_REST_0\n      ] = BaseFieldsToReadIndexes;\n\nexport class INRIAV1PlyParser {\n\n    constructor() {\n        this.plyParserutils = new PlyParserUtils();\n    }\n\n    decodeHeaderLines(headerLines) {\n\n        let shLineCount = 0;\n        headerLines.forEach((line) => {\n            if (line.includes('f_rest_')) shLineCount++;\n        });\n\n        let shFieldsToReadCount = 0;\n        if (shLineCount >= 45) {\n            shFieldsToReadCount = 45;\n        } else if (shLineCount >= 24) {\n            shFieldsToReadCount = 24;\n        } else if (shLineCount >= 9) {\n            shFieldsToReadCount = 9;\n        }\n\n        const shFieldIndexesToMap = Array.from(Array(Math.max(shFieldsToReadCount - 1, 0)));\n        let shRemainingFieldNamesToRead = shFieldIndexesToMap.map((element, index) => `f_rest_${index + 1}`);\n\n        const fieldNamesToRead = [...BaseFieldNamesToRead, ...shRemainingFieldNamesToRead];\n        const fieldsToReadIndexes = fieldNamesToRead.map((e, i) => i);\n\n        const fieldNameIdMap = fieldsToReadIndexes.reduce((acc, element) => {\n            acc[fieldNamesToRead[element]] = element;\n            return acc;\n        }, {});\n        const header = this.plyParserutils.decodeSectionHeader(headerLines, fieldNameIdMap, 0);\n        header.splatCount = header.vertexCount;\n        header.bytesPerSplat = header.bytesPerVertex;\n        header.fieldsToReadIndexes = fieldsToReadIndexes;\n        return header;\n    }\n\n    decodeHeaderText(headerText) {\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\n        const header = this.decodeHeaderLines(headerLines);\n        header.headerText = headerText;\n        header.headerSizeBytes = headerText.indexOf(PlyParserUtils.HeaderEndToken) + PlyParserUtils.HeaderEndToken.length + 1;\n        return header;\n    }\n\n    decodeHeaderFromBuffer(plyBuffer) {\n        const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\n        return this.decodeHeaderText(headerText);\n    }\n\n    findSplatData(plyBuffer, header) {\n        return new DataView(plyBuffer, header.headerSizeBytes);\n    }\n\n    parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, splatData, splatDataOffset,\n                                          toBuffer, toOffset, outSphericalHarmonicsDegree = 0) {\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n            const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(splatData, i, header,\n                                                                          splatDataOffset, outSphericalHarmonicsDegree);\n            const outBase = i * outBytesPerSplat + toOffset;\n            SplatBuffer.writeSplatDataToSectionBuffer(parsedSplat, toBuffer, outBase, 0, outSphericalHarmonicsDegree);\n        }\n    }\n\n    decodeSectionSplatData(sectionSplatData, splatCount, sectionHeader, outSphericalHarmonicsDegree) {\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sectionHeader.sphericalHarmonicsDegree);\n        const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n        for (let row = 0; row < splatCount; row++) {\n            const newSplat = INRIAV1PlyParser.parseToUncompressedSplat(sectionSplatData, row, sectionHeader,\n                                                                       0, outSphericalHarmonicsDegree);\n            splatArray.addSplat(newSplat);\n        }\n        return splatArray;\n    }\n\n    static parseToUncompressedSplat = function() {\n\n        let rawSplat = [];\n        const tempRotation = new THREE.Quaternion();\n\n        const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n        const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n        const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n        const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\n        const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\n        const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\n\n        const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\n        const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\n        const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\n        const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\n\n        const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\n        const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\n        const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\n        const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\n\n        const OFFSET_FRC = [];\n\n        for (let i = 0; i < 45; i++) {\n            OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\n        }\n\n        return function(splatData, row, header, splatDataOffset = 0, outSphericalHarmonicsDegree = 0) {\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n            INRIAV1PlyParser.readSplat(splatData, header, row, splatDataOffset, rawSplat);\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\n            if (rawSplat[SCALE_0] !== undefined) {\n                newSplat[OFFSET_SCALE0] = Math.exp(rawSplat[SCALE_0]);\n                newSplat[OFFSET_SCALE1] = Math.exp(rawSplat[SCALE_1]);\n                newSplat[OFFSET_SCALE2] = Math.exp(rawSplat[SCALE_2]);\n            } else {\n                newSplat[OFFSET_SCALE0] = 0.01;\n                newSplat[OFFSET_SCALE1] = 0.01;\n                newSplat[OFFSET_SCALE2] = 0.01;\n            }\n\n            if (rawSplat[F_DC_0] !== undefined) {\n                const SH_C0 = 0.28209479177387814;\n                newSplat[OFFSET_FDC0] = (0.5 + SH_C0 * rawSplat[F_DC_0]) * 255;\n                newSplat[OFFSET_FDC1] = (0.5 + SH_C0 * rawSplat[F_DC_1]) * 255;\n                newSplat[OFFSET_FDC2] = (0.5 + SH_C0 * rawSplat[F_DC_2]) * 255;\n            } else if (rawSplat[RED] !== undefined) {\n                newSplat[OFFSET_FDC0] = rawSplat[RED] * 255;\n                newSplat[OFFSET_FDC1] = rawSplat[GREEN] * 255;\n                newSplat[OFFSET_FDC2] = rawSplat[BLUE] * 255;\n            } else {\n                newSplat[OFFSET_FDC0] = 0;\n                newSplat[OFFSET_FDC1] = 0;\n                newSplat[OFFSET_FDC2] = 0;\n            }\n\n            if (rawSplat[OPACITY] !== undefined) {\n                newSplat[OFFSET_OPACITY] = (1 / (1 + Math.exp(-rawSplat[OPACITY]))) * 255;\n            }\n\n            newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\n            newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\n            newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\n            newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\n\n            if (outSphericalHarmonicsDegree >= 1) {\n                if (rawSplat[F_REST_0] !== undefined) {\n                    for (let i = 0; i < 9; i++) {\n                        newSplat[OFFSET_FRC[i]] = rawSplat[header.sphericalHarmonicsDegree1Fields[i]];\n                    }\n                    if (outSphericalHarmonicsDegree >= 2) {\n                        for (let i = 0; i < 15; i++) {\n                            newSplat[OFFSET_FRC[9 + i]] = rawSplat[header.sphericalHarmonicsDegree2Fields[i]];\n                        }\n                    }\n                }\n            }\n\n            tempRotation.set(rawSplat[ROT_0], rawSplat[ROT_1], rawSplat[ROT_2], rawSplat[ROT_3]);\n            tempRotation.normalize();\n\n            newSplat[OFFSET_ROTATION0] = tempRotation.x;\n            newSplat[OFFSET_ROTATION1] = tempRotation.y;\n            newSplat[OFFSET_ROTATION2] = tempRotation.z;\n            newSplat[OFFSET_ROTATION3] = tempRotation.w;\n\n            newSplat[OFFSET_X] = rawSplat[X];\n            newSplat[OFFSET_Y] = rawSplat[Y];\n            newSplat[OFFSET_Z] = rawSplat[Z];\n\n            return newSplat;\n        };\n\n    }();\n\n    static readSplat(splatData, header, row, dataOffset, rawSplat) {\n        return PlyParserUtils.readVertex(splatData, header, row, dataOffset, header.fieldsToReadIndexes, rawSplat, true);\n    }\n\n    parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n        const header = this.decodeHeaderFromBuffer(plyBuffer);\n        const splatCount = header.splatCount;\n        const splatData = this.findSplatData(plyBuffer, header);\n        const splatArray = this.decodeSectionSplatData(splatData, splatCount, header, outSphericalHarmonicsDegree);\n        return splatArray;\n    }\n}\n","import * as THREE from 'three';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { clamp } from '../../Util.js';\n\nconst CodeBookEntryNamesToRead = [\n    'features_dc', 'features_rest_0', 'features_rest_1', 'features_rest_2', 'features_rest_3', 'features_rest_4', 'features_rest_5',\n    'features_rest_6', 'features_rest_7', 'features_rest_8', 'features_rest_9', 'features_rest_10', 'features_rest_11', 'features_rest_12',\n    'features_rest_13', 'features_rest_14', 'opacity', 'scaling', 'rotation_re', 'rotation_im'\n];\nconst CodeBookEntriesToReadIndexes = CodeBookEntryNamesToRead.map((e, i) => i);\n\nconst [\n        CB_FEATURES_DC, CB_FEATURES_REST_0, CB_FEATURES_REST_3, CB_OPACITY, CB_SCALING, CB_ROTATION_RE, CB_ROTATION_IM\n      ] = [0, 1, 4, 16, 17, 18, 19];\n\nconst FieldNamesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                          'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity', 'red', 'green', 'blue',\n                          'f_rest_0', 'f_rest_1', 'f_rest_2', 'f_rest_3', 'f_rest_4', 'f_rest_5', 'f_rest_6', 'f_rest_7', 'f_rest_8',\n                          'f_rest_9', 'f_rest_10', 'f_rest_11', 'f_rest_12', 'f_rest_13', 'f_rest_14', 'f_rest_15', 'f_rest_16',\n                          'f_rest_17', 'f_rest_18', 'f_rest_19', 'f_rest_20', 'f_rest_21', 'f_rest_22', 'f_rest_23', 'f_rest_24',\n                          'f_rest_25', 'f_rest_26', 'f_rest_27', 'f_rest_28', 'f_rest_29', 'f_rest_30', 'f_rest_31', 'f_rest_32',\n                          'f_rest_33', 'f_rest_34', 'f_rest_35', 'f_rest_36', 'f_rest_37', 'f_rest_38', 'f_rest_39', 'f_rest_40',\n                          'f_rest_41', 'f_rest_42', 'f_rest_43', 'f_rest_44', 'f_rest_45'\n                         ];\nconst FieldsToReadIndexes = FieldNamesToRead.map((e, i) => i);\n\nconst [\n        PLY_SCALE_0, PLY_SCALE_1, PLY_SCALE_2, PLY_ROT_0, PLY_ROT_1, PLY_ROT_2, PLY_ROT_3, PLY_X, PLY_Y, PLY_Z,\n        PLY_F_DC_0, PLY_F_DC_1, PLY_F_DC_2, PLY_OPACITY,\n      ] = FieldsToReadIndexes;\n\nconst PLY_RED = PLY_F_DC_0;\nconst PLY_GREEN = PLY_F_DC_1;\nconst PLY_BLUE = PLY_F_DC_2;\n\nconst fromHalfFloat = (hf) =>{\n    const t = (31744 & hf) >> 10;\n    const a = 1023 & hf;\n    return (hf >> 15 ? -1 : 1)*(t ? t === 31 ? a ? NaN : 1/0 : Math.pow(2, t - 15) *( 1 + a / 1024) : a / 1024*6103515625e-14);\n};\n\nexport class INRIAV2PlyParser {\n\n    constructor() {\n        this.plyParserutils = new PlyParserUtils();\n    }\n\n    decodeSectionHeadersFromHeaderLines(headerLines) {\n        const fieldNameIdMap = FieldsToReadIndexes.reduce((acc, element) => {\n            acc[FieldNamesToRead[element]] = element;\n            return acc;\n        }, {});\n\n        const codeBookEntriesToReadIdMap = CodeBookEntriesToReadIndexes.reduce((acc, element) => {\n            acc[CodeBookEntryNamesToRead[element]] = element;\n            return acc;\n        }, {});\n\n        const sectionNames = PlyParserUtils.getHeaderSectionNames(headerLines);\n        let codeBookSectionIndex;\n        for (let s = 0; s < sectionNames.length; s++) {\n            const sectionName = sectionNames[s];\n            if (sectionName === 'codebook_centers') {\n                codeBookSectionIndex = s;\n            }\n        }\n\n        let currentStartLine = 0;\n        let lastSectionFound = false;\n        const sectionHeaders = [];\n        let sectionIndex = 0;\n        while (!lastSectionFound) {\n            let sectionHeader;\n            if (sectionIndex === codeBookSectionIndex) {\n                sectionHeader = this.plyParserutils.decodeSectionHeader(headerLines, codeBookEntriesToReadIdMap, currentStartLine);\n            } else {\n                sectionHeader = this.plyParserutils.decodeSectionHeader(headerLines, fieldNameIdMap, currentStartLine);\n            }\n            lastSectionFound = sectionHeader.endOfHeader;\n            currentStartLine = sectionHeader.headerEndLine + 1;\n            if (!lastSectionFound) {\n                sectionHeader.splatCount = sectionHeader.vertexCount;\n                sectionHeader.bytesPerSplat = sectionHeader.bytesPerVertex;\n            }\n            sectionHeaders.push(sectionHeader);\n            sectionIndex++;\n        }\n        return sectionHeaders;\n    }\n\n    decodeSectionHeadersFromHeaderText(headerText) {\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\n        return this.decodeSectionHeadersFromHeaderLines(headerLines);\n    }\n\n    getSplatCountFromSectionHeaders(sectionHeaders) {\n        let splatCount = 0;\n        for (let sectionHeader of sectionHeaders) {\n            if (sectionHeader.sectionName !== 'codebook_centers') {\n                splatCount += sectionHeader.vertexCount;\n            }\n        }\n        return splatCount;\n    }\n\n    decodeHeaderFromHeaderText(headerText) {\n        const headerSizeBytes = headerText.indexOf(PlyParserUtils.HeaderEndToken) + PlyParserUtils.HeaderEndToken.length + 1;\n        const sectionHeaders = this.decodeSectionHeadersFromHeaderText(headerText);\n        const splatCount = this.getSplatCountFromSectionHeaders(sectionHeaders);\n        return {\n            'headerSizeBytes': headerSizeBytes,\n            'sectionHeaders': sectionHeaders,\n            'splatCount': splatCount\n        };\n    }\n\n    decodeHeaderFromBuffer(plyBuffer) {\n        const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\n        return this.decodeHeaderFromHeaderText(headerText);\n    }\n\n    findVertexData(plyBuffer, header, targetSection) {\n        let byteOffset = header.headerSizeBytes;\n        for (let s = 0; s < targetSection && s < header.sectionHeaders.length; s++) {\n            const sectionHeader = header.sectionHeaders[s];\n            byteOffset += sectionHeader.dataSizeBytes;\n        }\n        return new DataView(plyBuffer, byteOffset, header.sectionHeaders[targetSection].dataSizeBytes);\n    }\n\n    decodeCodeBook(codeBookData, sectionHeader) {\n\n        const rawVertex = [];\n        const codeBook = [];\n        for (let row = 0; row < sectionHeader.vertexCount; row++) {\n            PlyParserUtils.readVertex(codeBookData, sectionHeader, row, 0, CodeBookEntriesToReadIndexes, rawVertex);\n            for (let index of CodeBookEntriesToReadIndexes) {\n                const codeBookElementOffset = CodeBookEntriesToReadIndexes[index];\n                let codeBookPage = codeBook[codeBookElementOffset];\n                if (!codeBookPage) {\n                    codeBook[codeBookElementOffset] = codeBookPage = [];\n                }\n                codeBookPage.push(rawVertex[index]);\n            }\n        }\n        for (let page = 0; page < codeBook.length; page++) {\n            const codeBookPage = codeBook[page];\n            const SH_C0 = 0.28209479177387814;\n            for (let i = 0; i < codeBookPage.length; i++) {\n               const baseValue = fromHalfFloat(codeBookPage[i]);\n                if (page === CB_OPACITY) {\n                    codeBookPage[i] = Math.round((1 / (1 + Math.exp(-baseValue))) * 255);\n                } else if (page === CB_FEATURES_DC) {\n                    codeBookPage[i] = Math.round((0.5 + SH_C0 * baseValue) * 255);\n                } else if (page === CB_SCALING) {\n                    codeBookPage[i] = Math.exp(baseValue);\n                } else {\n                    codeBookPage[i] = baseValue;\n                }\n            }\n        }\n        return codeBook;\n    }\n\n    decodeSectionSplatData(sectionSplatData, splatCount, sectionHeader, codeBook, outSphericalHarmonicsDegree) {\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sectionHeader.sphericalHarmonicsDegree);\n        const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n        for (let row = 0; row < splatCount; row++) {\n            const newSplat = INRIAV2PlyParser.parseToUncompressedSplat(sectionSplatData, row, sectionHeader, codeBook,\n                                                                       0, outSphericalHarmonicsDegree);\n            splatArray.addSplat(newSplat);\n        }\n        return splatArray;\n    }\n\n    static parseToUncompressedSplat = function() {\n\n        let rawSplat = [];\n        const tempRotation = new THREE.Quaternion();\n\n        const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n        const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n        const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n        const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\n        const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\n        const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\n\n        const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\n        const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\n        const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\n        const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\n\n        const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\n        const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\n        const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\n        const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\n\n        const OFFSET_FRC = [];\n\n        for (let i = 0; i < 45; i++) {\n            OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\n        }\n\n        return function(splatData, row, header, codeBook, splatDataOffset = 0, outSphericalHarmonicsDegree = 0) {\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n            INRIAV2PlyParser.readSplat(splatData, header, row, splatDataOffset, rawSplat);\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\n            if (rawSplat[PLY_SCALE_0] !== undefined) {\n                newSplat[OFFSET_SCALE0] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_0]];\n                newSplat[OFFSET_SCALE1] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_1]];\n                newSplat[OFFSET_SCALE2] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_2]];\n            } else {\n                newSplat[OFFSET_SCALE0] = 0.01;\n                newSplat[OFFSET_SCALE1] = 0.01;\n                newSplat[OFFSET_SCALE2] = 0.01;\n            }\n\n            if (rawSplat[PLY_F_DC_0] !== undefined) {\n                newSplat[OFFSET_FDC0] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_0]];\n                newSplat[OFFSET_FDC1] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_1]];\n                newSplat[OFFSET_FDC2] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_2]];\n            } else if (rawSplat[PLY_RED] !== undefined) {\n                newSplat[OFFSET_FDC0] = rawSplat[PLY_RED] * 255;\n                newSplat[OFFSET_FDC1] = rawSplat[PLY_GREEN] * 255;\n                newSplat[OFFSET_FDC2] = rawSplat[PLY_BLUE] * 255;\n            } else {\n                newSplat[OFFSET_FDC0] = 0;\n                newSplat[OFFSET_FDC1] = 0;\n                newSplat[OFFSET_FDC2] = 0;\n            }\n\n            if (rawSplat[PLY_OPACITY] !== undefined) {\n                newSplat[OFFSET_OPACITY] = codeBook[CB_OPACITY][rawSplat[PLY_OPACITY]];\n            }\n\n            newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\n            newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\n            newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\n            newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\n\n            if (outSphericalHarmonicsDegree >= 1 && header.sphericalHarmonicsDegree >= 1) {\n                for (let i = 0; i < 9; i++) {\n                    const codeBookPage = codeBook[CB_FEATURES_REST_0 + i % 3];\n                    newSplat[OFFSET_FRC[i]] = codeBookPage[rawSplat[header.sphericalHarmonicsDegree1Fields[i]]];\n                }\n                if (outSphericalHarmonicsDegree >= 2 && header.sphericalHarmonicsDegree >= 2) {\n                    for (let i = 0; i < 15; i++) {\n                        const codeBookPage = codeBook[CB_FEATURES_REST_3 + i % 5];\n                        newSplat[OFFSET_FRC[9 + i]] = codeBookPage[rawSplat[header.sphericalHarmonicsDegree2Fields[i]]];\n                    }\n                }\n            }\n\n            const rot0 = codeBook[CB_ROTATION_RE][rawSplat[PLY_ROT_0]];\n            const rot1 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_1]];\n            const rot2 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_2]];\n            const rot3 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_3]];\n            tempRotation.set(rot0, rot1, rot2, rot3);\n            tempRotation.normalize();\n\n            newSplat[OFFSET_ROTATION0] = tempRotation.x;\n            newSplat[OFFSET_ROTATION1] = tempRotation.y;\n            newSplat[OFFSET_ROTATION2] = tempRotation.z;\n            newSplat[OFFSET_ROTATION3] = tempRotation.w;\n\n            newSplat[OFFSET_X] = fromHalfFloat(rawSplat[PLY_X]);\n            newSplat[OFFSET_Y] = fromHalfFloat(rawSplat[PLY_Y]);\n            newSplat[OFFSET_Z] = fromHalfFloat(rawSplat[PLY_Z]);\n\n            return newSplat;\n        };\n\n    }();\n\n    static readSplat(splatData, header, row, dataOffset, rawSplat) {\n        return PlyParserUtils.readVertex(splatData, header, row, dataOffset, FieldsToReadIndexes, rawSplat, false);\n    }\n\n    parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n        const splatArrays = [];\n        const header = this.decodeHeaderFromBuffer(plyBuffer, outSphericalHarmonicsDegree);\n        let codeBook;\n\n        for (let s = 0; s < header.sectionHeaders.length; s++) {\n            const sectionHeader = header.sectionHeaders[s];\n            if (sectionHeader.sectionName === 'codebook_centers') {\n                const codeBookData = this.findVertexData(plyBuffer, header, s);\n                codeBook = this.decodeCodeBook(codeBookData, sectionHeader);\n            }\n        }\n        for (let s = 0; s < header.sectionHeaders.length; s++) {\n            const sectionHeader = header.sectionHeaders[s];\n            if (sectionHeader.sectionName !== 'codebook_centers') {\n                const splatCount = sectionHeader.vertexCount;\n                const vertexData = this.findVertexData(plyBuffer, header, s);\n                const splatArray = this.decodeSectionSplatData(vertexData, splatCount, sectionHeader,\n                                                               codeBook, outSphericalHarmonicsDegree);\n                splatArrays.push(splatArray);\n            }\n        }\n\n        const unified = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n        for (let splatArray of splatArrays) {\n            for (let splat of splatArray.splats) {\n                unified.addSplat(splat);\n            }\n        }\n\n        return unified;\n    }\n}\n","import { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\nimport { INRIAV2PlyParser } from './INRIAV2PlyParser.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { PlyFormat } from './PlyFormat.js';\n\nexport class PlyParser {\n\n    static parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n\n        const plyFormat = PlyParserUtils.determineHeaderFormatFromPlyBuffer(plyBuffer);\n\n        if (plyFormat === PlyFormat.PlayCanvasCompressed) {\n            return PlayCanvasCompressedPlyParser.parseToUncompressedSplatArray(plyBuffer);\n        } else if (plyFormat === PlyFormat.INRIAV1) {\n            return new INRIAV1PlyParser().parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\n        } else if (plyFormat === PlyFormat.INRIAV2) {\n            return new INRIAV2PlyParser().parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\n        }\n    }\n\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatPartitioner {\n\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\n        this.sectionCount = sectionCount;\n        this.sectionFilters = sectionFilters;\n        this.groupingParameters = groupingParameters;\n        this.partitionGenerator = partitionGenerator;\n    }\n\n    partitionUncompressedSplatArray(splatArray) {\n        let groupingParameters;\n        let sectionCount;\n        let sectionFilters;\n        if (this.partitionGenerator) {\n            const results = this.partitionGenerator(splatArray);\n            groupingParameters = results.groupingParameters;\n            sectionCount = results.sectionCount;\n            sectionFilters = results.sectionFilters;\n        } else {\n            groupingParameters = this.groupingParameters;\n            sectionCount = this.sectionCount;\n            sectionFilters = this.sectionFilters;\n        }\n\n        const newArrays = [];\n        for (let s = 0; s < sectionCount; s++) {\n            const sectionSplats = new UncompressedSplatArray(splatArray.sphericalHarmonicsDegree);\n            const sectionFilter = sectionFilters[s];\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                if (sectionFilter(i)) {\n                    sectionSplats.addSplatFromArray(splatArray, i);\n                }\n            }\n            newArrays.push(sectionSplats);\n        }\n        return {\n            splatArrays: newArrays,\n            parameters: groupingParameters\n        };\n    }\n\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n\n        const partitionGenerator = (splatArray) => {\n\n            const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n            const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n            const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\n\n            const center = new THREE.Vector3();\n            const clampDistance = 0.5;\n            const clampPoint = (point) => {\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\n            };\n            splatArray.splats.forEach((splat) => {\n                center.set(splat[OFFSET_X], splat[OFFSET_Y], splat[OFFSET_Z]).sub(sceneCenter);\n                clampPoint(center);\n                splat.centerDist = center.lengthSq();\n            });\n            splatArray.splats.sort((a, b) => {\n                let centerADist = a.centerDist;\n                let centerBDist = b.centerDist;\n                if (centerADist > centerBDist) return 1;\n                else return -1;\n            });\n\n            const sectionFilters = [];\n            const groupingParameters = [];\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\n            let currentStartSplat = 0;\n            for (let i = 0; i < patitionCount; i ++) {\n                let startSplat = currentStartSplat;\n                sectionFilters.push((splatIndex) => {\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\n                });\n                groupingParameters.push({\n                    'blocksSize': blockSize,\n                    'bucketSize': bucketSize,\n                });\n                currentStartSplat += partitionSize;\n            }\n            return {\n                'sectionCount': sectionFilters.length,\n                sectionFilters,\n                groupingParameters\n            };\n        };\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\n    }\n}\n","import * as THREE from 'three';\nimport { SplatPartitioner } from './SplatPartitioner.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatBufferGenerator {\n\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n        this.splatPartitioner = splatPartitioner;\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\n        this.compressionLevel = compressionLevel;\n        this.sectionSize = sectionSize;\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\n        this.blockSize = blockSize;\n        this.bucketSize = bucketSize;\n    }\n\n    generateFromUncompressedSplatArray(splatArray) {\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\n                                                               partitionResults.parameters);\n    }\n\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\n    }\n}\n","export const LoaderStatus = {\n    'Downloading': 0,\n    'Processing': 1,\n    'Done': 2\n};\n","import * as THREE from 'three';\nimport { PlyParser } from './PlyParser.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\nimport { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\nimport { PlyFormat } from './PlyFormat.js';\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nfunction storeChunksInBuffer(chunks, buffer) {\n    let inBytes = 0;\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\n\n    if (!buffer || buffer.byteLength < inBytes) {\n        buffer = new ArrayBuffer(inBytes);\n    }\n\n    let offset = 0;\n    for (let chunk of chunks) {\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\n        offset += chunk.sizeBytes;\n    }\n\n    return buffer;\n}\n\nexport class PlyLoader {\n\n    static loadFromURL(fileName, onProgress, progressiveLoad, onStreamedSectionProgress, minimumAlpha, compressionLevel,\n                       outSphericalHarmonicsDegree = 0, sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        const progressiveLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const sectionCount = 1;\n\n        let progressiveLoadBufferIn;\n        let progressiveLoadBufferOut;\n        let progressiveLoadSplatBuffer;\n        let compressedPlyHeaderChunksBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let headerLoaded = false;\n        let readyToLoadSplatData = false;\n        let compressed = false;\n\n        const progressiveLoadPromise = nativePromiseWithExtractedComponents();\n\n        let numBytesStreamed = 0;\n        let numBytesParsed = 0;\n        let numBytesDownloaded = 0;\n        let headerText = '';\n        let header = null;\n        let chunks = [];\n\n        const textDecoder = new TextDecoder();\n\n        const inriaV1PlyParser = new INRIAV1PlyParser();\n\n        const localOnProgress = (percent, percentLabel, chunkData) => {\n            const loadComplete = percent >= 100;\n            if (progressiveLoad) {\n\n                if (chunkData) {\n                    chunks.push({\n                        'data': chunkData,\n                        'sizeBytes': chunkData.byteLength,\n                        'startBytes': numBytesDownloaded,\n                        'endBytes': numBytesDownloaded + chunkData.byteLength\n                    });\n                    numBytesDownloaded += chunkData.byteLength;\n                }\n\n                if (!headerLoaded) {\n                    headerText += textDecoder.decode(chunkData);\n                    if (PlyParserUtils.checkTextForEndHeader(headerText)) {\n                        const plyFormat = PlyParserUtils.determineHeaderFormatFromHeaderText(headerText);\n                        if (plyFormat === PlyFormat.INRIAV1) {\n                            header = inriaV1PlyParser.decodeHeaderText(headerText);\n                            maxSplatCount = header.splatCount;\n                            readyToLoadSplatData = true;\n                            compressed = false;\n                        } else if (plyFormat === PlyFormat.PlayCanvasCompressed) {\n                            header = PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\n                            maxSplatCount = header.vertexElement.count;\n                            compressed = true;\n                        } else {\n                            throw new Error('PlyLoader.loadFromURL() -> Selected Ply format cannot be progressively loaded.');\n                        }\n                        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n\n                        const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\n                        const splatBufferSizeBytes = splatDataOffsetBytes + shDescriptor.BytesPerSplat * maxSplatCount;\n                        progressiveLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                        SplatBuffer.writeHeaderToBuffer({\n                            versionMajor: SplatBuffer.CurrentMajorVersion,\n                            versionMinor: SplatBuffer.CurrentMinorVersion,\n                            maxSectionCount: sectionCount,\n                            sectionCount: sectionCount,\n                            maxSplatCount: maxSplatCount,\n                            splatCount: splatCount,\n                            compressionLevel: 0,\n                            sceneCenter: new THREE.Vector3()\n                        }, progressiveLoadBufferOut);\n\n                        numBytesStreamed = header.headerSizeBytes;\n                        numBytesParsed = header.headerSizeBytes;\n                        headerLoaded = true;\n                    }\n                } else if (compressed && !readyToLoadSplatData) {\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\n                        PlayCanvasCompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer,\n                                                                      header.headerSizeBytes);\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\n                        readyToLoadSplatData = true;\n                    }\n                }\n\n                if (headerLoaded && readyToLoadSplatData) {\n\n                    if (chunks.length > 0) {\n\n                        progressiveLoadBufferIn = storeChunksInBuffer(chunks, progressiveLoadBufferIn);\n\n                        const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\n                        if (bytesLoadedSinceLastStreamedSection > progressiveLoadSectionSizeBytes || loadComplete) {\n                            const numBytesToProcess = numBytesDownloaded - numBytesParsed;\n                            const addedSplatCount = Math.floor(numBytesToProcess / header.bytesPerSplat);\n                            const numBytesToParse = addedSplatCount * header.bytesPerSplat;\n                            const numBytesLeftOver = numBytesToProcess - numBytesToParse;\n                            const newSplatCount = splatCount + addedSplatCount;\n                            const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\n                            const dataToParse = new DataView(progressiveLoadBufferIn, parsedDataViewOffset, numBytesToParse);\n\n                            const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\n                            const outOffset = splatCount * shDescriptor.BytesPerSplat + splatDataOffsetBytes;\n\n                            if (compressed) {\n                                PlayCanvasCompressedPlyParser.parseToUncompressedSplatBufferSection(header.chunkElement,\n                                                                                                    header.vertexElement, 0,\n                                                                                                    addedSplatCount - 1, splatCount,\n                                                                                                    dataToParse, 0,\n                                                                                                    progressiveLoadBufferOut, outOffset);\n                            } else {\n                                inriaV1PlyParser.parseToUncompressedSplatBufferSection(header, 0, addedSplatCount - 1, dataToParse,\n                                                                                       0, progressiveLoadBufferOut, outOffset,\n                                                                                       outSphericalHarmonicsDegree);\n                            }\n\n                            splatCount = newSplatCount;\n                            if (!progressiveLoadSplatBuffer) {\n                                SplatBuffer.writeSectionHeaderToBuffer({\n                                    maxSplatCount: maxSplatCount,\n                                    splatCount: splatCount,\n                                    bucketSize: 0,\n                                    bucketCount: 0,\n                                    bucketBlockSize: 0,\n                                    compressionScaleRange: 0,\n                                    storageSizeBytes: 0,\n                                    fullBucketCount: 0,\n                                    partiallyFilledBucketCount: 0,\n                                    sphericalHarmonicsDegree: outSphericalHarmonicsDegree\n                                }, 0, progressiveLoadBufferOut, SplatBuffer.HeaderSizeBytes);\n                                progressiveLoadSplatBuffer = new SplatBuffer(progressiveLoadBufferOut, false);\n                            }\n                            progressiveLoadSplatBuffer.updateLoadedCounts(1, splatCount);\n                            onStreamedSectionProgress(progressiveLoadSplatBuffer, loadComplete);\n                            numBytesStreamed += progressiveLoadSectionSizeBytes;\n                            numBytesParsed += numBytesToParse;\n\n                            if (numBytesLeftOver === 0) {\n                                chunks = [];\n                            } else {\n                                let keepChunks = [];\n                                let keepSize = 0;\n                                for (let i = chunks.length - 1; i >= 0; i--) {\n                                    const chunk = chunks[i];\n                                    keepSize += chunk.sizeBytes;\n                                    keepChunks.unshift(chunk);\n                                    if (keepSize >= numBytesLeftOver) break;\n                                }\n                                chunks = keepChunks;\n                            }\n                        }\n                    }\n\n                    if (loadComplete) {\n                        progressiveLoadPromise.resolve(progressiveLoadSplatBuffer);\n                    }\n                }\n\n            }\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !progressiveLoad).then((plyFileData) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = progressiveLoad ? progressiveLoadPromise.promise :\n                                PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel, outSphericalHarmonicsDegree,\n                                                           sectionSize, sceneCenter, blockSize, bucketSize);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, outSphericalHarmonicsDegree = 0,\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            return PlyParser.parseToUncompressedSplatArray(plyFileData, outSphericalHarmonicsDegree);\n        })\n        .then((splatArray) => {\n            const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel, sectionSize,\n                                                                                   sceneCenter, blockSize, bucketSize);\n            return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n        });\n    }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\n\nexport class SplatParser {\n\n    static RowSizeBytes = 32;\n    static CenterSizeBytes = 12;\n    static ScaleSizeBytes = 12;\n    static RotationSizeBytes = 4;\n    static ColorSizeBytes = 4;\n\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\n\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\n                                              SplatParser.RotationSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = inCenter[0];\n            outCenter[1] = inCenter[1];\n            outCenter[2] = inCenter[2];\n\n            outScale[0] = inScale[0];\n            outScale[1] = inScale[1];\n            outScale[2] = inScale[2];\n\n            outRotation[0] = quat.w;\n            outRotation[1] = quat.x;\n            outRotation[2] = quat.y;\n            outRotation[3] = quat.z;\n\n            outColor[0] = inColor[0];\n            outColor[1] = inColor[1];\n            outColor[2] = inColor[2];\n            outColor[3] = inColor[3];\n        }\n    }\n\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n        // Standard .splat row layout:\n        // XYZ - Position (Float32)\n        // XYZ - Scale (Float32)\n        // RGBA - colors (uint8)\n        // IJKL - quaternion/rot (uint8)\n\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\n\n        const splatArray = new UncompressedSplatArray();\n\n        for (let i = 0; i < splatCount; i++) {\n            const inBase = i * SplatParser.RowSizeBytes;\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n\n        return splatArray;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { SplatParser } from './SplatParser.js';\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nexport class SplatLoader {\n\n    static loadFromURL(fileName, onProgress, progressiveLoad, onStreamedSectionProgress, minimumAlpha, compressionLevel,\n                       optimizeSplatData, sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const progressiveLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\n        const sectionCount = 1;\n\n        let progressiveLoadBufferIn;\n        let progressiveLoadBufferOut;\n        let progressiveLoadSplatBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        const progressiveLoadPromise = nativePromiseWithExtractedComponents();\n\n        let numBytesStreamed = 0;\n        let numBytesLoaded = 0;\n        let chunks = [];\n\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\n            const loadComplete = percent >= 100;\n            if (!fileSize) progressiveLoad = false;\n            if (progressiveLoad) {\n                if (!progressiveLoadBufferIn) {\n                    maxSplatCount = fileSize / SplatParser.RowSizeBytes;\n                    progressiveLoadBufferIn = new ArrayBuffer(fileSize);\n                    const bytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n                    const splatBufferSizeBytes = splatDataOffsetBytes + bytesPerSplat * maxSplatCount;\n                    progressiveLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                    SplatBuffer.writeHeaderToBuffer({\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\n                        maxSectionCount: sectionCount,\n                        sectionCount: sectionCount,\n                        maxSplatCount: maxSplatCount,\n                        splatCount: splatCount,\n                        compressionLevel: 0,\n                        sceneCenter: new THREE.Vector3()\n                    }, progressiveLoadBufferOut);\n                }\n\n                if (chunk) {\n                    chunks.push(chunk);\n                    new Uint8Array(progressiveLoadBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                    numBytesLoaded += chunk.byteLength;\n\n                    const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n                    if (bytesLoadedSinceLastSection > progressiveLoadSectionSizeBytes || loadComplete) {\n                        const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : progressiveLoadSectionSizeBytes;\n                        const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\n                        const newSplatCount = splatCount + addedSplatCount;\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, progressiveLoadBufferIn, 0,\n                                                                          progressiveLoadBufferOut, splatDataOffsetBytes);\n                        splatCount = newSplatCount;\n                        if (!progressiveLoadSplatBuffer) {\n                            SplatBuffer.writeSectionHeaderToBuffer({\n                                maxSplatCount: maxSplatCount,\n                                splatCount: splatCount,\n                                bucketSize: 0,\n                                bucketCount: 0,\n                                bucketBlockSize: 0,\n                                compressionScaleRange: 0,\n                                storageSizeBytes: 0,\n                                fullBucketCount: 0,\n                                partiallyFilledBucketCount: 0\n                            }, 0, progressiveLoadBufferOut, SplatBuffer.HeaderSizeBytes);\n                            progressiveLoadSplatBuffer = new SplatBuffer(progressiveLoadBufferOut, false);\n                        }\n                        progressiveLoadSplatBuffer.updateLoadedCounts(1, splatCount);\n                        onStreamedSectionProgress(progressiveLoadSplatBuffer, loadComplete);\n                        numBytesStreamed += progressiveLoadSectionSizeBytes;\n                    }\n                }\n                if (loadComplete) {\n                    progressiveLoadPromise.resolve(progressiveLoadSplatBuffer);\n                }\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n            return progressiveLoad;\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, true).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = progressiveLoad ? progressiveLoadPromise.promise :\n                SplatLoader.loadFromFileData(fullBuffer, minimumAlpha, compressionLevel, optimizeSplatData,\n                                             sectionSize, sceneCenter, blockSize, bucketSize);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\n            if (optimizeSplatData) {\n                const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\n                                                                                       sectionSize, sceneCenter, blockSize,\n                                                                                       bucketSize);\n                return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n            } else {\n                return SplatBuffer.generateFromUncompressedSplatArrays([splatArray], minimumAlpha, 0, new THREE.Vector3());\n            }\n        });\n    }\n\n}\n","import { SplatBuffer } from '../SplatBuffer.js';\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nexport class KSplatLoader {\n\n   static checkVersion(buffer) {\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\n        const header = SplatBuffer.parseHeader(buffer);\n        if (header.versionMajor === minVersionMajor &&\n            header.versionMinor >= minVersionMinor ||\n            header.versionMajor > minVersionMajor) {\n           return true;\n        } else {\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\n        }\n    };\n\n    static loadFromURL(fileName, externalOnProgress, progressiveLoad, onSectionBuilt) {\n        let progressiveLoadBuffer;\n        let progressiveLoadSplatBuffer;\n\n        let headerBuffer;\n        let header;\n        let headerLoaded = false;\n        let headerLoading = false;\n\n        let sectionHeadersBuffer;\n        let sectionHeaders = [];\n        let sectionHeadersLoaded = false;\n        let sectionHeadersLoading = false;\n\n        let numBytesLoaded = 0;\n        let numBytesProgressivelyLoaded = 0;\n        let totalBytesToDownload = 0;\n\n        let downloadComplete = false;\n        let loadComplete = false;\n        let loadSectionQueued = false;\n\n        let chunks = [];\n\n        const progressiveLoadPromise = nativePromiseWithExtractedComponents();\n\n        const checkAndLoadHeader = () => {\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\n                headerLoading = true;\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\n                headerAssemblyPromise.then((bufferData) => {\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n                    KSplatLoader.checkVersion(headerBuffer);\n                    headerLoading = false;\n                    headerLoaded = true;\n                    header = SplatBuffer.parseHeader(headerBuffer);\n                    window.setTimeout(() => {\n                        checkAndLoadSectionHeaders();\n                    }, 1);\n                });\n            }\n        };\n\n        let queuedCheckAndLoadSectionsCount = 0;\n        const queueCheckAndLoadSections = () => {\n            if (queuedCheckAndLoadSectionsCount === 0) {\n                queuedCheckAndLoadSectionsCount++;\n                window.setTimeout(() => {\n                    queuedCheckAndLoadSectionsCount--;\n                    checkAndLoadSections();\n                }, 1);\n            }\n        };\n\n        const checkAndLoadSectionHeaders = () => {\n            const performLoad = () => {\n                sectionHeadersLoading = true;\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\n                sectionHeadersAssemblyPromise.then((bufferData) => {\n                    sectionHeadersLoading = false;\n                    sectionHeadersLoaded = true;\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\n                    let totalSectionStorageStorageByes = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\n                    }\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\n                    if (!progressiveLoadBuffer) {\n                        progressiveLoadBuffer = new ArrayBuffer(totalStorageSizeBytes);\n                        let offset = 0;\n                        for (let i = 0; i < chunks.length; i++) {\n                            const chunk = chunks[i];\n                            new Uint8Array(progressiveLoadBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\n                            offset += chunk.byteLength;\n                        }\n                    }\n\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\n                    }\n\n                    queueCheckAndLoadSections();\n                });\n            };\n\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\n                performLoad();\n            }\n        };\n\n        const checkAndLoadSections = () => {\n            if (loadSectionQueued) return;\n            loadSectionQueued = true;\n            const checkAndLoadFunc = () => {\n                loadSectionQueued = false;\n                if (sectionHeadersLoaded) {\n\n                    if (loadComplete) return;\n\n                    downloadComplete = numBytesLoaded >= totalBytesToDownload;\n\n                    let bytesLoadedSinceLastSection = numBytesLoaded - numBytesProgressivelyLoaded;\n                    if (bytesLoadedSinceLastSection > Constants.ProgressiveLoadSectionSize || downloadComplete) {\n\n                        numBytesProgressivelyLoaded += Constants.ProgressiveLoadSectionSize;\n                        loadComplete = numBytesProgressivelyLoaded >= totalBytesToDownload;\n\n                        if (!progressiveLoadSplatBuffer) progressiveLoadSplatBuffer = new SplatBuffer(progressiveLoadBuffer, false);\n\n                        const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                        let sectionBase = 0;\n                        let reachedSections = 0;\n                        let loadedSplatCount = 0;\n                        for (let i = 0; i < header.maxSectionCount; i++) {\n                            const sectionHeader = sectionHeaders[i];\n                            const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\n                                                    sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\n                            const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\n                            if (numBytesProgressivelyLoaded >= bytesRequiredToReachSectionSplatData) {\n                                reachedSections++;\n                                const bytesPastSSectionSplatDataStart = numBytesProgressivelyLoaded - bytesRequiredToReachSectionSplatData;\n                                const baseDescriptor = SplatBuffer.CompressionLevels[header.compressionLevel];\n                                const shDesc = baseDescriptor.SphericalHarmonicsDegrees[sectionHeader.sphericalHarmonicsDegree];\n                                const bytesPerSplat = shDesc.BytesPerSplat;\n                                let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\n                                loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\n                                loadedSplatCount += loadedSplatsForSection;\n                                progressiveLoadSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\n                                progressiveLoadSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\n                            } else {\n                                break;\n                            }\n                            sectionBase += sectionHeader.storageSizeBytes;\n                        }\n\n                        onSectionBuilt(progressiveLoadSplatBuffer, loadComplete);\n\n                        const percentComplete = numBytesProgressivelyLoaded / totalBytesToDownload * 100;\n                        const percentLabel = (percentComplete).toFixed(2) + '%';\n\n                        if (externalOnProgress) externalOnProgress(percentComplete, percentLabel, LoaderStatus.Downloading);\n\n                        if (loadComplete) {\n                            progressiveLoadPromise.resolve(progressiveLoadSplatBuffer);\n                        } else {\n                            checkAndLoadSections();\n                        }\n                    }\n                }\n            };\n            window.setTimeout(checkAndLoadFunc, Constants.ProgressiveLoadSectionDelayDuration);\n        };\n\n        const localOnProgress = (percent, percentStr, chunk) => {\n            if (chunk) {\n                chunks.push(chunk);\n                if (progressiveLoadBuffer) {\n                    new Uint8Array(progressiveLoadBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                }\n                numBytesLoaded += chunk.byteLength;\n            }\n            if (progressiveLoad) {\n                checkAndLoadHeader();\n                checkAndLoadSectionHeaders();\n                checkAndLoadSections();\n            } else {\n                if (externalOnProgress) externalOnProgress(percent, percentStr, LoaderStatus.Downloading);\n            }\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !progressiveLoad).then((fullBuffer) => {\n            if (externalOnProgress) externalOnProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = progressiveLoad ? progressiveLoadPromise.promise : KSplatLoader.loadFromFileData(fullBuffer);\n            return loadPromise.then((splatBuffer) => {\n                if (externalOnProgress) externalOnProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(fileData) {\n        return delayedExecute(() => {\n            KSplatLoader.checkVersion(fileData);\n            return new SplatBuffer(fileData);\n        });\n    }\n\n    static downloadFile = function() {\n\n        let downLoadLink;\n\n        return function(splatBuffer, fileName) {\n            const blob = new Blob([splatBuffer.bufferData], {\n                type: 'application/octet-stream',\n            });\n\n            if (!downLoadLink) {\n                downLoadLink = document.createElement('a');\n                document.body.appendChild(downLoadLink);\n            }\n            downLoadLink.download = fileName;\n            downLoadLink.href = URL.createObjectURL(blob);\n            downLoadLink.click();\n        };\n\n    }();\n\n}\n","export const SceneFormat = {\n    'Splat': 0,\n    'KSplat': 1,\n    'Ply': 2\n};\n","import { SceneFormat } from './SceneFormat.js';\n\nexport const sceneFormatFromPath = (path) => {\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\n    return null;\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nimport {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n            this.clearDampedRotation();\n            this.clearDampedPan();\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        this.clearDampedRotation = function() {\n            sphericalDelta.theta = 0.0;\n            sphericalDelta.phi = 0.0;\n        };\n\n        this.clearDampedPan = function() {\n            panOffset.set(0, 0, 0);\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","import { fadeElement } from './Util.js';\n\nconst STANDARD_FADE_DURATION = 500;\n\nexport class LoadingSpinner {\n\n    static elementIDGen = 0;\n\n    constructor(message, container) {\n\n        this.taskIDGen = 0;\n        this.elementID = LoadingSpinner.elementIDGen++;\n\n        this.tasks = [];\n\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerContainerOuter = document.createElement('div');\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\n        this.spinnerContainerOuter.style.display = 'none';\n\n        this.spinnerContainerPrimary = document.createElement('div');\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\n        this.spinnerPrimary = document.createElement('div');\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\n        this.messageContainerPrimary = document.createElement('div');\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\n        this.messageContainerPrimary.innerHTML = this.message;\n\n        this.spinnerContainerMin = document.createElement('div');\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\n        this.spinnerMin = document.createElement('div');\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\n        this.messageContainerMin = document.createElement('div');\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\n        this.messageContainerMin.innerHTML = this.message;\n\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\n\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerContainerOuter.appendChild(style);\n        this.container.appendChild(this.spinnerContainerOuter);\n\n        this.setMinimized(false, true);\n\n        this.fadeTransitions = [];\n    }\n\n    addTask(message) {\n        const newTask = {\n            'message': message,\n            'id': this.taskIDGen++\n        };\n        this.tasks.push(newTask);\n        this.update();\n        return newTask.id;\n    }\n\n    removeTask(id) {\n        let index = 0;\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                this.tasks.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n        this.update();\n    }\n\n    removeAllTasks() {\n        this.tasks = [];\n        this.update();\n    }\n\n    setMessageForTask(id, message) {\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                task.message = message;\n                break;\n            }\n        }\n        this.update();\n    }\n\n    update() {\n        if (this.tasks.length > 0) {\n            this.show();\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\n        } else {\n            this.hide();\n        }\n    }\n\n    show() {\n        this.spinnerContainerOuter.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.spinnerContainerOuter.style.display = 'none';\n        this.visible = false;\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.spinnerContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.spinnerContainerOuter);\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    setMinimized(minimized, instant) {\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\n            if (instant) {\n                element.style.display = show ? displayStyle : 'none';\n            } else {\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\n                });\n            }\n        };\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\n        this.minimized = minimized;\n    }\n\n    setMessage(msg) {\n        this.messageContainerPrimary.innerHTML = msg;\n        this.messageContainerMin.innerHTML = msg;\n    }\n}\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\n    const startTime = performance.now();\n\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\n    if (isNaN(startOpacity)) startOpacity = 1;\n\n    const interval = window.setInterval(() => {\n        const currentTime = performance.now();\n        const elapsed = currentTime - startTime;\n\n        let t = Math.min(elapsed / duration, 1.0);\n        if (t > 0.999) t = 1;\n\n        let opacity;\n        if (out) {\n            opacity = (1.0 - t) * startOpacity;\n            if (opacity < 0.0001) opacity = 0;\n        } else {\n            opacity = (1.0 - startOpacity) * t + startOpacity;\n        }\n\n        if (opacity > 0) {\n            element.style.display = displayStyle;\n            element.style.opacity = opacity;\n        } else {\n            element.style.display = 'none';\n        }\n\n        if (t >= 1) {\n            if (onComplete) onComplete();\n            window.clearInterval(interval);\n        }\n    }, 16);\n    return interval;\n};\n\nexport const cancelFade = (interval) => {\n    window.clearInterval(interval);\n};\n","export class LoadingProgressBar {\n\n    constructor(container) {\n\n        this.idGen = 0;\n\n        this.tasks = [];\n\n        this.container = container || document.body;\n\n        this.progressBarContainerOuter = document.createElement('div');\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\n        this.progressBarContainerOuter.style.display = 'none';\n\n        this.progressBarBox = document.createElement('div');\n        this.progressBarBox.className = 'progressBarBox';\n\n        this.progressBarBackground = document.createElement('div');\n        this.progressBarBackground.className = 'progressBarBackground';\n\n        this.progressBar = document.createElement('div');\n        this.progressBar.className = 'progressBar';\n\n        this.progressBarBackground.appendChild(this.progressBar);\n        this.progressBarBox.appendChild(this.progressBarBackground);\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        `;\n        this.progressBarContainerOuter.appendChild(style);\n        this.container.appendChild(this.progressBarContainerOuter);\n    }\n\n    show() {\n        this.progressBarContainerOuter.style.display = 'block';\n    }\n\n    hide() {\n        this.progressBarContainerOuter.style.display = 'none';\n    }\n\n    setProgress(progress) {\n        this.progressBar.style.width = progress + '%';\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.progressBarContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.progressBarContainerOuter);\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n}\n","export class InfoPanel {\n\n    constructor(container) {\n\n        this.container = container || document.body;\n\n        this.infoCells = {};\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Camera mode', 'orthographicCamera'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime'],\n            ['Render window', 'renderWindow'],\n            ['Focal adjustment', 'focalAdjustment'],\n            ['Splat scale', 'splatScale'],\n            ['Point cloud mode', 'pointCloudMode']\n        ];\n\n        this.infoPanelContainer = document.createElement('div');\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        `;\n        this.infoPanelContainer.append(style);\n\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.className = 'infoPanel';\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n            row.className = 'info-panel-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n            labelCell.classList.add('info-panel-cell', 'label-cell');\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n            spacerCell.className = 'info-panel-cell';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n            infoCell.className = 'info-panel-cell';\n\n            this.infoCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanelContainer.append(this.infoPanel);\n        this.infoPanelContainer.style.display = 'none';\n        this.container.appendChild(this.infoPanelContainer);\n\n        this.visible = false;\n    }\n\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp, orthographicCamera,\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount,\n                      splatRenderCountPct, lastSortTime, focalAdjustment, splatScale, pointCloudMode) {\n\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\n        }\n\n        if (cameraLookAtPosition) {\n            const cla = cameraLookAtPosition;\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\n            }\n        }\n\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\n        }\n\n        this.infoCells.orthographicCamera.innerHTML = orthographicCamera ? 'Orthographic' : 'Perspective';\n\n        if (meshCursorPosition) {\n            const cursPos = meshCursorPosition;\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\n        } else {\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\n        }\n\n        this.infoCells.fps.innerHTML = currentFPS;\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n        this.infoCells.renderSplatCount.innerHTML =\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\n\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\n        this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\n        this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\n    };\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.infoPanelContainer);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.infoPanelContainer);\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    show() {\n        this.infoPanelContainer.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.infoPanelContainer.style.display = 'none';\n        this.visible = false;\n    }\n\n}\n","import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n\n    constructor(threeScene) {\n        this.threeScene = threeScene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.destroySplatRendertarget();\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    destroySplatRendertarget() {\n        if (this.splatRenderTarget) {\n            this.splatRenderTarget = null;\n        }\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    destroyRenderTargetCopyObjects() {\n        if (this.renderTargetCopyQuad) {\n            disposeAllMeshes(this.renderTargetCopyQuad);\n            this.renderTargetCopyQuad = null;\n        }\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.threeScene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            disposeAllMeshes(this.meshCursor);\n            this.threeScene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    getMeschCursorVisibility() {\n        return this.meshCursor.visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n        }\n    }\n\n    destroyFocusMarker() {\n        if (this.focusMarker) {\n            disposeAllMeshes(this.focusMarker);\n            this.focusMarker = null;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n        const toCamera = new THREE.Vector3();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            toCamera.copy(camera.position).sub(position);\n            const toCameraDistance = toCamera.length();\n            this.focusMarker.position.copy(position);\n            this.focusMarker.scale.set(toCameraDistance, toCameraDistance, toCameraDistance);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        if (!this.controlPlane) {\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\n            planeGeometry.rotateX(-Math.PI / 2);\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n            planeMaterial.transparent = true;\n            planeMaterial.opacity = 0.6;\n            planeMaterial.depthTest = false;\n            planeMaterial.depthWrite = false;\n            planeMaterial.side = THREE.DoubleSide;\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n            const arrowDir = new THREE.Vector3(0, 1, 0);\n            arrowDir.normalize();\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\n            const arrowLength = 0.5;\n            const arrowRadius = 0.01;\n            const arrowColor = 0x00dd00;\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n            this.controlPlane = new THREE.Object3D();\n            this.controlPlane.add(planeMesh);\n            this.controlPlane.add(arrowHelper);\n        }\n    }\n\n    destroyControlPlane() {\n        if (this.controlPlane) {\n            disposeAllMeshes(this.controlPlane);\n            this.controlPlane = null;\n        }\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.threeScene.add(this.debugRoot);\n        this.threeScene.add(this.secondaryDebugRoot);\n    }\n\n    destroyDebugMeshes() {\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n            if (debugRoot) {\n                disposeAllMeshes(debugRoot);\n                this.threeScene.remove(debugRoot);\n            }\n        }\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n\n    dispose() {\n        this.destroyMeshCursor();\n        this.destroyFocusMarker();\n        this.destroyDebugMeshes();\n        this.destroyControlPlane();\n        this.destroyRenderTargetCopyObjects();\n        this.destroySplatRendertarget();\n    }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n        this.splatIndex = 0;\n    }\n\n    set(origin, normal, distance, splatIndex) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n        this.splatIndex = splatIndex;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        hitClone.splatIndex = this.splatIndex;\n        return hitClone;\n    }\n\n}\n","export const SplatRenderMode = {\n    ThreeD: 0,\n    TwoD: 1\n};\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\nimport { SplatRenderMode } from '../SplatRenderMode.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n        this.ray = new Ray(origin, direction);\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(ndcCoords.x, ndcCoords.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const localRay = new Ray();\n        const tempPoint = new THREE.Vector3();\n\n        return function(splatMesh, outHits = []) {\n            const splatTree = splatMesh.getSplatTree();\n\n            if (!splatTree) return;\n\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\n                const subTree = splatTree.subTrees[s];\n\n                fromLocal.copy(splatMesh.matrixWorld);\n                if (splatMesh.dynamicMode) {\n                    splatMesh.getSceneTransform(s, sceneTransform);\n                    fromLocal.multiply(sceneTransform);\n                }\n                toLocal.copy(fromLocal).invert();\n\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\n\n                const outHitsForSubTree = [];\n                if (subTree.rootNode) {\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\n                }\n\n                outHitsForSubTree.forEach((hit) => {\n                    hit.origin.applyMatrix4(fromLocal);\n                    hit.normal.applyMatrix4(fromLocal).normalize();\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\n                });\n\n                outHits.push(...outHitsForSubTree);\n            }\n\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempColor = new THREE.Vector4();\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        const origin = new THREE.Vector3(0, 0, 0);\n        const uniformScaleMatrix = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n\n                    const splatGlobalIndex = node.data.indexes[i];\n                    const splatSceneIndex = splatTree.splatMesh.getSceneIndexForSplat(splatGlobalIndex);\n                    const splatScene = splatTree.splatMesh.getScene(splatSceneIndex);\n                    if (!splatScene.visible) continue;\n\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon ||\n                        splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD && tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\n                        let radius = (tempScale.x + tempScale.y);\n                        let componentCount = 2;\n                        if (splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD) {\n                            radius += tempScale.z;\n                            componentCount = 3;\n                        }\n                        radius = radius / componentCount;\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            outHits.push(hitClone);\n                        }\n                    } else {\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\n                        toSphereSpace.copy(fromSphereSpace).invert();\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                            outHits.push(hitClone);\n                        }\n                    }\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\nimport { Constants } from '../Constants.js';\n\nexport class SplatMaterial {\n\n    static buildVertexShaderBase(dynamicMode = false, enableOptionalEffects = false, maxSphericalHarmonicsDegree = 0, customVars = '') {\n        let vertexShaderSource = `\n        precision highp float;\n        #include <common>\n\n        attribute uint splatIndex;\n        uniform highp usampler2D centersColorsTexture;\n        uniform highp sampler2D sphericalHarmonicsTexture;\n        uniform highp sampler2D sphericalHarmonicsTextureR;\n        uniform highp sampler2D sphericalHarmonicsTextureG;\n        uniform highp sampler2D sphericalHarmonicsTextureB;\n    `;\n\n    if (enableOptionalEffects || dynamicMode) {\n        vertexShaderSource += `\n            uniform highp usampler2D sceneIndexesTexture;\n            uniform vec2 sceneIndexesTextureSize;\n        `;\n    }\n\n    if (enableOptionalEffects) {\n        vertexShaderSource += `\n            uniform float sceneOpacity[${Constants.MaxScenes}];\n            uniform int sceneVisibility[${Constants.MaxScenes}];\n        `;\n    }\n\n    if (dynamicMode) {\n        vertexShaderSource += `\n            uniform highp mat4 transforms[${Constants.MaxScenes}];\n        `;\n    }\n\n    vertexShaderSource += `\n        ${customVars}\n        uniform vec2 focal;\n        uniform float orthoZoom;\n        uniform int orthographicMode;\n        uniform int pointCloudModeEnabled;\n        uniform float inverseFocalAdjustment;\n        uniform vec2 viewport;\n        uniform vec2 basisViewport;\n        uniform vec2 centersColorsTextureSize;\n        uniform int sphericalHarmonicsDegree;\n        uniform vec2 sphericalHarmonicsTextureSize;\n        uniform int sphericalHarmonics8BitMode;\n        uniform int sphericalHarmonicsMultiTextureMode;\n        uniform float visibleRegionRadius;\n        uniform float visibleRegionFadeStartRadius;\n        uniform float firstRenderTime;\n        uniform float currentTime;\n        uniform int fadeInComplete;\n        uniform vec3 sceneCenter;\n        uniform float splatScale;\n\n        varying vec4 vColor;\n        varying vec2 vUv;\n        varying vec2 vPosition;\n\n        mat3 quaternionToRotationMatrix(float x, float y, float z, float w) {\n            float s = 1.0 / sqrt(w * w + x * x + y * y + z * z);\n        \n            return mat3(\n                1. - 2. * (y * y + z * z),\n                2. * (x * y + w * z),\n                2. * (x * z - w * y),\n                2. * (x * y - w * z),\n                1. - 2. * (x * x + z * z),\n                2. * (y * z + w * x),\n                2. * (x * z + w * y),\n                2. * (y * z - w * x),\n                1. - 2. * (x * x + y * y)\n            );\n        }\n\n        const float sqrt8 = sqrt(8.0);\n        const float minAlpha = 1.0 / 255.0;\n\n        const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n        const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n        const uvec4 shift4 = uvec4(0, 8, 16, 24);\n        vec4 uintToRGBAVec (uint u) {\n           uvec4 urgba = mask4 & u;\n           urgba = urgba >> shift4;\n           vec4 rgba = vec4(urgba) * encodeNorm4;\n           return rgba;\n        }\n\n        vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        const float SH_C1 = 0.4886025119029199f;\n        const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n\n        const float SphericalHarmonics8BitCompressionRange = ${Constants.SphericalHarmonics8BitCompressionRange.toFixed(1)};\n        const float SphericalHarmonics8BitCompressionHalfRange = SphericalHarmonics8BitCompressionRange / 2.0;\n        const vec3 vec8BitSHShift = vec3(SphericalHarmonics8BitCompressionHalfRange);\n\n        void main () {\n\n            uint oddOffset = splatIndex & uint(0x00000001);\n            uint doubleOddOffset = oddOffset * uint(2);\n            bool isEven = oddOffset == uint(0);\n            uint nearestEvenIndex = splatIndex - oddOffset;\n            float fOddOffset = float(oddOffset);\n\n            uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n            vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\n\n        if (dynamicMode || enableOptionalEffects) {\n            vertexShaderSource += `\n                uint sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\n            `;\n        }\n\n        if (enableOptionalEffects) {\n            vertexShaderSource += `\n                float splatOpacityFromScene = sceneOpacity[sceneIndex];\n                int sceneVisible = sceneVisibility[sceneIndex];\n                if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n            `;\n        }\n\n        if (dynamicMode) {\n            vertexShaderSource += `\n                mat4 transform = transforms[sceneIndex];\n                mat4 transformModelViewMatrix = modelViewMatrix * transform;\n            `;\n        } else {\n            vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n        }\n\n        vertexShaderSource += `\n            vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n            vec4 clipCenter = projectionMatrix * viewCenter;\n\n            float clip = 1.2 * clipCenter.w;\n            if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                return;\n            }\n\n            vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n            vPosition = position.xy;\n            vColor = uintToRGBAVec(sampledCenterColor.r);\n        `;\n\n        if (maxSphericalHarmonicsDegree >= 1) {\n\n            vertexShaderSource += `   \n            if (sphericalHarmonicsDegree >= 1) {\n            `;\n\n            if (dynamicMode) {\n                vertexShaderSource += `\n                    mat4 mTransform = modelMatrix * transform;\n                    vec3 worldViewDir = normalize(splatCenter - vec3(inverse(mTransform) * vec4(cameraPosition, 1.0)));\n                `;\n            } else {\n                vertexShaderSource += `\n                    vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                `;\n            }\n\n            vertexShaderSource += `\n                vec3 sh1;\n                vec3 sh2;\n                vec3 sh3;\n            `;\n\n            if (maxSphericalHarmonicsDegree >= 2) {\n                vertexShaderSource += `\n                    vec4 sampledSH0123;\n                    vec4 sampledSH4567;\n                    vec4 sampledSH891011;\n\n                    vec4 sampledSH0123R;\n                    vec4 sampledSH0123G;\n                    vec4 sampledSH0123B;\n                    \n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\n                        sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\n                        sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\n                        sh1 = sampledSH0123.rgb;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\n                    } else {\n                        sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sh1 = vec3(sampledSH0123R.rgb);\n                        sh2 = vec3(sampledSH0123G.rgb);\n                        sh3 = vec3(sampledSH0123B.rgb);\n                    }\n                `;\n            } else {\n                vertexShaderSource += `\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\n                        sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\n                    } else {\n                        vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);\n                        sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);\n                        sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);\n                    }\n                `;\n            }\n\n            vertexShaderSource += `\n                    if (sphericalHarmonics8BitMode == 1) {\n                        sh1 = sh1 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                        sh2 = sh2 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                        sh3 = sh3 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                    }\n                    float x = worldViewDir.x;\n                    float y = worldViewDir.y;\n                    float z = worldViewDir.z;\n                    vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n            `;\n\n            if (maxSphericalHarmonicsDegree >= 2) {\n\n                vertexShaderSource += `\n                    if (sphericalHarmonicsDegree >= 2) {\n                        float xx = x * x;\n                        float yy = y * y;\n                        float zz = z * z;\n                        float xy = x * y;\n                        float yz = y * z;\n                        float xz = x * z;\n\n                        vec3 sh4;\n                        vec3 sh5;\n                        vec3 sh6;\n                        vec3 sh7;\n                        vec3 sh8;\n\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\n                            sh4 = sampledSH891011.gba;\n                            sh5 = sampledSH12131415.rgb;\n                            sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\n                            sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\n                            sh8 = sampledSH20212223.gba;\n                        } else {\n                            vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);\n                            sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);\n                            sh6 = vec3(sampledSH4567G.rgb);\n                            sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);\n                            sh8 = vec3(sampledSH4567B.gba);\n                        }\n\n                        if (sphericalHarmonics8BitMode == 1) {\n                            sh4 = sh4 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh5 = sh5 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh6 = sh6 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh7 = sh7 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh8 = sh8 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                        }\n\n                        vColor.rgb +=\n                            (SH_C2[0] * xy) * sh4 +\n                            (SH_C2[1] * yz) * sh5 +\n                            (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                            (SH_C2[3] * xz) * sh7 +\n                            (SH_C2[4] * (xx - yy)) * sh8;\n                    }\n                `;\n            }\n\n            vertexShaderSource += `\n           \n                vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\n\n            }\n\n            `;\n        }\n\n        return vertexShaderSource;\n    }\n\n    static getVertexShaderFadeIn() {\n        return `\n            if (fadeInComplete == 0) {\n                float opacityAdjust = 1.0;\n                float centerDist = length(splatCenter - sceneCenter);\n                float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                float fadeDistance = 0.75;\n                float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                        (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                        distanceLoadFadeInFactor;\n                opacityAdjust *= distanceLoadFadeInFactor;\n                vColor.a *= opacityAdjust;\n            }\n        `;\n    }\n\n    static getUniforms(dynamicMode = false, enableOptionalEffects = false, maxSphericalHarmonicsDegree = 0,\n                       splatScale = 1.0, pointCloudModeEnabled = false) {\n\n        const uniforms = {\n            'sceneCenter': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'fadeInComplete': {\n                'type': 'i',\n                'value': 0\n            },\n            'orthographicMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'visibleRegionFadeStartRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'visibleRegionRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'currentTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'firstRenderTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonicsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonicsTextureR': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonicsTextureG': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonicsTextureB': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'orthoZoom': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'inverseFocalAdjustment': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'sphericalHarmonicsDegree': {\n                'type': 'i',\n                'value': maxSphericalHarmonicsDegree\n            },\n            'sphericalHarmonicsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'sphericalHarmonics8BitMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'sphericalHarmonicsMultiTextureMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'splatScale': {\n                'type': 'f',\n                'value': splatScale\n            },\n            'pointCloudModeEnabled': {\n                'type': 'i',\n                'value': pointCloudModeEnabled ? 1 : 0\n            }\n        };\n\n        if (dynamicMode || enableOptionalEffects) {\n            uniforms['sceneIndexesTexture'] = {\n                'type': 't',\n                'value': null\n            };\n            uniforms['sceneIndexesTextureSize'] = {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            };\n        }\n\n        if (enableOptionalEffects) {\n            const sceneOpacity = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                sceneOpacity.push(1.0);\n            }\n            uniforms['sceneOpacity'] ={\n                'type': 'f',\n                'value': sceneOpacity\n            };\n\n            const sceneVisibility = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                sceneVisibility.push(1);\n            }\n            uniforms['sceneVisibility'] ={\n                'type': 'i',\n                'value': sceneVisibility\n            };\n        }\n\n        if (dynamicMode) {\n            const transformMatrices = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                transformMatrices.push(new THREE.Matrix4());\n            }\n            uniforms['transforms'] = {\n                'type': 'mat4',\n                'value': transformMatrices\n            };\n        }\n\n        return uniforms;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatMaterial } from './SplatMaterial.js';\n\nexport class SplatMaterial3D {\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n     *                             that the splat count might change\n     * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\n     *                                        such as opacity adjustment. Default is false for performance reasons.\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\n     *                              different resolution than that of their training\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n     * @return {THREE.ShaderMaterial}\n     */\n    static build(dynamicMode = false, enableOptionalEffects = false, antialiased = false,\n                 maxScreenSpaceSplatSize = 2048, splatScale = 1.0, pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0) {\n\n        const customVertexVars = `\n            uniform vec2 covariancesTextureSize;\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D covariancesTextureHalfFloat;\n            uniform int covariancesAreHalfFloat;\n\n            void fromCovarianceHalfFloatV4(uvec4 val, out vec4 first, out vec4 second) {\n                vec2 r = unpackHalf2x16(val.r);\n                vec2 g = unpackHalf2x16(val.g);\n                vec2 b = unpackHalf2x16(val.b);\n\n                first = vec4(r.x, r.y, g.x, g.y);\n                second = vec4(b.x, b.y, 0.0, 0.0);\n            }\n        `;\n\n        let vertexShaderSource = SplatMaterial.buildVertexShaderBase(dynamicMode, enableOptionalEffects,\n                                                                     maxSphericalHarmonicsDegree, customVertexVars);\n        vertexShaderSource += SplatMaterial3D.buildVertexShaderProjection(antialiased, enableOptionalEffects, maxScreenSpaceSplatSize);\n        const fragmentShaderSource = SplatMaterial3D.buildFragmentShader();\n\n        const uniforms = SplatMaterial.getUniforms(dynamicMode, enableOptionalEffects,\n                                                   maxSphericalHarmonicsDegree, splatScale, pointCloudModeEnabled);\n\n        uniforms['covariancesTextureSize'] = {\n            'type': 'v2',\n            'value': new THREE.Vector2(1024, 1024)\n        };\n        uniforms['covariancesTexture'] = {\n            'type': 't',\n            'value': null\n        };\n        uniforms['covariancesTextureHalfFloat'] = {\n            'type': 't',\n            'value': null\n        };\n        uniforms['covariancesAreHalfFloat'] = {\n            'type': 'i',\n            'value': 0\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    static buildVertexShaderProjection(antialiased, enableOptionalEffects, maxScreenSpaceSplatSize) {\n        let vertexShaderSource = `\n\n            vec4 sampledCovarianceA;\n            vec4 sampledCovarianceB;\n            vec3 cov3D_M11_M12_M13;\n            vec3 cov3D_M22_M23_M33;\n            if (covariancesAreHalfFloat == 0) {\n                sampledCovarianceA = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset,\n                                                                            covariancesTextureSize));\n                sampledCovarianceB = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1),\n                                                                            covariancesTextureSize));\n\n                cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceB.gba) * fOddOffset;\n            } else {\n                uvec4 sampledCovarianceU = texture(covariancesTextureHalfFloat, getDataUV(1, 0, covariancesTextureSize));\n                fromCovarianceHalfFloatV4(sampledCovarianceU, sampledCovarianceA, sampledCovarianceB);\n                cov3D_M11_M12_M13 = sampledCovarianceA.rgb;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg);\n            }\n        \n            // Construct the 3D covariance matrix\n            mat3 Vrk = mat3(\n                cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n            );\n\n            mat3 J;\n            if (orthographicMode == 1) {\n                // Since the projection is linear, we don't need an approximation\n                J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                0.0, orthoZoom, 0.0,\n                                0.0, 0.0, 0.0));\n            } else {\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n            }\n\n            // Concatenate the projection approximation with the model-view transformation\n            mat3 W = transpose(mat3(transformModelViewMatrix));\n            mat3 T = W * J;\n\n            // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n            mat3 cov2Dm = transpose(T) * Vrk * T;\n            `;\n\n        if (antialiased) {\n            vertexShaderSource += `\n                float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n                float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\n                if (vColor.a < minAlpha) return;\n            `;\n        } else {\n            vertexShaderSource += `\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n            `;\n        }\n\n        vertexShaderSource += `\n\n            // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n            // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n            // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n            // need cov2Dm[1][0] because it is a symetric matrix.\n            vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n            // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n            // so that we can determine the 2D basis for the splat. This is done using the method described\n            // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n            // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n            // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\n            // equal to scaling them by sqrt(8) standard deviations.\n            //\n            // This is a different approach than in the original work at INRIA. In that work they compute the\n            // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n            // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n            // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\n            // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\n            // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n            float a = cov2Dv.x;\n            float d = cov2Dv.z;\n            float b = cov2Dv.y;\n            float D = a * d - b * b;\n            float trace = a + d;\n            float traceOver2 = 0.5 * trace;\n            float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n            float eigenValue1 = traceOver2 + term2;\n            float eigenValue2 = traceOver2 - term2;\n\n            if (pointCloudModeEnabled == 1) {\n                eigenValue1 = eigenValue2 = 0.2;\n            }\n\n            if (eigenValue2 <= 0.0) return;\n\n            vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n            // since the eigen vectors are orthogonal, we derive the second one from the first\n            vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n            // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n            vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\n            vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\n            `;\n\n        if (enableOptionalEffects) {\n            vertexShaderSource += `\n                vColor.a *= splatOpacityFromScene;\n            `;\n        }\n\n        vertexShaderSource += `\n            vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                            basisViewport * 2.0 * inverseFocalAdjustment;\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            // Scale the position data we send to the fragment shader\n            vPosition *= sqrt8;\n        `;\n\n        vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\n        vertexShaderSource += `}`;\n\n        return vertexShaderSource;\n    }\n\n    static buildFragmentShader() {\n        let fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n        `;\n\n        fragmentShaderSource += `\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }\n        `;\n\n        return fragmentShaderSource;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatMaterial } from './SplatMaterial.js';\n\nexport class SplatMaterial2D {\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n     *                             that the splat count might change\n     * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\n     *                                        such as opacity adjustment. Default is false for performance reasons.\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n     * @return {THREE.ShaderMaterial}\n     */\n    static build(dynamicMode = false, enableOptionalEffects = false, splatScale = 1.0,\n                 pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0) {\n\n        const customVertexVars = `\n            uniform vec2 scaleRotationsTextureSize;\n            uniform highp sampler2D scaleRotationsTexture;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n        `;\n\n        let vertexShaderSource = SplatMaterial.buildVertexShaderBase(dynamicMode, enableOptionalEffects,\n                                                                     maxSphericalHarmonicsDegree, customVertexVars);\n        vertexShaderSource += SplatMaterial2D.buildVertexShaderProjection();\n        const fragmentShaderSource = SplatMaterial2D.buildFragmentShader();\n\n        const uniforms = SplatMaterial.getUniforms(dynamicMode, enableOptionalEffects,\n                                                   maxSphericalHarmonicsDegree, splatScale, pointCloudModeEnabled);\n\n        uniforms['scaleRotationsTexture'] = {\n            'type': 't',\n            'value': null\n        };\n        uniforms['scaleRotationsTextureSize'] = {\n            'type': 'v2',\n            'value': new THREE.Vector2(1024, 1024)\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    static buildVertexShaderProjection() {\n        /*\n            glm::mat3 R = quat_to_rotmat(rot);\n            glm::mat3 S = scale_to_mat(scale, mod);\n            glm::mat3 L = R * S;\n\n            // center of Gaussians in the camera coordinate\n            glm::mat3x4 splat2world = glm::mat3x4(\n                glm::vec4(L[0], 0.0),\n                glm::vec4(L[1], 0.0),\n                glm::vec4(p_orig.x, p_orig.y, p_orig.z, 1)\n            );\n\n            glm::mat4 world2ndc = glm::mat4(\n                projmatrix[0], projmatrix[4], projmatrix[8], projmatrix[12],\n                projmatrix[1], projmatrix[5], projmatrix[9], projmatrix[13],\n                projmatrix[2], projmatrix[6], projmatrix[10], projmatrix[14],\n                projmatrix[3], projmatrix[7], projmatrix[11], projmatrix[15]\n            );\n\n            glm::mat3x4 ndc2pix = glm::mat3x4(\n                glm::vec4(float(W) / 2.0, 0.0, 0.0, float(W-1) / 2.0),\n                glm::vec4(0.0, float(H) / 2.0, 0.0, float(H-1) / 2.0),\n                glm::vec4(0.0, 0.0, 0.0, 1.0)\n            );\n\n            T = glm::transpose(splat2world) * world2ndc * ndc2pix;\n            normal = transformVec4x3({L[2].x, L[2].y, L[2].z}, viewmatrix);\n\n        */\n\n        // Compute a 2D-to-2D mapping matrix from a tangent plane into a image plane\n        // given a 2D gaussian parameters. T = WH (from the paper: https://arxiv.org/pdf/2403.17888)\n        let vertexShaderSource = `\n\n            vec4 scaleRotationA = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset, scaleRotationsTextureSize));\n            vec4 scaleRotationB = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset + uint(1), scaleRotationsTextureSize));\n\n            vec3 scaleRotation123 = vec3(scaleRotationA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationA.ba, scaleRotationB.r) * fOddOffset;\n            vec3 scaleRotation456 = vec3(scaleRotationA.a, scaleRotationB.rg) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationB.gba) * fOddOffset;\n\n            float missingW = sqrt(1.0 - scaleRotation456.x * scaleRotation456.x - scaleRotation456.y *\n                                    scaleRotation456.y - scaleRotation456.z * scaleRotation456.z);\n            mat3 R = quaternionToRotationMatrix(scaleRotation456.r, scaleRotation456.g, scaleRotation456.b, missingW);\n            mat3 S = mat3(scaleRotation123.r, 0.0, 0.0,\n                            0.0, scaleRotation123.g, 0.0,\n                            0.0, 0.0, scaleRotation123.b);\n            \n            mat3 L = R * S;\n\n            mat3x4 splat2World = mat3x4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n            mat4 world2ndc = transpose(projectionMatrix * transformModelViewMatrix);\n\n            mat3x4 ndc2pix = mat3x4(vec4(viewport.x / 2.0, 0.0, 0.0, (viewport.x - 1.0) / 2.0),\n                                    vec4(0.0, viewport.y / 2.0, 0.0, (viewport.y - 1.0) / 2.0),\n                                    vec4(0.0, 0.0, 0.0, 1.0));\n\n            mat3 T = transpose(splat2World) * world2ndc * ndc2pix;\n            vec3 normal = vec3(viewMatrix * vec4(L[0][2], L[1][2], L[2][2], 0.0));\n        `;\n\n        /*\n            float3 T0 = {T[0][0], T[0][1], T[0][2]};\n            float3 T1 = {T[1][0], T[1][1], T[1][2]};\n            float3 T3 = {T[2][0], T[2][1], T[2][2]};\n\n            // Compute AABB\n            float3 temp_point = {1.0f, 1.0f, -1.0f};\n            float distance = sumf3(T3 * T3 * temp_point);\n            float3 f = (1 / distance) * temp_point;\n            if (distance == 0.0) return false;\n\n            point_image = {\n                sumf3(f * T0 * T3),\n                sumf3(f * T1 * T3)\n            };\n\n            float2 temp = {\n                sumf3(f * T0 * T0),\n                sumf3(f * T1 * T1)\n            };\n            float2 half_extend = point_image * point_image - temp;\n            extent = sqrtf2(maxf2(1e-4, half_extend));\n            return true;\n        */\n        // Computing the bounding box of the 2D Gaussian and its center\n        // The center of the bounding box is used to create a low pass filter.\n        // This code is based off the reference implementation and creates an AABB aligned\n        // with the screen for the quad to be rendered.\n        const referenceQuadGeneration = `\n            vec3 T0 = vec3(T[0][0], T[0][1], T[0][2]);\n            vec3 T1 = vec3(T[1][0], T[1][1], T[1][2]);\n            vec3 T3 = vec3(T[2][0], T[2][1], T[2][2]);\n\n            vec3 tempPoint = vec3(1.0, 1.0, -1.0);\n            float distance = (T3.x * T3.x * tempPoint.x) + (T3.y * T3.y * tempPoint.y) + (T3.z * T3.z * tempPoint.z);\n            vec3 f = (1.0 / distance) * tempPoint;\n            if (abs(distance) < 0.00001) return;\n\n            float pointImageX = (T0.x * T3.x * f.x) + (T0.y * T3.y * f.y) + (T0.z * T3.z * f.z);\n            float pointImageY = (T1.x * T3.x * f.x) + (T1.y * T3.y * f.y) + (T1.z * T3.z * f.z);\n            vec2 pointImage = vec2(pointImageX, pointImageY);\n\n            float tempX = (T0.x * T0.x * f.x) + (T0.y * T0.y * f.y) + (T0.z * T0.z * f.z);\n            float tempY = (T1.x * T1.x * f.x) + (T1.y * T1.y * f.y) + (T1.z * T1.z * f.z);\n            vec2 temp = vec2(tempX, tempY);\n\n            vec2 halfExtend = pointImage * pointImage - temp;\n            vec2 extent = sqrt(max(vec2(0.0001), halfExtend));\n            float radius = max(extent.x, extent.y);\n\n            vec2 ndcOffset = ((position.xy * radius * 3.0) * basisViewport * 2.0);\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            vT = T;\n            vQuadCenter = pointImage;\n            vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n        `;\n\n        const useRefImplementation = false;\n        if (useRefImplementation) {\n            vertexShaderSource += referenceQuadGeneration;\n        } else {\n            // Create a quad that is aligned with the eigen vectors of the projected gaussian for rendering.\n            // This is a different approach than the reference implementation, similar to how the rendering of\n            // 3D gaussians in this viewer differs from the reference implementation. If the quad is too small\n            // (smaller than a pixel), then revert to the reference implementation.\n            vertexShaderSource += `\n\n                mat4 splat2World4 = mat4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(L[2], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n                mat4 Tt = transpose(transpose(splat2World4) * world2ndc);\n\n                vec4 tempPoint1 = Tt * vec4(1.0, 0.0, 0.0, 1.0);\n                tempPoint1 /= tempPoint1.w;\n\n                vec4 tempPoint2 = Tt * vec4(0.0, 1.0, 0.0, 1.0);\n                tempPoint2 /= tempPoint2.w;\n\n                vec4 center = Tt * vec4(0.0, 0.0, 0.0, 1.0);\n                center /= center.w;\n\n                vec2 basisVector1 = tempPoint1.xy - center.xy;\n                vec2 basisVector2 = tempPoint2.xy - center.xy;\n\n                vec2 basisVector1Screen = basisVector1 * 0.5 * viewport;\n                vec2 basisVector2Screen = basisVector2 * 0.5 * viewport;\n\n                const float minPix = 1.;\n                if (length(basisVector1Screen) < minPix || length(basisVector2Screen) < minPix) {\n                    ${referenceQuadGeneration}\n                } else {\n                    vec2 ndcOffset = vec2(position.x * basisVector1 + position.y * basisVector2) * 3.0 * inverseFocalAdjustment;\n                    vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                    gl_Position = quadPos;\n\n                    vT = T;\n                    vQuadCenter = center.xy;\n                    vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n                }\n            `;\n        }\n\n        vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\n        vertexShaderSource += `}`;\n\n        return vertexShaderSource;\n    }\n\n    static buildFragmentShader() {\n\n        let fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n\n            /*\n                const float2 xy = collected_xy[j];\n                const float3 Tu = collected_Tu[j];\n                const float3 Tv = collected_Tv[j];\n                const float3 Tw = collected_Tw[j];\n                float3 k = pix.x * Tw - Tu;\n                float3 l = pix.y * Tw - Tv;\n                float3 p = cross(k, l);\n                if (p.z == 0.0) continue;\n                float2 s = {p.x / p.z, p.y / p.z};\n                float rho3d = (s.x * s.x + s.y * s.y);\n                float2 d = {xy.x - pixf.x, xy.y - pixf.y};\n                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y);\n\n                // compute intersection and depth\n                float rho = min(rho3d, rho2d);\n                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z;\n                if (depth < near_n) continue;\n                float4 nor_o = collected_normal_opacity[j];\n                float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n                float opa = nor_o.w;\n\n                float power = -0.5f * rho;\n                if (power > 0.0f)\n                    continue;\n\n                // Eq. (2) from 3D Gaussian splatting paper.\n                // Obtain alpha by multiplying with Gaussian opacity\n                // and its exponential falloff from mean.\n                // Avoid numerical instabilities (see paper appendix).\n                float alpha = min(0.99f, opa * exp(power));\n                if (alpha < 1.0f / 255.0f)\n                    continue;\n                float test_T = T * (1 - alpha);\n                if (test_T < 0.0001f)\n                {\n                    done = true;\n                    continue;\n                }\n\n                float w = alpha * T;\n            */\n            void main () {\n\n                const float FilterInvSquare = 2.0;\n                const float near_n = 0.2;\n                const float T = 1.0;\n\n                vec2 xy = vQuadCenter;\n                vec3 Tu = vT[0];\n                vec3 Tv = vT[1];\n                vec3 Tw = vT[2];\n                vec3 k = vFragCoord.x * Tw - Tu;\n                vec3 l = vFragCoord.y * Tw - Tv;\n                vec3 p = cross(k, l);\n                if (p.z == 0.0) discard;\n                vec2 s = vec2(p.x / p.z, p.y / p.z);\n                float rho3d = (s.x * s.x + s.y * s.y); \n                vec2 d = vec2(xy.x - vFragCoord.x, xy.y - vFragCoord.y);\n                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y); \n\n                // compute intersection and depth\n                float rho = min(rho3d, rho2d);\n                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z; \n                if (depth < near_n) discard;\n                //  vec4 nor_o = collected_normal_opacity[j];\n                //  float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n                float opa = vColor.a;\n\n                float power = -0.5f * rho;\n                if (power > 0.0f) discard;\n\n                // Eq. (2) from 3D Gaussian splatting paper.\n                // Obtain alpha by multiplying with Gaussian opacity\n                // and its exponential falloff from mean.\n                // Avoid numerical instabilities (see paper appendix). \n                float alpha = min(0.99f, opa * exp(power));\n                if (alpha < 1.0f / 255.0f) discard;\n                float test_T = T * (1.0 - alpha);\n                if (test_T < 0.0001)discard;\n\n                float w = alpha * T;\n                gl_FragColor = vec4(vColor.rgb, w);\n            }\n        `;\n\n        return fragmentShaderSource;\n    }\n}\n","import * as THREE from 'three';\n\nexport class SplatGeometry {\n\n    /**\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n     * @return {THREE.InstancedBufferGeometry}\n     */\n    static build(maxSplatCount) {\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        // Vertices for the instanced quad\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        // Splat index buffer\n        const splatIndexArray = new Uint32Array(maxSplatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = 0;\n\n        return geometry;\n    }\n}\n","import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene {\n\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1, opacity = 1.0, visible = true) {\n        this.splatBuffer = splatBuffer;\n        this.position = position.clone();\n        this.quaternion = quaternion.clone();\n        this.scale = scale.clone();\n        this.transform = new THREE.Matrix4();\n        this.minimumAlpha = minimumAlpha;\n        this.opacity = opacity;\n        this.visible = visible;\n        this.updateTransform();\n    }\n\n    copyTransformData(otherScene) {\n        this.position.copy(otherScene.position);\n        this.quaternion.copy(otherScene.quaternion);\n        this.scale.copy(otherScene.scale);\n        this.transform.copy(otherScene.transform);\n    }\n\n    updateTransform() {\n        this.transform.compose(this.position, this.quaternion, this.scale);\n    }\n}\n","import * as THREE from 'three';\nimport { delayedExecute } from '../Util.js';\n\nclass SplatTreeNode {\n\n    static idGen = 0;\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || SplatTreeNode.idGen++;\n    }\n\n}\n\nclass SplatSubTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.nodesWithIndexes = [];\n        this.splatMesh = null;\n    }\n\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\n        if (workerSubTreeNode.data.indexes) {\n            convertedNode.data = {\n                'indexes': []\n            };\n            for (let index of workerSubTreeNode.data.indexes) {\n                convertedNode.data.indexes.push(index);\n            }\n        }\n        if (workerSubTreeNode.children) {\n            for (let child of workerSubTreeNode.children) {\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\n            }\n        }\n        return convertedNode;\n    }\n\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\n\n        convertedSubTree.splatMesh = splatMesh;\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\n\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        convertedSubTree.nodesWithIndexes = [];\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                convertedSubTree.nodesWithIndexes.push(node);\n            }\n        });\n\n        return convertedSubTree;\n    }\n}\n\nfunction createSplatTreeWorker(self) {\n\n    let WorkerSplatTreeNodeIDGen = 0;\n\n    class WorkerBox3 {\n\n        constructor(min, max) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n        }\n\n        containsPoint(point) {\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\n        }\n    }\n\n    class WorkerSplatSubTree {\n\n        constructor(maxDepth, maxCentersPerNode) {\n            this.maxDepth = maxDepth;\n            this.maxCentersPerNode = maxCentersPerNode;\n            this.sceneDimensions = [];\n            this.sceneMin = [];\n            this.sceneMax = [];\n            this.rootNode = null;\n            this.addedIndexes = {};\n            this.nodesWithIndexes = [];\n            this.splatMesh = null;\n            this.disposed = false;\n        }\n\n    }\n\n    class WorkerSplatTreeNode {\n\n        constructor(min, max, depth, id) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\n                           (max[1] - min[1]) * 0.5 + min[1],\n                           (max[2] - min[2]) * 0.5 + min[2]];\n            this.depth = depth;\n            this.children = [];\n            this.data = null;\n            this.id = id || WorkerSplatTreeNodeIDGen++;\n        }\n\n    }\n\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    tree.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            node.data.indexes.sort((a, b) => {\n                if (a > b) return 1;\n                else return -1;\n            });\n            tree.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = [node.max[0] - node.min[0],\n                                node.max[1] - node.min[1],\n                                node.max[2] - node.min[2]];\n        const halfDimensions = [nodeDimensions[0] * 0.5,\n                                nodeDimensions[1] * 0.5,\n                                nodeDimensions[2] * 0.5];\n        const nodeCenter = [node.min[0] + halfDimensions[0],\n                            node.min[1] + halfDimensions[1],\n                            node.min[2] + halfDimensions[2]];\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = [0, 0, 0];\n        for (let i = 0; i < splatCount; i++) {\n            const splatGlobalIndex = node.data.indexes[i];\n            const centerBase = indexToCenter[splatGlobalIndex];\n            center[0] = sceneCenters[centerBase];\n            center[1] = sceneCenters[centerBase + 1];\n            center[2] = sceneCenters[centerBase + 2];\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatGlobalIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\n        }\n        return;\n    };\n\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\n\n        const sceneMin = [0, 0, 0];\n        const sceneMax = [0, 0, 0];\n        const indexes = [];\n        const centerCount = Math.floor(sceneCenters.length / 4);\n        for ( let i = 0; i < centerCount; i ++) {\n            const base = i * 4;\n            const x = sceneCenters[base];\n            const y = sceneCenters[base + 1];\n            const z = sceneCenters[base + 2];\n            const index = Math.round(sceneCenters[base + 3]);\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\n            indexes.push(index);\n        }\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\n        subTree.sceneMin = sceneMin;\n        subTree.sceneMax = sceneMax;\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\n        subTree.rootNode.data = {\n            'indexes': indexes\n        };\n\n        return subTree;\n    };\n\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\n        const indexToCenter = [];\n        for (let sceneCenters of allCenters) {\n            const centerCount = Math.floor(sceneCenters.length / 4);\n            for ( let i = 0; i < centerCount; i ++) {\n                const base = i * 4;\n                const index = Math.round(sceneCenters[base + 3]);\n                indexToCenter[index] = base;\n            }\n        }\n        const subTrees = [];\n        for (let sceneCenters of allCenters) {\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\n            subTrees.push(subTree);\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\n        }\n        self.postMessage({\n            'subTrees': subTrees\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.process) {\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\n        }\n    };\n}\n\nfunction workerProcessCenters(splatTreeWorker, centers, transferBuffers, maxDepth, maxCentersPerNode) {\n    splatTreeWorker.postMessage({\n        'process': {\n            'centers': centers,\n            'maxDepth': maxDepth,\n            'maxCentersPerNode': maxCentersPerNode\n        }\n    }, transferBuffers);\n}\n\nfunction checkAndCreateWorker() {\n    const splatTreeWorker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n    return splatTreeWorker;\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.subTrees = [];\n        this.splatMesh = null;\n    }\n\n\n    dispose() {\n        this.diposeSplatTreeWorker();\n        this.disposed = true;\n    }\n\n    diposeSplatTreeWorker() {\n        if (this.splatTreeWorker) this.splatTreeWorker.terminate();\n        this.splatTreeWorker = null;\n    };\n\n    /**\n     * Construct this instance of SplatTree from an instance of SplatMesh.\n     *\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                   builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {undefined}\n     */\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\n        if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\n\n        this.splatMesh = splatMesh;\n        this.subTrees = [];\n        const center = new THREE.Vector3();\n\n        const addCentersForScene = (splatOffset, splatCount) => {\n            const sceneCenters = new Float32Array(splatCount * 4);\n            let addedCount = 0;\n            for (let i = 0; i < splatCount; i++) {\n                const globalSplatIndex = i + splatOffset;\n                if (filterFunc(globalSplatIndex)) {\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\n                    const addBase = addedCount * 4;\n                    sceneCenters[addBase] = center.x;\n                    sceneCenters[addBase + 1] = center.y;\n                    sceneCenters[addBase + 2] = center.z;\n                    sceneCenters[addBase + 3] = globalSplatIndex;\n                    addedCount++;\n                }\n            }\n            return sceneCenters;\n        };\n\n        return new Promise((resolve) => {\n\n            const checkForEarlyExit = () => {\n                if (this.disposed) {\n                    this.diposeSplatTreeWorker();\n                    resolve();\n                    return true;\n                }\n                return false;\n            };\n\n            if (onIndexesUpload) onIndexesUpload(false);\n\n            delayedExecute(() => {\n\n                if (checkForEarlyExit()) return;\n\n                const allCenters = [];\n                if (splatMesh.dynamicMode) {\n                    let splatOffset = 0;\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\n                        const scene = splatMesh.getScene(s);\n                        const splatCount = scene.splatBuffer.getSplatCount();\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\n                        allCenters.push(sceneCenters);\n                        splatOffset += splatCount;\n                    }\n                } else {\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\n                    allCenters.push(sceneCenters);\n                }\n\n                this.splatTreeWorker.onmessage = (e) => {\n\n                    if (checkForEarlyExit()) return;\n\n                    if (e.data.subTrees) {\n\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\n\n                        delayedExecute(() => {\n\n                            if (checkForEarlyExit()) return;\n\n                            for (let workerSubTree of e.data.subTrees) {\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\n                                this.subTrees.push(convertedSubTree);\n                            }\n                            this.diposeSplatTreeWorker();\n\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\n\n                            delayedExecute(() => {\n                                resolve();\n                            });\n\n                        });\n                    }\n                };\n\n                delayedExecute(() => {\n                    if (checkForEarlyExit()) return;\n                    if (onIndexesUpload) onIndexesUpload(true);\n                    const transferBuffers = allCenters.map((array) => array.buffer);\n                    workerProcessCenters(this.splatTreeWorker, allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\n                });\n\n            });\n\n        });\n\n    };\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        for (let subTree of this.subTrees) {\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\n        }\n    }\n\n}\n","function WebGLExtensions( gl ) {\n\n    const extensions = {};\n\n    function getExtension( name ) {\n\n        if ( extensions[name] !== undefined ) {\n\n            return extensions[name];\n\n        }\n\n        let extension;\n\n        switch ( name ) {\n\n            case 'WEBGL_depth_texture':\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n                break;\n\n            case 'EXT_texture_filter_anisotropic':\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n                break;\n\n            case 'WEBGL_compressed_texture_s3tc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n                break;\n\n            case 'WEBGL_compressed_texture_pvrtc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n                break;\n\n            default:\n                extension = gl.getExtension( name );\n\n        }\n\n        extensions[name] = extension;\n\n        return extension;\n\n    }\n\n    return {\n\n        has: function( name ) {\n\n            return getExtension( name ) !== null;\n\n        },\n\n        init: function( capabilities ) {\n\n            if ( capabilities.isWebGL2 ) {\n\n                getExtension( 'EXT_color_buffer_float' );\n                getExtension( 'WEBGL_clip_cull_distance' );\n\n            } else {\n\n                getExtension( 'WEBGL_depth_texture' );\n                getExtension( 'OES_texture_float' );\n                getExtension( 'OES_texture_half_float' );\n                getExtension( 'OES_texture_half_float_linear' );\n                getExtension( 'OES_standard_derivatives' );\n                getExtension( 'OES_element_index_uint' );\n                getExtension( 'OES_vertex_array_object' );\n                getExtension( 'ANGLE_instanced_arrays' );\n\n            }\n\n            getExtension( 'OES_texture_float_linear' );\n            getExtension( 'EXT_color_buffer_half_float' );\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\n\n        },\n\n        get: function( name ) {\n\n            const extension = getExtension( name );\n\n            if ( extension === null ) {\n\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n            }\n\n            return extension;\n\n        }\n\n    };\n\n}\n\nexport { WebGLExtensions };\n","function WebGLCapabilities( gl, extensions, parameters ) {\n\n    let maxAnisotropy;\n\n    function getMaxAnisotropy() {\n\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n        } else {\n\n            maxAnisotropy = 0;\n\n        }\n\n        return maxAnisotropy;\n\n    }\n\n    function getMaxPrecision( precision ) {\n\n        if ( precision === 'highp' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n                return 'highp';\n\n            }\n\n            precision = 'mediump';\n\n        }\n\n        if ( precision === 'mediump' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n                return 'mediump';\n\n            }\n\n        }\n\n        return 'lowp';\n\n    }\n\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\n\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    const maxPrecision = getMaxPrecision( precision );\n\n    if ( maxPrecision !== precision ) {\n\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n        precision = maxPrecision;\n\n    }\n\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    const vertexTextures = maxVertexTextures > 0;\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\n\n    return {\n\n        isWebGL2: isWebGL2,\n\n        drawBuffers: drawBuffers,\n\n        getMaxAnisotropy: getMaxAnisotropy,\n        getMaxPrecision: getMaxPrecision,\n\n        precision: precision,\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n        maxTextures: maxTextures,\n        maxVertexTextures: maxVertexTextures,\n        maxTextureSize: maxTextureSize,\n        maxCubemapSize: maxCubemapSize,\n\n        maxAttributes: maxAttributes,\n        maxVertexUniforms: maxVertexUniforms,\n        maxVaryings: maxVaryings,\n        maxFragmentUniforms: maxFragmentUniforms,\n\n        vertexTextures: vertexTextures,\n        floatFragmentTextures: floatFragmentTextures,\n        floatVertexTextures: floatVertexTextures,\n\n        maxSamples: maxSamples\n\n    };\n\n}\n\n\nexport { WebGLCapabilities };\n","export const SceneRevealMode = {\n    Default: 0,\n    Gradual: 1,\n    Instant: 2\n};\n","export const LogLevel = {\n    None: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Debug: 4\n};\n","import * as THREE from 'three';\nimport { SplatMaterial3D } from './SplatMaterial3D.js';\nimport { SplatMaterial2D } from './SplatMaterial2D.js';\nimport { SplatGeometry } from './SplatGeometry.js';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from '../splattree/SplatTree.js';\nimport { WebGLExtensions } from '../three-shim/WebGLExtensions.js';\nimport { WebGLCapabilities } from '../three-shim/WebGLCapabilities.js';\nimport { uintEncodedFloat, rgbaArrayToInteger } from '../Util.js';\nimport { Constants } from '../Constants.js';\nimport { SceneRevealMode } from '../SceneRevealMode.js';\nimport { SplatRenderMode } from '../SplatRenderMode.js';\nimport { LogLevel } from '../LogLevel.js';\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\n\nconst COVARIANCES_ELEMENTS_PER_TEXEL_STORED = 4;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED = 4;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED = 6;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED = 8;\nconst SCALES_ROTATIONS_ELEMENTS_PER_TEXEL = 4;\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\nconst SCENE_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\nconst SCENE_FADEIN_RATE_FAST = 0.012;\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\n\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\n\n// Based on my own observations across multiple devices, OSes and browsers, using textures that have one dimension\n// greater than 4096 while the other is greater than or equal to 4096 causes issues (Essentially any texture larger\n// than 4096 x 4096 (16777216) texels). Specifically it seems all texture data beyond the 4096 x 4096 texel boundary\n// is corrupted, while data below that boundary is usable. In these cases the texture has been valid in the eyes of\n// both Three.js and WebGL, and the texel format (RG, RGBA, etc.) has not mattered. More investigation will be needed,\n// but for now the work-around is to split the spherical harmonics into three textures (one for each color channel).\nconst MAX_TEXTURE_TEXELS = 16777216;\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n\n    constructor(splatRenderMode = SplatRenderMode.ThreeD, dynamicMode = true, enableOptionalEffects = false,\n                halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1, enableDistancesComputationOnGPU = true,\n                integerBasedDistancesComputation = false, antialiased = false, maxScreenSpaceSplatSize = 1024, logLevel = LogLevel.None,\n                sphericalHarmonicsDegree = 0) {\n        super(dummyGeometry, dummyMaterial);\n\n        // Reference to a Three.js renderer\n        this.renderer = undefined;\n\n        // Determine how the splats are rendered\n        this.splatRenderMode = splatRenderMode;\n\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n        this.dynamicMode = dynamicMode;\n\n        // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\n        // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\n        // that are enabled by the 'dynamicScene' parameter.\n        this.enableOptionalEffects = enableOptionalEffects;\n\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n        this.devicePixelRatio = devicePixelRatio;\n\n        // Use a transform feedback to calculate splat distances from the camera\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n\n        // Use a faster integer-based approach for calculating splat distances from the camera\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = antialiased;\n\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\n\n        // The verbosity of console logging\n        this.logLevel = logLevel;\n\n        // Degree 0 means no spherical harmonics\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n        this.minSphericalHarmonicsDegree = 0;\n\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\n        this.scenes = [];\n\n        // Special octree tailored to SplatMesh instances\n        this.splatTree = null;\n        this.baseSplatTree = null;\n\n        // Cache textures and the intermediate data used to populate them\n        this.splatDataTextures = {};\n\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'sceneIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'sceneIndexesLoc': -1,\n            'transformsLocs': []\n        };\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = false;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n     * @param {Array<object>} sceneOptions Array of options objects: {\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @return {Array<THREE.Matrix4>}\n     */\n    static buildScenes(splatBuffers, sceneOptions) {\n        const scenes = [];\n        scenes.length = splatBuffers.length;\n        for (let i = 0; i < splatBuffers.length; i++) {\n            const splatBuffer = splatBuffers[i];\n            const options = sceneOptions[i] || {};\n            let positionArray = options['position'] || [0, 0, 0];\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\n            let scaleArray = options['scale'] || [1, 1, 1];\n            const position = new THREE.Vector3().fromArray(positionArray);\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\n            const scale = new THREE.Vector3().fromArray(scaleArray);\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale,\n                                              options.splatAlphaRemovalThreshold || 1, options.opacity, options.visible);\n        }\n        return scenes;\n    }\n\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha, opacity = 1.0, visible = true) {\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha, opacity, visible);\n    }\n\n    /**\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n     * local data within a single scene.\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n     * @return {object}\n     */\n    static buildSplatIndexMaps(splatBuffers) {\n        const localSplatIndexMap = [];\n        const sceneIndexMap = [];\n        let totalSplatCount = 0;\n        for (let s = 0; s < splatBuffers.length; s++) {\n            const splatBuffer = splatBuffers[s];\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\n            for (let i = 0; i < maxSplatCount; i++) {\n                localSplatIndexMap[totalSplatCount] = i;\n                sceneIndexMap[totalSplatCount] = s;\n                totalSplatCount++;\n            }\n        }\n        return {\n            localSplatIndexMap,\n            sceneIndexMap\n        };\n    }\n\n    /**\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {SplatTree}\n     */\n     buildSplatTree = function(minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n        return new Promise((resolve) => {\n            this.disposeSplatTree();\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n            // be configured on a per-scene basis\n            this.baseSplatTree = new SplatTree(8, 1000);\n            const buildStartTime = performance.now();\n            const splatColor = new THREE.Vector4();\n            this.baseSplatTree.processSplatMesh(this, (splatIndex) => {\n                this.getSplatColor(splatIndex, splatColor);\n                const sceneIndex = this.getSceneIndexForSplat(splatIndex);\n                const minAlpha = minAlphas[sceneIndex] || 1;\n                return splatColor.w >= minAlpha;\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                const buildTime = performance.now() - buildStartTime;\n                if (this.logLevel >= LogLevel.Info) console.log('SplatTree build: ' + buildTime + ' ms');\n                if (this.disposed) {\n                    resolve();\n                } else {\n\n                    this.splatTree = this.baseSplatTree;\n                    this.baseSplatTree = null;\n\n                    let leavesWithVertices = 0;\n                    let avgSplatCount = 0;\n                    let maxSplatCount = 0;\n                    let nodeCount = 0;\n\n                    this.splatTree.visitLeaves((node) => {\n                        const nodeSplatCount = node.data.indexes.length;\n                        if (nodeSplatCount > 0) {\n                            avgSplatCount += nodeSplatCount;\n                            maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                            nodeCount++;\n                            leavesWithVertices++;\n                        }\n                    });\n                    if (this.logLevel >= LogLevel.Info) {\n                        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n                        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n                        avgSplatCount = avgSplatCount / nodeCount;\n                        console.log(`Avg splat count per node: ${avgSplatCount}`);\n                        console.log(`Total splat count: ${this.getSplatCount()}`);\n                    }\n                    resolve();\n                }\n            });\n        });\n    };\n\n    /**\n     * Construct this instance of SplatMesh.\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     * }\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n     *                                      says to keep the transform from the existing scene.\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\n          onSplatTreeIndexesUpload, onSplatTreeConstruction, preserveVisibleRegion = true) {\n\n        this.sceneOptions = sceneOptions;\n        this.finalBuild = finalBuild;\n\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\n\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\n        if (keepSceneTransforms) {\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n                const newScene = newScenes[i];\n                const existingScene = this.getScene(i);\n                newScene.copyTransformData(existingScene);\n            }\n        }\n        this.scenes = newScenes;\n\n        let minSphericalHarmonicsDegree = 3;\n        for (let splatBuffer of splatBuffers) {\n            const splatBufferSphericalHarmonicsDegree = splatBuffer.getMinSphericalHarmonicsDegree();\n            if (splatBufferSphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n                minSphericalHarmonicsDegree = splatBufferSphericalHarmonicsDegree;\n            }\n        }\n        this.minSphericalHarmonicsDegree = Math.min(minSphericalHarmonicsDegree, this.sphericalHarmonicsDegree);\n\n        let splatBuffersChanged = false;\n        if (splatBuffers.length !== this.lastBuildScenes.length) {\n            splatBuffersChanged = true;\n        } else {\n            for (let i = 0; i < splatBuffers.length; i++) {\n                const splatBuffer = splatBuffers[i];\n                if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\n                    splatBuffersChanged = true;\n                    break;\n                }\n            }\n        }\n\n        let isUpdateBuild = true;\n        if (this.scenes.length !== 1 ||\n            this.lastBuildSceneCount !== this.scenes.length ||\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\n            splatBuffersChanged) {\n                isUpdateBuild = false;\n       }\n\n       if (!isUpdateBuild) {\n            this.boundingBox = new THREE.Box3();\n            if (!preserveVisibleRegion) {\n                this.maxSplatDistanceFromSceneCenter = 0;\n                this.visibleRegionBufferRadius = 0;\n                this.visibleRegionRadius = 0;\n                this.visibleRegionFadeStartRadius = 0;\n                this.firstRenderTime = -1;\n            }\n            this.lastBuildScenes = [];\n            this.lastBuildSplatCount = 0;\n            this.lastBuildMaxSplatCount = 0;\n            this.disposeMeshData();\n            this.geometry = SplatGeometry.build(maxSplatCount);\n            if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n                this.material = SplatMaterial3D.build(this.dynamicMode, this.enableOptionalEffects, this.antialiased,\n                                                      this.maxScreenSpaceSplatSize, this.splatScale, this.pointCloudModeEnabled,\n                                                      this.minSphericalHarmonicsDegree);\n            } else {\n                this.material = SplatMaterial2D.build(this.dynamicMode, this.enableOptionalEffects,\n                                                      this.splatScale, this.pointCloudModeEnabled, this.minSphericalHarmonicsDegree);\n            }\n\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n        }\n\n        const splatCount = this.getSplatCount();\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\n        const dataUpdateResults = this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            this.lastBuildScenes[i] = this.scenes[i];\n        }\n        this.lastBuildSplatCount = splatCount;\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\n        this.lastBuildSceneCount = this.scenes.length;\n\n        if (finalBuild && this.scenes.length > 0) {\n            this.buildSplatTree(sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\n                                onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\n                this.onSplatTreeReadyCallback = null;\n            });\n        }\n\n        this.visible = (this.scenes.length > 0);\n\n        return dataUpdateResults;\n    }\n\n    freeIntermediateSplatData() {\n\n        const deleteTextureData = (texture) => {\n            delete texture.source.data;\n            delete texture.image;\n            texture.onUpdate = null;\n        };\n\n        delete this.splatDataTextures.baseData.covariances;\n        delete this.splatDataTextures.baseData.centers;\n        delete this.splatDataTextures.baseData.colors;\n        delete this.splatDataTextures.baseData.sphericalHarmonics;\n\n        delete this.splatDataTextures.centerColors.data;\n        delete this.splatDataTextures.covariances.data;\n        if (this.splatDataTextures.sphericalHarmonics) {\n            delete this.splatDataTextures.sphericalHarmonics.data;\n        }\n        if (this.splatDataTextures.sceneIndexes) {\n            delete this.splatDataTextures.sceneIndexes.data;\n        }\n\n        this.splatDataTextures.centerColors.texture.needsUpdate = true;\n        this.splatDataTextures.centerColors.texture.onUpdate = () => {\n            deleteTextureData(this.splatDataTextures.centerColors.texture);\n        };\n\n        this.splatDataTextures.covariances.texture.needsUpdate = true;\n        this.splatDataTextures.covariances.texture.onUpdate = () => {\n            deleteTextureData(this.splatDataTextures.covariances.texture);\n        };\n\n        if (this.splatDataTextures.sphericalHarmonics) {\n            if (this.splatDataTextures.sphericalHarmonics.texture) {\n                this.splatDataTextures.sphericalHarmonics.texture.needsUpdate = true;\n                this.splatDataTextures.sphericalHarmonics.texture.onUpdate = () => {\n                    deleteTextureData(this.splatDataTextures.sphericalHarmonics.texture);\n                };\n            } else {\n                this.splatDataTextures.sphericalHarmonics.textures.forEach((texture) => {\n                    texture.needsUpdate = true;\n                    texture.onUpdate = () => {\n                        deleteTextureData(texture);\n                    };\n                });\n            }\n        }\n        if (this.splatDataTextures.sceneIndexes) {\n            this.splatDataTextures.sceneIndexes.texture.needsUpdate = true;\n            this.splatDataTextures.sceneIndexes.texture.onUpdate = () => {\n                deleteTextureData(this.splatDataTextures.sceneIndexes.texture);\n            };\n        }\n    }\n    /**\n     * Dispose all resources held by the splat mesh\n     */\n    dispose() {\n        this.disposeMeshData();\n        this.disposeTextures();\n        this.disposeSplatTree();\n        if (this.enableDistancesComputationOnGPU) {\n            if (this.computeDistancesOnGPUSyncTimeout) {\n                clearTimeout(this.computeDistancesOnGPUSyncTimeout);\n                this.computeDistancesOnGPUSyncTimeout = null;\n            }\n            this.disposeDistancesComputationGPUResources();\n        }\n        this.scenes = [];\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'sceneIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'sceneIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.renderer = null;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = true;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n     */\n    disposeMeshData() {\n        if (this.geometry && this.geometry !== dummyGeometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        if (this.material) {\n            this.material.dispose();\n            this.material = null;\n        }\n    }\n\n    disposeTextures() {\n        for (let textureKey in this.splatDataTextures) {\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n                const textureContainer = this.splatDataTextures[textureKey];\n                if (textureContainer.texture) {\n                    textureContainer.texture.dispose();\n                    textureContainer.texture = null;\n                }\n            }\n        }\n        this.splatDataTextures = null;\n    }\n\n    disposeSplatTree() {\n        if (this.splatTree) {\n            this.splatTree.dispose();\n            this.splatTree = null;\n        }\n        if (this.baseSplatTree) {\n            this.baseSplatTree.dispose();\n            this.baseSplatTree = null;\n        }\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    onSplatTreeReady(callback) {\n        this.onSplatTreeReadyCallback = callback;\n    }\n\n    /**\n     * Get copies of data that are necessary for splat distance computation: splat center positions and splat\n     * scene indexes (necessary for applying dynamic scene transformations during distance computation)\n     * @param {*} start The index at which to start copying data\n     * @param {*} end  The index at which to stop copying data\n     * @return {object}\n     */\n    getDataForDistancesComputation(start, end) {\n        const centers = this.integerBasedDistancesComputation ?\n                        this.getIntegerCenters(start, end, true) :\n                        this.getFloatCenters(start, end, true);\n        const sceneIndexes = this.getSceneIndexes(start, end);\n        return {\n            centers,\n            sceneIndexes\n        };\n    }\n\n    /**\n     * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     * @return {object}\n     */\n    refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount();\n        this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\n        const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(updateStart, splatCount - 1);\n        if (this.enableDistancesComputationOnGPU) {\n            this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly);\n        }\n        return {\n            'from': updateStart,\n            'to': splatCount - 1,\n            'count': splatCount - updateStart,\n            'centers': centers,\n            'sceneIndexes': sceneIndexes\n        };\n    }\n\n    /**\n     * Update the GPU buffers that are used for computing splat distances on the GPU.\n     * @param {Array<number>} centers Splat center positions\n     * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     */\n    refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly = false) {\n        const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        this.updateGPUCentersBufferForDistancesComputation(sinceLastBuildOnly, centers, offset);\n        this.updateGPUTransformIndexesBufferForDistancesComputation(sinceLastBuildOnly, sceneIndexes, offset);\n    }\n\n    /**\n     * Refresh data textures with data from the splat buffers for this mesh.\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     */\n    refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\n        if (!sinceLastBuildOnly) {\n            this.setupDataTextures();\n        } else {\n            const splatCount = this.getSplatCount();\n            const fromSplat = this.lastBuildSplatCount;\n            const toSplat = splatCount - 1;\n            this.updateBaseDataFromSplatBuffers(fromSplat, toSplat);\n            this.updateDataTexturesFromBaseData(fromSplat, toSplat);\n        }\n        this.updateVisibleRegion(sinceLastBuildOnly);\n    }\n\n    setupDataTextures() {\n        const maxSplatCount = this.getMaxSplatCount();\n        const splatCount = this.getSplatCount();\n\n        this.disposeTextures();\n\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplat) => {\n            const texSize = new THREE.Vector2(4096, 1024);\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplat) texSize.y *= 2;\n            return texSize;\n        };\n\n        const getCovariancesElementsPertexelStored = (compressionLevel) => {\n            return compressionLevel >= 1 ? COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED : COVARIANCES_ELEMENTS_PER_TEXEL_STORED;\n        };\n\n        const getCovariancesInitialTextureSpecs = (compressionLevel) => {\n            const elementsPerTexelStored = getCovariancesElementsPertexelStored(compressionLevel);\n            const texSize = computeDataTextureSize(elementsPerTexelStored, 6);\n            return {elementsPerTexelStored, texSize};\n        };\n\n        let covarianceCompressionLevel = this.getTargetCovarianceCompressionLevel();\n        const scaleRotationCompressionLevel = 0;\n        const shCompressionLevel = this.getTargetSphericalHarmonicsCompressionLevel();\n\n        let covariances;\n        let scales;\n        let rotations;\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n            const initialCovTexSpecs = getCovariancesInitialTextureSpecs(covarianceCompressionLevel);\n            if (initialCovTexSpecs.texSize.x * initialCovTexSpecs.texSize.y > MAX_TEXTURE_TEXELS && covarianceCompressionLevel === 0) {\n                covarianceCompressionLevel = 1;\n            }\n            covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\n        } else {\n            scales = new Float32Array(maxSplatCount * 3);\n            rotations = new Float32Array(maxSplatCount * 4);\n        }\n\n        const centers = new Float32Array(maxSplatCount * 3);\n        const colors = new Uint8Array(maxSplatCount * 4);\n\n        let SphericalHarmonicsArrayType = Float32Array;\n        if (shCompressionLevel === 1) SphericalHarmonicsArrayType = Uint16Array;\n        else if (shCompressionLevel === 2) SphericalHarmonicsArrayType = Uint8Array;\n        const shComponentCount = getSphericalHarmonicsComponentCountForDegree(this.minSphericalHarmonicsDegree);\n        const shData = this.minSphericalHarmonicsDegree ? new SphericalHarmonicsArrayType(maxSplatCount * shComponentCount) : undefined;\n\n        this.fillSplatDataArrays(covariances, scales, rotations, centers, colors, shData, undefined,\n                                 covarianceCompressionLevel, scaleRotationCompressionLevel, shCompressionLevel);\n\n        // set up centers/colors data texture\n        const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\n        const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        SplatMesh.updateCenterColorsPaddedData(0, splatCount - 1, centers, colors, paddedCentersCols);\n\n        const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\n                                                     THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColsTex.internalFormat = 'RGBA32UI';\n        centersColsTex.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColsTex;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'baseData': {\n                'covariances': covariances,\n                'scales': scales,\n                'rotations': rotations,\n                'centers': centers,\n                'colors': colors,\n                'sphericalHarmonics': shData\n            },\n            'centerColors': {\n                'data': paddedCentersCols,\n                'texture': centersColsTex,\n                'size': centersColsTexSize\n            }\n        };\n\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n            // set up covariances data texture\n\n            const covTexSpecs = getCovariancesInitialTextureSpecs(covarianceCompressionLevel);\n            const covariancesElementsPerTexelStored = covTexSpecs.elementsPerTexelStored;\n            const covTexSize = covTexSpecs.texSize;\n\n            let CovariancesDataType = covarianceCompressionLevel >= 1 ? Uint32Array : Float32Array;\n            const covariancesElementsPerTexelAllocated = covarianceCompressionLevel >= 1 ?\n                                                         COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED :\n                                                         COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED;\n            const covariancesTextureData = new CovariancesDataType(covTexSize.x * covTexSize.y * covariancesElementsPerTexelAllocated);\n\n            if (covarianceCompressionLevel === 0) {\n                covariancesTextureData.set(covariances);\n            } else {\n                SplatMesh.updatePaddedCompressedCovariancesTextureData(covariances, covariancesTextureData, 0, 0, covariances.length);\n            }\n\n            let covTex;\n            if (covarianceCompressionLevel >= 1) {\n                covTex = new THREE.DataTexture(covariancesTextureData, covTexSize.x, covTexSize.y,\n                                               THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n                covTex.internalFormat = 'RGBA32UI';\n                this.material.uniforms.covariancesTextureHalfFloat.value = covTex;\n            } else {\n                covTex = new THREE.DataTexture(covariancesTextureData, covTexSize.x, covTexSize.y, THREE.RGBAFormat, THREE.FloatType);\n                this.material.uniforms.covariancesTexture.value = covTex;\n\n                // For some reason a usampler2D needs to have a valid texture attached or WebGL complains\n                const dummyTex = new THREE.DataTexture(new Uint32Array(32), 2, 2, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n                dummyTex.internalFormat = 'RGBA32UI';\n                this.material.uniforms.covariancesTextureHalfFloat.value = dummyTex;\n                dummyTex.needsUpdate = true;\n            }\n            covTex.needsUpdate = true;\n\n            this.material.uniforms.covariancesAreHalfFloat.value = (covarianceCompressionLevel >= 1) ? 1 : 0;\n            this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\n\n            this.splatDataTextures['covariances'] = {\n                'data': covariancesTextureData,\n                'texture': covTex,\n                'size': covTexSize,\n                'compressionLevel': covarianceCompressionLevel,\n                'elementsPerTexelStored': covariancesElementsPerTexelStored,\n                'elementsPerTexelAllocated': covariancesElementsPerTexelAllocated\n            };\n        } else {\n            // set up scale & rotations data texture\n            const elementsPerSplat = 6;\n            const scaleRotationsTexSize = computeDataTextureSize(SCALES_ROTATIONS_ELEMENTS_PER_TEXEL, elementsPerSplat);\n            let ScaleRotationsDataType = scaleRotationCompressionLevel >= 1 ? Uint16Array : Float32Array;\n            let scaleRotationsTextureType = scaleRotationCompressionLevel >= 1 ? THREE.HalfFloatType : THREE.FloatType;\n            const paddedScaleRotations = new ScaleRotationsDataType(scaleRotationsTexSize.x * scaleRotationsTexSize.y *\n                                                                    SCALES_ROTATIONS_ELEMENTS_PER_TEXEL);\n\n            SplatMesh.updateScaleRotationsPaddedData(0, splatCount - 1, scales, rotations, paddedScaleRotations);\n\n            const scaleRotationsTex = new THREE.DataTexture(paddedScaleRotations, scaleRotationsTexSize.x, scaleRotationsTexSize.y,\n                                                            THREE.RGBAFormat, scaleRotationsTextureType);\n            scaleRotationsTex.needsUpdate = true;\n            this.material.uniforms.scaleRotationsTexture.value = scaleRotationsTex;\n            this.material.uniforms.scaleRotationsTextureSize.value.copy(scaleRotationsTexSize);\n\n            this.splatDataTextures['scaleRotations'] = {\n                'data': paddedScaleRotations,\n                'texture': scaleRotationsTex,\n                'size': scaleRotationsTexSize,\n                'compressionLevel': scaleRotationCompressionLevel\n            };\n        }\n\n        if (shData) {\n            const shTextureType = shCompressionLevel === 2 ? THREE.UnsignedByteType : THREE.HalfFloatType;\n\n            let paddedSHComponentCount = shComponentCount;\n            if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\n            const shElementsPerTexel = this.minSphericalHarmonicsDegree === 2 ? 4 : 2;\n            const texelFormat = shElementsPerTexel === 4 ? THREE.RGBAFormat : THREE.RGFormat;\n            let shTexSize = computeDataTextureSize(shElementsPerTexel, paddedSHComponentCount);\n\n            // Use one texture for all spherical harmonics data\n            if (shTexSize.x * shTexSize.y <= MAX_TEXTURE_TEXELS) {\n                const paddedSHArraySize = shTexSize.x * shTexSize.y * shElementsPerTexel;\n                const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\n                for (let c = 0; c < splatCount; c++) {\n                    const srcBase = shComponentCount * c;\n                    const destBase = paddedSHComponentCount * c;\n                    for (let i = 0; i < shComponentCount; i++) {\n                        paddedSHArray[destBase + i] = shData[srcBase + i];\n                    }\n                }\n\n                const shTexture = new THREE.DataTexture(paddedSHArray, shTexSize.x, shTexSize.y, texelFormat, shTextureType);\n                shTexture.needsUpdate = true;\n                this.material.uniforms.sphericalHarmonicsTexture.value = shTexture;\n                this.splatDataTextures['sphericalHarmonics'] = {\n                    'componentCount': shComponentCount,\n                    'paddedComponentCount': paddedSHComponentCount,\n                    'data': paddedSHArray,\n                    'textureCount': 1,\n                    'texture': shTexture,\n                    'size': shTexSize,\n                    'compressionLevel': shCompressionLevel,\n                    'elementsPerTexel': shElementsPerTexel\n                };\n            // Use three textures for spherical harmonics data, one per color channel\n            } else {\n                const shComponentCountPerChannel = shComponentCount / 3;\n                paddedSHComponentCount = shComponentCountPerChannel;\n                if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\n                shTexSize = computeDataTextureSize(shElementsPerTexel, paddedSHComponentCount);\n\n                const paddedSHArraySize = shTexSize.x * shTexSize.y * shElementsPerTexel;\n                const textureUniforms = [this.material.uniforms.sphericalHarmonicsTextureR,\n                                         this.material.uniforms.sphericalHarmonicsTextureG,\n                                         this.material.uniforms.sphericalHarmonicsTextureB];\n                const paddedSHArrays = [];\n                const shTextures = [];\n                for (let t = 0; t < 3; t++) {\n                    const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\n                    paddedSHArrays.push(paddedSHArray);\n                    for (let c = 0; c < splatCount; c++) {\n                        const srcBase = shComponentCount * c;\n                        const destBase = paddedSHComponentCount * c;\n                        if (shComponentCountPerChannel >= 3) {\n                            for (let i = 0; i < 3; i++) paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\n                            if (shComponentCountPerChannel >= 8) {\n                                for (let i = 0; i < 5; i++) paddedSHArray[destBase + 3 + i] = shData[srcBase + 9 + t * 5 + i];\n                            }\n                        }\n                    }\n\n                    const shTexture = new THREE.DataTexture(paddedSHArray, shTexSize.x, shTexSize.y, texelFormat, shTextureType);\n                    shTextures.push(shTexture);\n                    shTexture.needsUpdate = true;\n                    textureUniforms[t].value = shTexture;\n                }\n\n                this.material.uniforms.sphericalHarmonicsMultiTextureMode.value = 1;\n                this.splatDataTextures['sphericalHarmonics'] = {\n                    'componentCount': shComponentCount,\n                    'componentCountPerChannel': shComponentCountPerChannel,\n                    'paddedComponentCount': paddedSHComponentCount,\n                    'data': paddedSHArrays,\n                    'textureCount': 3,\n                    'textures': shTextures,\n                    'size': shTexSize,\n                    'compressionLevel': shCompressionLevel,\n                    'elementsPerTexel': shElementsPerTexel\n                };\n            }\n\n            this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(shTexSize);\n            this.material.uniforms.sphericalHarmonics8BitMode.value = shCompressionLevel === 2 ? 1 : 0;\n            this.material.uniformsNeedUpdate = true;\n        }\n\n        if (this.dynamicMode || this.enableOptionalEffects) {\n            const sceneIndexesTexSize = computeDataTextureSize(SCENE_INDEXES_ELEMENTS_PER_TEXEL, 4);\n            const paddedTransformIndexes = new Uint32Array(sceneIndexesTexSize.x *\n                                                           sceneIndexesTexSize.y * SCENE_INDEXES_ELEMENTS_PER_TEXEL);\n            for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n            const sceneIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, sceneIndexesTexSize.x, sceneIndexesTexSize.y,\n                                                              THREE.RedIntegerFormat, THREE.UnsignedIntType);\n            sceneIndexesTexture.internalFormat = 'R32UI';\n            sceneIndexesTexture.needsUpdate = true;\n            this.material.uniforms.sceneIndexesTexture.value = sceneIndexesTexture;\n            this.material.uniforms.sceneIndexesTextureSize.value.copy(sceneIndexesTexSize);\n            this.material.uniformsNeedUpdate = true;\n            this.splatDataTextures['sceneIndexes'] = {\n                'data': paddedTransformIndexes,\n                'texture': sceneIndexesTexture,\n                'size': sceneIndexesTexSize\n            };\n        }\n    }\n\n    updateBaseDataFromSplatBuffers(fromSplat, toSplat) {\n        const covarancesTextureDesc = this.splatDataTextures['covariances'];\n        const covarianceCompressionLevel = covarancesTextureDesc ? covarancesTextureDesc.compressionLevel : undefined;\n        const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\n        const scaleRotationCompressionLevel = scaleRotationsTextureDesc ? scaleRotationsTextureDesc.compressionLevel : undefined;\n        const shITextureDesc = this.splatDataTextures['sphericalHarmonics'];\n        const shCompressionLevel = shITextureDesc ? shITextureDesc.compressionLevel : 0;\n\n        this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances, this.splatDataTextures.baseData.scales,\n                                 this.splatDataTextures.baseData.rotations, this.splatDataTextures.baseData.centers,\n                                 this.splatDataTextures.baseData.colors, this.splatDataTextures.baseData.sphericalHarmonics, undefined,\n                                 covarianceCompressionLevel, scaleRotationCompressionLevel, shCompressionLevel,\n                                 fromSplat, toSplat, fromSplat);\n    }\n\n    updateDataTexturesFromBaseData(fromSplat, toSplat) {\n        const covarancesTextureDesc = this.splatDataTextures['covariances'];\n        const covarianceCompressionLevel = covarancesTextureDesc ? covarancesTextureDesc.compressionLevel : undefined;\n        const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\n        const scaleRotationCompressionLevel = scaleRotationsTextureDesc ? scaleRotationsTextureDesc.compressionLevel : undefined;\n        const shTextureDesc = this.splatDataTextures['sphericalHarmonics'];\n        const shCompressionLevel = shTextureDesc ? shTextureDesc.compressionLevel : 0;\n\n        // Update center & color data texture\n        const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\n        const paddedCenterColors = centerColorsTextureDescriptor.data;\n        const centerColorsTexture = centerColorsTextureDescriptor.texture;\n        SplatMesh.updateCenterColorsPaddedData(fromSplat, toSplat, this.splatDataTextures.baseData.centers,\n                                               this.splatDataTextures.baseData.colors, paddedCenterColors);\n        const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\n        if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\n            centerColorsTexture.needsUpdate = true;\n        } else {\n            this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor.texture, centerColorsTextureDescriptor.size,\n                                   centerColorsTextureProps, CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4,\n                                   fromSplat, toSplat);\n        }\n\n        // update covariance data texture\n        if (covarancesTextureDesc) {\n            const covariancesTexture = covarancesTextureDesc.texture;\n            const covarancesStartElement = fromSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\n            const covariancesEndElement = toSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\n\n            if (covarianceCompressionLevel === 0) {\n                for (let i = covarancesStartElement; i <= covariancesEndElement; i++) {\n                    const covariance = this.splatDataTextures.baseData.covariances[i];\n                    covarancesTextureDesc.data[i] = covariance;\n                }\n            } else {\n                SplatMesh.updatePaddedCompressedCovariancesTextureData(this.splatDataTextures.baseData.covariances,\n                                                                       covarancesTextureDesc.data,\n                                                                       fromSplat * covarancesTextureDesc.elementsPerTexelAllocated,\n                                                                       covarancesStartElement, covariancesEndElement);\n            }\n\n            const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\n            if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\n                covariancesTexture.needsUpdate = true;\n            } else {\n                if (covarianceCompressionLevel === 0) {\n                    this.updateDataTexture(covarancesTextureDesc.data, covarancesTextureDesc.texture, covarancesTextureDesc.size,\n                                           covariancesTextureProps, covarancesTextureDesc.elementsPerTexelStored,\n                                           COVARIANCES_ELEMENTS_PER_SPLAT, 4, fromSplat, toSplat);\n                } else {\n                    this.updateDataTexture(covarancesTextureDesc.data, covarancesTextureDesc.texture, covarancesTextureDesc.size,\n                                           covariancesTextureProps, covarancesTextureDesc.elementsPerTexelAllocated,\n                                           covarancesTextureDesc.elementsPerTexelAllocated, 2, fromSplat, toSplat);\n                }\n            }\n        }\n\n        // update scale and rotation data texture\n        if (scaleRotationsTextureDesc) {\n            const paddedScaleRotations = scaleRotationsTextureDesc.data;\n            const scaleRotationsTexture = scaleRotationsTextureDesc.texture;\n            const elementsPerSplat = 6;\n            const bytesPerElement = scaleRotationCompressionLevel === 0 ? 4 : 2;\n\n            SplatMesh.updateScaleRotationsPaddedData(fromSplat, toSplat, this.splatDataTextures.baseData.scales,\n                                                     this.splatDataTextures.baseData.rotations, paddedScaleRotations);\n            const scaleRotationsTextureProps = this.renderer ? this.renderer.properties.get(scaleRotationsTexture) : null;\n            if (!scaleRotationsTextureProps || !scaleRotationsTextureProps.__webglTexture) {\n                scaleRotationsTexture.needsUpdate = true;\n            } else {\n                this.updateDataTexture(paddedScaleRotations, scaleRotationsTextureDesc.texture, scaleRotationsTextureDesc.size,\n                                       scaleRotationsTextureProps, SCALES_ROTATIONS_ELEMENTS_PER_TEXEL, elementsPerSplat, bytesPerElement,\n                                       fromSplat, toSplat);\n            }\n        }\n\n        // update spherical harmonics data texture\n        const shData = this.splatDataTextures.baseData.sphericalHarmonics;\n        if (shData) {\n            let shBytesPerElement = 4;\n            if (shCompressionLevel === 1) shBytesPerElement = 2;\n            else if (shCompressionLevel === 2) shBytesPerElement = 1;\n\n            const updateTexture = (shTexture, shTextureSize, elementsPerTexel, paddedSHArray, paddedSHComponentCount) => {\n                const shTextureProps = this.renderer ? this.renderer.properties.get(shTexture) : null;\n                if (!shTextureProps || !shTextureProps.__webglTexture) {\n                    shTexture.needsUpdate = true;\n                } else {\n                    this.updateDataTexture(paddedSHArray, shTexture, shTextureSize, shTextureProps, elementsPerTexel,\n                                           paddedSHComponentCount, shBytesPerElement, fromSplat, toSplat);\n                }\n            };\n\n            const shComponentCount = shTextureDesc.componentCount;\n            const paddedSHComponentCount = shTextureDesc.paddedComponentCount;\n\n            // Update for the case of a single texture for all spherical harmonics data\n            if (shTextureDesc.textureCount === 1) {\n                const paddedSHArray = shTextureDesc.data;\n                for (let c = fromSplat; c <= toSplat; c++) {\n                    const srcBase = shComponentCount * c;\n                    const destBase = paddedSHComponentCount * c;\n                    for (let i = 0; i < shComponentCount; i++) {\n                        paddedSHArray[destBase + i] = shData[srcBase + i];\n                    }\n                }\n                updateTexture(shTextureDesc.texture, shTextureDesc.size,\n                              shTextureDesc.elementsPerTexel, paddedSHArray, paddedSHComponentCount);\n            // Update for the case of spherical harmonics data split among three textures, one for each color channel\n            } else {\n                const shComponentCountPerChannel = shTextureDesc.componentCountPerChannel;\n                for (let t = 0; t < 3; t++) {\n                    const paddedSHArray = shTextureDesc.data[t];\n                    for (let c = fromSplat; c <= toSplat; c++) {\n                        const srcBase = shComponentCount * c;\n                        const destBase = paddedSHComponentCount * c;\n                        if (shComponentCountPerChannel >= 3) {\n                            for (let i = 0; i < 3; i++) paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\n                            if (shComponentCountPerChannel >= 8) {\n                                for (let i = 0; i < 5; i++) paddedSHArray[destBase + 3 + i] = shData[srcBase + 9 + t * 5 + i];\n                            }\n                        }\n                    }\n                    updateTexture(shTextureDesc.textures[t], shTextureDesc.size,\n                                  shTextureDesc.elementsPerTexel, paddedSHArray, paddedSHComponentCount);\n                }\n            }\n        }\n\n        // update scene index & transform data\n        if (this.dynamicMode) {\n            const sceneIndexesTexDesc = this.splatDataTextures['sceneIndexes'];\n            const paddedTransformIndexes = sceneIndexesTexDesc.data;\n            for (let c = this.lastBuildSplatCount; c <= toSplat; c++) {\n                paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n            }\n\n            const sceneIndexesTexture = sceneIndexesTexDesc.texture;\n            const sceneIndexesTextureProps = this.renderer ? this.renderer.properties.get(sceneIndexesTexture) : null;\n            if (!sceneIndexesTextureProps || !sceneIndexesTextureProps.__webglTexture) {\n                sceneIndexesTexture.needsUpdate = true;\n            } else {\n                this.updateDataTexture(paddedTransformIndexes, sceneIndexesTexDesc.texture, sceneIndexesTexDesc.size,\n                                       sceneIndexesTextureProps, 1, 1, 1, this.lastBuildSplatCount, toSplat);\n            }\n        }\n    }\n\n    getTargetCovarianceCompressionLevel() {\n        return this.halfPrecisionCovariancesOnGPU ? 1 : 0;\n    }\n\n    getTargetSphericalHarmonicsCompressionLevel() {\n        return Math.max(1, this.getMaximumSplatBufferCompressionLevel());\n    }\n\n    getMaximumSplatBufferCompressionLevel() {\n        let maxCompressionLevel;\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            if (i === 0 || splatBuffer.compressionLevel > maxCompressionLevel) {\n                maxCompressionLevel = splatBuffer.compressionLevel;\n            }\n        }\n        return maxCompressionLevel;\n    }\n\n    getMinimumSplatBufferCompressionLevel() {\n        let minCompressionLevel;\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            if (i === 0 || splatBuffer.compressionLevel < minCompressionLevel) {\n                minCompressionLevel = splatBuffer.compressionLevel;\n            }\n        }\n        return minCompressionLevel;\n    }\n\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, elementsPerTexel, elementsPerSplat) {\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\n\n        const startSplatTexels = startSplat * texelsPerSplat;\n        const startRow = Math.floor(startSplatTexels / textureWidth);\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\n\n        const endSplatTexels = endSplat * texelsPerSplat;\n        const endRow = Math.floor(endSplatTexels / textureWidth);\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\n\n        return {\n            'dataStart': startRowElement,\n            'dataEnd': endRowEndElement,\n            'startRow': startRow,\n            'endRow': endRow\n        };\n    }\n\n    updateDataTexture(paddedData, texture, textureSize, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement, from, to) {\n        const gl = this.renderer.getContext();\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(from, to, textureSize.x, elementsPerTexel, elementsPerSplat);\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\n        const glType = this.webGLUtils.convert(texture.type);\n        const glFormat = this.webGLUtils.convert(texture.format, texture.colorSpace);\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\n                         textureSize.x, updateHeight, glFormat, glType, updateDataView);\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\n    }\n\n    static updatePaddedCompressedCovariancesTextureData(sourceData, textureData, textureDataStartIndex, fromElement, toElement) {\n        let textureDataView = new DataView(textureData.buffer);\n        let textureDataIndex = textureDataStartIndex;\n        let sequentialCount = 0;\n        for (let i = fromElement; i <= toElement; i+=2) {\n            textureDataView.setUint16(textureDataIndex * 2, sourceData[i], true);\n            textureDataView.setUint16(textureDataIndex * 2 + 2, sourceData[i + 1], true);\n            textureDataIndex += 2;\n            sequentialCount++;\n            if (sequentialCount >= 3) {\n                textureDataIndex += 2;\n                sequentialCount = 0;\n            }\n        }\n    }\n\n    static updateCenterColorsPaddedData(from, to, centers, colors, paddedCenterColors) {\n        for (let c = from; c <= to; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\n        }\n    }\n\n    static updateScaleRotationsPaddedData(from, to, scales, rotations, paddedScaleRotations) {\n        const combinedSize = 6;\n        for (let c = from; c <= to; c++) {\n            const scaleBase = c * 3;\n            const rotationBase = c * 4;\n            const scaleRotationsBase = c * combinedSize;\n\n            paddedScaleRotations[scaleRotationsBase] = scales[scaleBase];\n            paddedScaleRotations[scaleRotationsBase + 1] = scales[scaleBase + 1];\n            paddedScaleRotations[scaleRotationsBase + 2] = scales[scaleBase + 2];\n\n            paddedScaleRotations[scaleRotationsBase + 3] = rotations[rotationBase];\n            paddedScaleRotations[scaleRotationsBase + 4] = rotations[rotationBase + 1];\n            paddedScaleRotations[scaleRotationsBase + 5] = rotations[rotationBase + 2];\n        }\n    }\n\n    updateVisibleRegion(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount();\n        const tempCenter = new THREE.Vector3();\n        if (!sinceLastBuildOnly) {\n            const avgCenter = new THREE.Vector3();\n            this.scenes.forEach((scene) => {\n                avgCenter.add(scene.splatBuffer.sceneCenter);\n            });\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\n            this.calculatedSceneCenter.copy(avgCenter);\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\n            this.material.uniformsNeedUpdate = true;\n        }\n\n        const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\n            this.getSplatCenter(i, tempCenter, false);\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\n        }\n\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\n        }\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n        this.updateVisibleRegionFadeDistance();\n    }\n\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST;\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL;\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\n        const fadeInComplete = fadeInPercentage > 0.99;\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\n\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\n        this.material.uniforms.currentTime.value = performance.now();\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\n        this.material.uniformsNeedUpdate = true;\n        this.visibleRegionChanging = !fadeInComplete;\n    }\n\n    /**\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n     *                                  every splat.\n     */\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\n        const geometry = this.geometry;\n        geometry.attributes.splatIndex.set(globalIndexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    /**\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\n     * quaternion, and scale)\n     */\n    updateTransforms() {\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            scene.updateTransform();\n        }\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY,\n                        orthographicMode, orthographicZoom, inverseFocalAdjustment) {\n            const splatCount = this.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                this.material.uniforms.orthographicMode.value = orthographicMode ? 1 : 0;\n                this.material.uniforms.orthoZoom.value = orthographicZoom;\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\n                if (this.dynamicMode) {\n                    for (let i = 0; i < this.scenes.length; i++) {\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\n                    }\n                }\n                if (this.enableOptionalEffects) {\n                    for (let i = 0; i < this.scenes.length; i++) {\n                        this.material.uniforms.sceneOpacity.value[i] = clamp(this.getScene(i).opacity, 0.0, 1.0);\n                        this.material.uniforms.sceneVisibility.value[i] = this.getScene(i).visible ? 1 : 0;\n                        this.material.uniformsNeedUpdate = true;\n                    }\n                }\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    setSplatScale(splatScale = 1) {\n        this.splatScale = splatScale;\n        this.material.uniforms.splatScale.value = splatScale;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getSplatScale() {\n        return this.splatScale;\n    }\n\n    setPointCloudModeEnabled(enabled) {\n        this.pointCloudModeEnabled = enabled;\n        this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getPointCloudModeEnabled() {\n        return this.pointCloudModeEnabled;\n    }\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\n        return totalSplatCount;\n    }\n\n    getMaxSplatCount() {\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalMaxSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\n        return totalSplatCount;\n    }\n\n    disposeDistancesComputationGPUResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.vao) {\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n            this.distancesTransformFeedback.vao = null;\n        }\n        if (this.distancesTransformFeedback.program) {\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n            this.distancesTransformFeedback.program = null;\n            this.distancesTransformFeedback.vertexShader = null;\n            this.distancesTransformFeedback.fragmentShader = null;\n        }\n        this.disposeDistancesComputationGPUBufferResources();\n        if (this.distancesTransformFeedback.id) {\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n            this.distancesTransformFeedback.id = null;\n        }\n    }\n\n    disposeDistancesComputationGPUBufferResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.centersBuffer) {\n            this.distancesTransformFeedback.centersBuffer = null;\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n        }\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n            this.distancesTransformFeedback.outDistancesBuffer = null;\n        }\n    }\n\n    /**\n     * Set the Three.js renderer used by this splat mesh\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n     */\n    setRenderer(renderer) {\n        if (renderer !== this.renderer) {\n            this.renderer = renderer;\n            const gl = this.renderer.getContext();\n            const extensions = new WebGLExtensions(gl);\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\n            extensions.init(capabilities);\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n                this.setupDistancesComputationTransformFeedback();\n                const { centers, sceneIndexes } = this.getDataForDistancesComputation(0, this.getSplatCount() - 1);\n                this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\n            }\n        }\n    }\n\n    setupDistancesComputationTransformFeedback = function() {\n\n        let currentMaxSplatCount;\n\n        return function() {\n            const maxSplatCount = this.getMaxSplatCount();\n\n            if (!this.renderer) return;\n\n            const rebuildGPUObjects = (this.lastRenderer !== this.renderer);\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\n\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\n\n            if (rebuildGPUObjects) {\n                this.disposeDistancesComputationGPUResources();\n            } else if (rebuildBuffers) {\n                this.disposeDistancesComputationGPUBufferResources();\n            }\n\n            const gl = this.renderer.getContext();\n\n            const createShader = (gl, type, source) => {\n                const shader = gl.createShader(type);\n                if (!shader) {\n                    console.error('Fatal error: gl could not create a shader object.');\n                    return null;\n                }\n\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n                if (!compiled) {\n                    let typeName = 'unknown';\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                    const errors = gl.getShaderInfoLog(shader);\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                    gl.deleteShader(shader);\n                    return null;\n                }\n\n                return shader;\n            };\n\n            let vsSource;\n            if (this.integerBasedDistancesComputation) {\n                vsSource =\n                `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint sceneIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[sceneIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            } else {\n                vsSource =\n                `#version 300 es\n                in vec4 center;\n                flat out float distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint sceneIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            }\n\n            const fsSource =\n            `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\n            }\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n            if (rebuildGPUObjects) {\n                const program = gl.createProgram();\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n                if (!vertexShader || !fragmentShader) {\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\n                }\n                gl.attachShader(program, vertexShader);\n                gl.attachShader(program, fragmentShader);\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\n                gl.linkProgram(program);\n\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n                if (!linked) {\n                    const error = gl.getProgramInfoLog(program);\n                    console.error('Fatal error: Failed to link program: ' + error);\n                    gl.deleteProgram(program);\n                    gl.deleteShader(fragmentShader);\n                    gl.deleteShader(vertexShader);\n                    throw new Error('Could not link shaders for distances computation on GPU.');\n                }\n\n                this.distancesTransformFeedback.program = program;\n                this.distancesTransformFeedback.vertexShader = vertexShader;\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\n            }\n\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            this.distancesTransformFeedback.centersLoc =\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n            if (this.dynamicMode) {\n                this.distancesTransformFeedback.sceneIndexesLoc =\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'sceneIndex');\n                for (let i = 0; i < this.scenes.length; i++) {\n                    this.distancesTransformFeedback.transformsLocs[i] =\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\n                }\n            } else {\n                this.distancesTransformFeedback.modelViewProjLoc =\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n                if (this.integerBasedDistancesComputation) {\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n                } else {\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\n                }\n\n                if (this.dynamicMode) {\n                    this.distancesTransformFeedback.sceneIndexesBuffer = gl.createBuffer();\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc);\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n                }\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\n            }\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            this.lastRenderer = this.renderer;\n            currentMaxSplatCount = maxSplatCount;\n        };\n\n    }();\n\n    /**\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n     * @param {Array<number>} centers The splat centers data\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n     */\n    updateGPUCentersBufferForDistancesComputation(isUpdate, centers, offsetSplats) {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\n        const attributeBytesPerCenter = 16;\n        const subBufferOffset = offsetSplats * attributeBytesPerCenter;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n\n        if (isUpdate) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\n        } else {\n            const maxArray = new ArrayType(this.getMaxSplatCount() * attributeBytesPerCenter);\n            maxArray.set(centers);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n     * @param {Array<number>} sceneIndexes The splat scene indexes\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n     */\n    updateGPUTransformIndexesBufferForDistancesComputation(isUpdate, sceneIndexes, offsetSplats) {\n\n        if (!this.renderer || !this.dynamicMode) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const subBufferOffset = offsetSplats * 4;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\n\n        if (isUpdate) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, sceneIndexes);\n        } else {\n            const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\n            maxArray.set(sceneIndexes);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\n     * @param {number} start Starting splat index to store\n     * @param {number} end Ending splat index to store\n     * @return {Uint32Array}\n     */\n    getSceneIndexes(start, end) {\n\n        let sceneIndexes;\n        const fillCount = end - start + 1;\n        sceneIndexes = new Uint32Array(fillCount);\n        for (let i = start; i <= end; i++) {\n            sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\n        }\n\n        return sceneIndexes;\n    }\n\n    /**\n     * Fill 'array' with the transforms for each scene in this splat mesh.\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n     */\n    fillTransformsArray = function() {\n\n        const tempArray = [];\n\n        return function(array) {\n            if (tempArray.length !== array.length) tempArray.length = array.length;\n            for (let i = 0; i < this.scenes.length; i++) {\n                const sceneTransform = this.getScene(i).transform;\n                const sceneTransformElements = sceneTransform.elements;\n                for (let j = 0; j < 16; j++) {\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\n                }\n            }\n            array.set(tempArray);\n        };\n\n    }();\n\n    computeDistancesOnGPU = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(modelViewProjMatrix, outComputedDistances) {\n            if (!this.renderer) return;\n\n            // console.time(\"gpu_compute_distances\");\n            const gl = this.renderer.getContext();\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            gl.enable(gl.RASTERIZER_DISCARD);\n\n            if (this.dynamicMode) {\n                for (let i = 0; i < this.scenes.length; i++) {\n                    tempMatrix.copy(this.getScene(i).transform);\n                    tempMatrix.premultiply(modelViewProjMatrix);\n\n                    if (this.integerBasedDistancesComputation) {\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\n                                                                                        iTransform[2], iTransform[3]);\n                    } else {\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\n                    }\n                }\n            } else {\n                if (this.integerBasedDistancesComputation) {\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n                } else {\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\n                }\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n            if (this.integerBasedDistancesComputation) {\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n            } else {\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\n            }\n\n            if (this.dynamicMode) {\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc);\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n            }\n\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            gl.beginTransformFeedback(gl.POINTS);\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n            gl.endTransformFeedback();\n\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n            gl.disable(gl.RASTERIZER_DISCARD);\n\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n\n            const promise = new Promise((resolve) => {\n                const checkSync = () => {\n                    if (this.disposed) {\n                        resolve();\n                    } else {\n                        const timeout = 0;\n                        const bitflags = 0;\n                        const status = gl.clientWaitSync(sync, bitflags, timeout);\n                        switch (status) {\n                            case gl.TIMEOUT_EXPIRED:\n                                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n                                return this.computeDistancesOnGPUSyncTimeout;\n                            case gl.WAIT_FAILED:\n                                throw new Error('should never get here');\n                            default:\n                                this.computeDistancesOnGPUSyncTimeout = null;\n                                gl.deleteSync(sync);\n                                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                                gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n                                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                                if (currentVao) gl.bindVertexArray(currentVao);\n\n                                // console.timeEnd(\"gpu_compute_distances\");\n\n                                resolve();\n                        }\n                    }\n                };\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n            });\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            return promise;\n        };\n\n    }();\n\n    /**\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n     * buffer, and the corresponding transform)\n     * @param {number} globalIndex Global splat index\n     * @param {object} paramsObj Object in which to store local data\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n     *                                       be null.\n     */\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\n            returnSceneTransform = this.dynamicMode ? false : true;\n        }\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\n    }\n\n    /**\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n     * @param {Float32Array} covariances Target storage for splat covariances\n     * @param {Float32Array} scales Target storage for splat scales\n     * @param {Float32Array} rotations Target storage for splat rotations\n     * @param {Float32Array} centers Target storage for splat centers\n     * @param {Uint8Array} colors Target storage for splat colors\n     * @param {Float32Array} sphericalHarmonics Target storage for spherical harmonics\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n     * @param {number} covarianceCompressionLevel The compression level for covariances in the destination array\n     * @param {number} sphericalHarmonicsCompressionLevel The compression level for spherical harmonics in the destination array\n     * @param {number} srcStart The start location from which to pull source data\n     * @param {number} srcEnd The end location from which to pull source data\n     * @param {number} destStart The start location from which to write data\n     */\n    fillSplatDataArrays(covariances, scales, rotations, centers, colors, sphericalHarmonics, applySceneTransform,\n                        covarianceCompressionLevel = 0, scaleRotationCompressionLevel = 0, sphericalHarmonicsCompressionLevel = 1,\n                        srcStart, srcEnd, destStart = 0) {\n        const scaleOverride = new THREE.Vector3();\n        scaleOverride.x = undefined;\n        scaleOverride.y = undefined;\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n            scaleOverride.z = undefined;\n        } else {\n            scaleOverride.z = 1;\n        }\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            if (applySceneTransform === undefined || applySceneTransform === null) {\n                applySceneTransform = this.dynamicMode ? false : true;\n            }\n\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            const sceneTransform = applySceneTransform ? scene.transform : null;\n            if (covariances) {\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform, srcStart, srcEnd, destStart, covarianceCompressionLevel);\n            }\n            if (scales || rotations) {\n                if (!scales || !rotations) {\n                    throw new Error('SplatMesh::fillSplatDataArrays() -> \"scales\" and \"rotations\" must both be valid.');\n                }\n                splatBuffer.fillSplatScaleRotationArray(scales, rotations, sceneTransform,\n                                                        srcStart, srcEnd, destStart, scaleRotationCompressionLevel, scaleOverride);\n            }\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcStart, srcEnd, destStart);\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, srcStart, srcEnd, destStart);\n            if (sphericalHarmonics) {\n                splatBuffer.fillSphericalHarmonicsArray(sphericalHarmonics, this.minSphericalHarmonicsDegree,\n                                                        sceneTransform, srcStart, srcEnd, destStart, sphericalHarmonicsCompressionLevel);\n            }\n            destStart += splatBuffer.getSplatCount();\n        }\n    }\n\n    /**\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n     * @param {number} start The index at which to start retrieving data\n     * @param {number} end The index at which to stop retrieving data\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n     * @return {Int32Array}\n     */\n    getIntegerCenters(start, end, padFour = false) {\n        const splatCount = end - start + 1;\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, undefined, undefined, undefined, undefined, start);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(splatCount * componentCount);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\n        }\n        return intCenters;\n    }\n\n    /**\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\n     * @param {number} start The index at which to start retrieving data\n     * @param {number} end The index at which to stop retrieving data\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n     * @return {Float32Array}\n     */\n    getFloatCenters(start, end, padFour = false) {\n        const splatCount = end - start + 1;\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, undefined, undefined, undefined, undefined, start);\n        if (!padFour) return floatCenters;\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n            }\n            paddedFloatCenters[i * 4 + 3] = 1.0;\n        }\n        return paddedFloatCenters;\n    }\n\n    /**\n     * Get the center for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n     */\n    getSplatCenter = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outCenter, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the scale and rotation for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n     *                                      the default behavior will apply.\n     */\n    getSplatScaleAndRotation = function() {\n\n        const paramsObj = {};\n        const scaleOverride = new THREE.Vector3();\n\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            scaleOverride.x = undefined;\n            scaleOverride.y = undefined;\n            scaleOverride.z = undefined;\n            if (this.splatRenderMode === SplatRenderMode.TwoD) scaleOverride.z = 0;\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation,\n                                                           paramsObj.sceneTransform, scaleOverride);\n        };\n\n    }();\n\n    /**\n     * Get the color for a splat.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n     */\n    getSplatColor = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outColor) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor);\n        };\n\n    }();\n\n    /**\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n     */\n    getSceneTransform(sceneIndex, outTransform) {\n        const scene = this.getScene(sceneIndex);\n        scene.updateTransform();\n        outTransform.copy(scene.transform);\n    }\n\n    /**\n     * Get the scene at 'sceneIndex'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @return {SplatScene}\n     */\n    getScene(sceneIndex) {\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n        }\n        return this.scenes[sceneIndex];\n    }\n\n    getSplatBufferForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\n    }\n\n    getSceneIndexForSplat(globalIndex) {\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\n    }\n\n    getSceneTransformForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\n    }\n\n    getSplatLocalIndex(globalIndex) {\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n    }\n\n    static getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u0007T\u0004\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0004\u0001|\u0003{\u0003\u0003} \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \n \u0005 \nH\u001b!\n \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0015j(\u0002\u0000\"\u0016A\u0002tj(\u0002\u0000\"\u0014G\u0004@\u0002 \u0005�\t\u00028 \b \u0014A\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u0014!\u000f\u000b \u0003 \u0015j \u0001 \u0016A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0017 \u0005*\u0002\u0018!\u0018 \u0005*\u0002\b!\u0019A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0017 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0019 \u0002*\u0002\u0000� \u0018 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\u000eG\u0004@ \u0005�\t\u00028 \b \u000eA\u0006tj\"\u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001!\u0011 \u000e!\u000f\u000b \u0003 \u0014j\u0002 \u0011�\u001f\u0003 \u0001 \u0015A\u0002t\"\u000eA\frj*\u0002\u0000� \u0011�\u001f\u0002 \u0001 \u000eA\brj*\u0002\u0000� \u0011�\u001f\u0000 \u0001 \u000ej*\u0002\u0000� \u0011�\u001f\u0001 \u0001 \u000eA\u0004rj*\u0002\u0000�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0017 \f!\r\u0003@\u0002 \u0017 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0018�C\u0000\u0000\u0000O]\u0004@ \u0018�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K!\u0002 \u0001!\n \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import SorterWasm from './sorter.wasm';\nimport SorterWasmNoSIMD from './sorter_no_simd.wasm';\nimport SorterWasmNonShared from './sorter_non_shared.wasm';\nimport SorterWasmNoSIMDNonShared from './sorter_no_simd_non_shared.wasm';\nimport { isIOS, getIOSSemever } from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let useSharedMemory;\n    let integerBasedSort;\n    let dynamicMode;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let sceneIndexesOffset;\n    let transformsOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let modelViewProjOffset;\n    let countsZero;\n    let sortedIndexesOut;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\n        const sortStartTime = performance.now();\n\n        if (!useSharedMemory) {\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\n            indexesToSort.set(copyIndexesToSort);\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\n            transforms.set(copyTransforms);\n            if (usePrecomputedDistances) {\n                let precomputedDistances;\n                if (integerBasedSort) {\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\n                } else {\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\n                }\n                precomputedDistances.set(copyPrecomputedDistances);\n            }\n        }\n\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\n                                         sortedIndexesOffset, sceneIndexesOffset, transformsOffset, Constants.DepthMapRange,\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\n                                         dynamicMode);\n\n        const sortMessage = {\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': 0\n        };\n        if (!useSharedMemory) {\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\n            }\n            sortedIndexesOut.set(sortedIndexes);\n            sortMessage.sortedIndexes = sortedIndexesOut;\n        }\n        const sortEndTime = performance.now();\n\n        sortMessage.sortTime = sortEndTime - sortStartTime;\n\n        self.postMessage(sortMessage);\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            sceneIndexes = e.data.sceneIndexes;\n            if (integerBasedSort) {\n                new Int32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\n                               e.data.range.count * 4).set(new Int32Array(centers));\n            } else {\n                new Float32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\n                                 e.data.range.count * 4).set(new Float32Array(centers));\n            }\n            if (dynamicMode) {\n                new Uint32Array(wasmMemory, sceneIndexesOffset + e.data.range.from * 4,\n                                e.data.range.count).set(new Uint32Array(sceneIndexes));\n            }\n            self.postMessage({\n                'centerDataSet': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n            let copyIndexesToSort;\n            let copyPrecomputedDistances;\n            let copyTransforms;\n            if (!useSharedMemory) {\n                copyIndexesToSort = e.data.sort.indexesToSort;\n                copyTransforms = e.data.sort.transforms;\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\n            }\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n            useSharedMemory = e.data.init.useSharedMemory;\n            integerBasedSort = e.data.init.integerBasedSort;\n            dynamicMode = e.data.init.dynamicMode;\n\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const matrixSize = 16 * Constants.BytesPerFloat;\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForModelViewProjectionMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredforTransformIndexes +\n                                        memoryRequiredforTransforms +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired,\n                        maximum: totalPagesRequired,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                sceneIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\n                transformsOffset = sceneIndexesOffset + memoryRequiredforTransformIndexes;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                if (useSharedMemory) {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true,\n                        'indexesToSortBuffer': wasmMemory,\n                        'indexesToSortOffset': indexesToSortOffset,\n                        'sortedIndexesBuffer': wasmMemory,\n                        'sortedIndexesOffset': sortedIndexesOffset,\n                        'precomputedDistancesBuffer': wasmMemory,\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\n                        'transformsBuffer': wasmMemory,\n                        'transformsOffset': transformsOffset\n                    });\n                } else {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true\n                    });\n                }\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount, useSharedMemory, enableSIMDInSort, integerBasedSort, dynamicMode) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    let sourceWasm = SorterWasm;\n\n    // iOS makes choosing the right WebAssembly configuration tricky :(\n    let iOSSemVer = isIOS() ? getIOSSemever() : null;\n    if (!enableSIMDInSort && !useSharedMemory) {\n        sourceWasm = SorterWasmNoSIMD;\n        if (iOSSemVer && iOSSemVer.major < 16) {\n            sourceWasm = SorterWasmNoSIMDNonShared;\n        }\n    } else if (!enableSIMDInSort) {\n        sourceWasm = SorterWasmNoSIMD;\n    } else if (!useSharedMemory) {\n        if (iOSSemVer && iOSSemVer.major < 16) {\n            sourceWasm = SorterWasmNonShared;\n        }\n    }\n\n    const sorterWasmBinaryString = atob(sourceWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            'useSharedMemory': useSharedMemory,\n            'integerBasedSort': integerBasedSort,\n            'dynamicMode': dynamicMode,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize,\n                'MaxScenes': Constants.MaxScenes\n            }\n        }\n    });\n    return worker;\n}\n","export const WebXRMode = {\n    None: 0,\n    VR: 1,\n    AR: 2\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class VRButton {\n\n    static createButton( renderer ) {\n\n        const button = document.createElement( 'button' );\n\n        function showEnterVR( /* device */ ) {\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                await renderer.xr.setSession( session );\n                button.textContent = 'EXIT VR';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'ENTER VR';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'ENTER VR';\n\n            // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n\n            const sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showWebXRNotFound() {\n\n            disableButton();\n\n            button.textContent = 'VR NOT SUPPORTED';\n\n        }\n\n        function showVRNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'VR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'VRButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\n\n                supported ? showEnterVR() : showWebXRNotFound();\n\n                if ( supported && VRButton.xrSessionIsGranted ) {\n\n                    button.click();\n\n                }\n\n            } ).catch( showVRNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n    static registerSessionGrantedListener() {\n\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\n\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\n            // throws a silent exception and aborts execution entirely.\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n            navigator.xr.addEventListener( 'sessiongranted', () => {\n\n                VRButton.xrSessionIsGranted = true;\n\n            } );\n\n        }\n\n    }\n\n}\n\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class ARButton {\n\n    static createButton( renderer, sessionInit = {} ) {\n\n        const button = document.createElement( 'button' );\n\n        function showStartAR( /* device */ ) {\n\n            if ( sessionInit.domOverlay === undefined ) {\n\n                const overlay = document.createElement( 'div' );\n                overlay.style.display = 'none';\n                document.body.appendChild( overlay );\n\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\n                svg.setAttribute( 'width', 38 );\n                svg.setAttribute( 'height', 38 );\n                svg.style.position = 'absolute';\n                svg.style.right = '20px';\n                svg.style.top = '20px';\n                svg.addEventListener( 'click', function() {\n\n                    currentSession.end();\n\n                } );\n                overlay.appendChild( svg );\n\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\n                path.setAttribute( 'stroke', '#fff' );\n                path.setAttribute( 'stroke-width', 2 );\n                svg.appendChild( path );\n\n                if ( sessionInit.optionalFeatures === undefined ) {\n\n                    sessionInit.optionalFeatures = [];\n\n                }\n\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\n                sessionInit.domOverlay = { root: overlay };\n\n            }\n\n            //\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                renderer.xr.setReferenceSpaceType( 'local' );\n\n                await renderer.xr.setSession( session );\n\n                button.textContent = 'STOP AR';\n                sessionInit.domOverlay.root.style.display = '';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'START AR';\n                sessionInit.domOverlay.root.style.display = 'none';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'START AR';\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showARNotSupported() {\n\n            disableButton();\n\n            button.textContent = 'AR NOT SUPPORTED';\n\n        }\n\n        function showARNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'AR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'ARButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\n\n                supported ? showStartAR() : showARNotSupported();\n\n            } ).catch( showARNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n}\n","export const RenderMode = {\n    Always: 0,\n    OnChange: 1,\n    Never: 2\n};\n","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\nimport { sceneFormatFromPath } from './loaders/Utils.js';\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\nimport { InfoPanel } from './ui/InfoPanel.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './splatmesh/SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime, isIOS, getIOSSemever } from './Util.js';\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\nimport { SceneFormat } from './loaders/SceneFormat.js';\nimport { WebXRMode } from './webxr/WebXRMode.js';\nimport { VRButton } from './webxr/VRButton.js';\nimport { ARButton } from './webxr/ARButton.js';\nimport { delayedExecute, nativePromiseWithExtractedComponents, abortablePromiseWithExtractedComponents } from './Util.js';\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\nimport { RenderMode } from './RenderMode.js';\nimport { LogLevel } from './LogLevel.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\nimport { SplatRenderMode } from './SplatRenderMode.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n\n    constructor(options = {}) {\n\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n        // when the viewer uses its own camera).\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n        // The camera's initial position (only used when the viewer uses its own camera).\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\n\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\n\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n        this.dropInMode = options.dropInMode || false;\n\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\n        this.useBuiltInControls = options.useBuiltInControls;\n\n        // parent element of the Three.js renderer canvas\n        this.rootElement = options.rootElement;\n\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n        // at a small cost to visual quality\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\n\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n        this.threeScene = options.threeScene;\n        // Allows for usage of an external Three.js renderer\n        this.renderer = options.renderer;\n        // Allows for usage of an external Three.js camera\n        this.camera = options.camera;\n\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n        // Currently this means pre-computing splat distances from the camera on the GPU\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\n\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n        // overflow in larger scenes.\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\n            options.integerBasedSort = true;\n        }\n        this.integerBasedSort = options.integerBasedSort;\n\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n        // https://web.dev/articles/cross-origin-isolation-guide\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n        // loading the application. More information is available in the README.\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n        // SplatMesh.getSplatCenter() by default.\n        this.dynamicScene = !!options.dynamicScene;\n\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = options.antialiased || false;\n\n        this.webXRMode = options.webXRMode || WebXRMode.None;\n        if (this.webXRMode !== WebXRMode.None) {\n            this.gpuAcceleratedSort = false;\n        }\n        this.webXRActive = false;\n\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\n        // it will only render when something in the scene has changed.\n        this.renderMode = options.renderMode || RenderMode.Always;\n\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\n        // and a fast fade-in for non progressively loaded scenes.\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\n\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\n        this.focalAdjustment = options.focalAdjustment || 1.0;\n\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 1024;\n\n        // The verbosity of console logging\n        this.logLevel = options.logLevel || LogLevel.None;\n\n        // Degree of spherical harmonics to utilize in rendering splats (assuming the data is present in the splat scene).\n        // Valid values are 0 - 2. Default value is 0.\n        this.sphericalHarmonicsDegree = options.sphericalHarmonicsDegree || 0;\n\n        // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\n        // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\n        // that are enabled by the 'dynamicScene' parameter.\n        this.enableOptionalEffects = options.enableOptionalEffects || false;\n\n        // Enable the usage of SIMD WebAssembly instructions for the splat sort\n        if (options.enableSIMDInSort === undefined || options.enableSIMDInSort === null) options.enableSIMDInSort = true;\n        this.enableSIMDInSort = options.enableSIMDInSort;\n\n        // Level to compress PLY files when loading them for direct rendering (not exporting to .ksplat)\n        if (options.plyInMemoryCompressionLevel === undefined || options.plyInMemoryCompressionLevel === null) {\n            options.plyInMemoryCompressionLevel = 2;\n        }\n        this.plyInMemoryCompressionLevel = options.plyInMemoryCompressionLevel;\n\n        // When true, the intermediate splat data that is the result of decompressing splat bufffer(s) and is used to\n        // populate the data textures will be freed. This will reduces memory usage, but if that data needs to be modified\n        // it will need to be re-populated from the splat buffer(s). Default is false.\n        if (options.freeIntermediateSplatData === undefined || options.freeIntermediateSplatData === null) {\n            options.freeIntermediateSplatData = false;\n        }\n        this.freeIntermediateSplatData = options.freeIntermediateSplatData;\n\n        // It appears that for certain iOS versions, special actions need to be taken with the\n        // usage of SIMD instructions and shared memory\n        if (isIOS()) {\n            const semver = getIOSSemever();\n            if (semver.major < 17) {\n                this.enableSIMDInSort = false;\n            }\n            if (semver.major < 16) {\n                this.sharedMemoryForWorkers = false;\n            }\n        }\n\n        // Tell the viewer how to render the splats\n        if (options.splatRenderMode === undefined || options.splatRenderMode === null) {\n            options.splatRenderMode = SplatRenderMode.ThreeD;\n        }\n        this.splatRenderMode = options.splatRenderMode;\n\n        this.onSplatMeshChangedCallback = null;\n        this.createSplatMesh();\n\n        this.controls = null;\n        this.perspectiveControls = null;\n        this.orthographicControls = null;\n\n        this.orthographicCamera = null;\n        this.perspectiveCamera = null;\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n        this.sortWorkerTransforms = null;\n        this.runAfterNextSort = [];\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderReady = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n\n        this.startInOrthographicMode = false;\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n        this.consecutiveRenderFrames = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.resizeObserver = null;\n        this.mouseMoveListener = null;\n        this.mouseDownListener = null;\n        this.mouseUpListener = null;\n        this.keyDownListener = null;\n\n        this.sortPromise = null;\n        this.sortPromiseResolver = null;\n        this.splatSceneDownloadPromises = {};\n        this.splatSceneDownloadAndBuildPromise = null;\n        this.splatSceneRemovalPromise = null;\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\n        this.loadingSpinner.hide();\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\n        this.loadingProgressBar.hide();\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\n        this.infoPanel.hide();\n\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\n\n        this.initialized = false;\n        this.disposing = false;\n        this.disposed = false;\n        this.disposePromise = null;\n        if (!this.dropInMode) this.init();\n    }\n\n    createSplatMesh() {\n        this.splatMesh = new SplatMesh(this.splatRenderMode, this.dynamicScene, this.enableOptionalEffects,\n                                       this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio, this.gpuAcceleratedSort,\n                                       this.integerBasedSort, this.antialiased, this.maxScreenSpaceSplatSize, this.logLevel,\n                                       this.sphericalHarmonicsDegree);\n        this.splatMesh.frustumCulled = false;\n        if (this.onSplatMeshChangedCallback) this.onSplatMeshChangedCallback();\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement) {\n            if (!this.usingExternalRenderer) {\n                this.rootElement = document.createElement('div');\n                this.rootElement.style.width = '100%';\n                this.rootElement.style.height = '100%';\n                this.rootElement.style.position = 'absolute';\n                document.body.appendChild(this.rootElement);\n            } else {\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\n            }\n        }\n\n        this.setupCamera();\n        this.setupRenderer();\n        this.setupWebXR();\n        this.setupControls();\n        this.setupEventHandlers();\n\n        this.threeScene = this.threeScene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.threeScene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        this.loadingProgressBar.setContainer(this.rootElement);\n        this.loadingSpinner.setContainer(this.rootElement);\n        this.infoPanel.setContainer(this.rootElement);\n\n        this.initialized = true;\n    }\n\n    setupCamera() {\n        if (!this.usingExternalCamera) {\n            const renderDimensions = new THREE.Vector2();\n            this.getRenderDimensions(renderDimensions);\n\n            this.perspectiveCamera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 1000);\n            this.orthographicCamera = new THREE.OrthographicCamera(renderDimensions.x / -2, renderDimensions.x / 2,\n                                                                   renderDimensions.y / 2, renderDimensions.y / -2, 0.1, 1000 );\n            this.camera = this.startInOrthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n    }\n\n    setupRenderer() {\n        if (!this.usingExternalRenderer) {\n            const renderDimensions = new THREE.Vector2();\n            this.getRenderDimensions(renderDimensions);\n\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n            this.resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n                this.forceRenderNextFrame();\n            });\n            this.resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n    }\n\n    setupWebXR() {\n        if (this.webXRMode) {\n            if (this.webXRMode === WebXRMode.VR) {\n                this.rootElement.appendChild(VRButton.createButton(this.renderer));\n            } else if (this.webXRMode === WebXRMode.AR) {\n                this.rootElement.appendChild(ARButton.createButton(this.renderer));\n            }\n            this.renderer.xr.addEventListener('sessionstart', (e) => {\n                this.webXRActive = true;\n            });\n            this.renderer.xr.addEventListener('sessionend', (e) => {\n                this.webXRActive = false;\n            });\n            this.renderer.xr.enabled = true;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n    }\n\n    setupControls() {\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            if (!this.usingExternalCamera) {\n                this.perspectiveControls = new OrbitControls(this.perspectiveCamera, this.renderer.domElement);\n                this.orthographicControls = new OrbitControls(this.orthographicCamera, this.renderer.domElement);\n            } else {\n                if (this.camera.isOrthographicCamera) {\n                    this.orthographicControls = new OrbitControls(this.camera, this.renderer.domElement);\n                } else {\n                    this.perspectiveControls = new OrbitControls(this.camera, this.renderer.domElement);\n                }\n            }\n            for (let controls of [this.orthographicControls, this.perspectiveControls,]) {\n                if (controls) {\n                    controls.listenToKeyEvents(window);\n                    controls.rotateSpeed = 0.5;\n                    controls.maxPolarAngle = Math.PI * .75;\n                    controls.minPolarAngle = 0.1;\n                    controls.enableDamping = true;\n                    controls.dampingFactor = 0.05;\n                    controls.target.copy(this.initialCameraLookAt);\n                    controls.update();\n                }\n            }\n            this.controls = this.camera.isOrthographicCamera ? this.orthographicControls : this.perspectiveControls;\n            this.controls.update();\n        }\n    }\n\n    setupEventHandlers() {\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            this.mouseMoveListener = this.onMouseMove.bind(this);\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\n            this.mouseUpListener = this.onMouseUp.bind(this);\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\n            this.keyDownListener = this.onKeyDown.bind(this);\n            window.addEventListener('keydown', this.keyDownListener, false);\n        }\n    }\n\n    removeEventHandlers() {\n        if (this.useBuiltInControls) {\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\n            this.mouseMoveListener = null;\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\n            this.mouseDownListener = null;\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\n            this.mouseUpListener = null;\n            window.removeEventListener('keydown', this.keyDownListener);\n            this.keyDownListener = null;\n        }\n    }\n\n    setRenderMode(renderMode) {\n        this.renderMode = renderMode;\n    }\n\n    onSplatMeshChanged(callback) {\n        this.onSplatMeshChangedCallback = callback;\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'KeyG':\n                    this.focalAdjustment += 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'KeyF':\n                    this.focalAdjustment -= 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyU':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.show();\n                    } else {\n                        this.infoPanel.hide();\n                    }\n                break;\n                case 'KeyO':\n                    if (!this.usingExternalCamera) {\n                        this.setOrthographicMode(!this.camera.isOrthographicCamera);\n                    }\n                break;\n                case 'KeyP':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());\n                    }\n                break;\n                case 'Equal':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\n                    }\n                break;\n                case 'Minus':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0));\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const clickOffset = new THREE.Vector2();\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (wasClick) {\n                this.onMouseClick(mouse);\n            }\n        };\n\n    }();\n\n    onMouseClick(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n        this.checkForFocalPointChange();\n    }\n\n    checkForFocalPointChange = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function() {\n            if (!this.transitioningCameraTarget) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const hit = outHits[0];\n                    const intersectionPoint = hit.origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    setOrthographicMode(orthographicMode) {\n        if (orthographicMode === this.camera.isOrthographicCamera) return;\n        const fromCamera = this.camera;\n        const toCamera = orthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n        toCamera.position.copy(fromCamera.position);\n        toCamera.up.copy(fromCamera.up);\n        toCamera.rotation.copy(fromCamera.rotation);\n        toCamera.quaternion.copy(fromCamera.quaternion);\n        toCamera.matrix.copy(fromCamera.matrix);\n        this.camera = toCamera;\n\n        if (this.controls) {\n\n            const resetControls = (controls) => {\n                controls.saveState();\n                controls.reset();\n            };\n\n            const fromControls = this.controls;\n            const toControls = orthographicMode ? this.orthographicControls : this.perspectiveControls;\n\n            resetControls(toControls);\n            resetControls(fromControls);\n\n            toControls.target.copy(fromControls.target);\n            if (orthographicMode) {\n                Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\n            } else {\n                Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\n            }\n            this.controls = toControls;\n            this.camera.lookAt(this.controls.target);\n        }\n    }\n\n    static setCameraPositionFromZoom = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(positionCamera, zoomedCamera, controls) {\n            const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\n            tempVector.copy(controls.target).sub(positionCamera.position).normalize().multiplyScalar(toLookAtDistance).negate();\n            positionCamera.position.copy(controls.target).add(tempVector);\n        };\n\n    }();\n\n\n    static setCameraZoomFromPosition = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(zoomCamera, positionZamera, controls) {\n            const toLookAtDistance = tempVector.copy(controls.target).sub(positionZamera.position).length();\n            zoomCamera.zoom = 1 / (toLookAtDistance * .001);\n        };\n\n    }();\n\n    updateSplatMesh = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.splatMesh) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.splatMesh.updateTransforms();\n                this.getRenderDimensions(renderDimensions);\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.x;\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.y;\n\n                const focalMultiplier = this.camera.isOrthographicCamera ? (1.0 / this.devicePixelRatio) : 1.0;\n                const focalAdjustment = this.focalAdjustment * focalMultiplier;\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\n\n                this.adjustForWebXRStereo(renderDimensions);\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment, focalLengthY * focalAdjustment,\n                                              this.camera.isOrthographicCamera, this.camera.zoom || 1.0, inverseFocalAdjustment);\n            }\n        };\n\n    }();\n\n    adjustForWebXRStereo(renderDimensions) {\n        // TODO: Figure out a less hacky way to determine if stereo rendering is active\n        if (this.camera && this.webXRActive) {\n            const xrCamera = this.renderer.xr.getCamera();\n            const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\n            const cameraProj00 = this.camera.projectionMatrix.elements[0];\n            renderDimensions.x *= (cameraProj00 / xrCameraProj00);\n        }\n    }\n\n    isLoadingOrUnloading() {\n        return Object.keys(this.splatSceneDownloadPromises).length > 0 || this.splatSceneDownloadAndBuildPromise !== null ||\n                           this.splatSceneRemovalPromise !== null;\n    }\n\n    isDisposingOrDisposed() {\n        return this.disposing || this.disposed;\n    }\n\n    addSplatSceneDownloadPromise(promise) {\n        this.splatSceneDownloadPromises[promise.id] = promise;\n    }\n\n    removeSplatSceneDownloadPromise(promise) {\n        delete this.splatSceneDownloadPromises[promise.id];\n    }\n\n    setSplatSceneDownloadAndBuildPromise(promise) {\n        this.splatSceneDownloadAndBuildPromise = promise;\n    }\n\n    clearSplatSceneDownloadAndBuildPromise() {\n        this.splatSceneDownloadAndBuildPromise = null;\n    }\n\n    /**\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        if (options.progressiveLoad && this.splatMesh.scenes && this.splatMesh.scenes.length > 0) {\n            console.log('addSplatScene(): \"progressiveLoad\" option ignore because there are multiple splat scenes');\n            options.progressiveLoad = false;\n        }\n\n        const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(path);\n        const progressiveLoad = Viewer.isProgressivelyLoadable(format) && options.progressiveLoad;\n        const showLoadingUI = (options.showLoadingUI !== undefined && options.showLoadingUI !== null) ? options.showLoadingUI : true;\n\n        let loadingUITaskId = null;\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n        }\n        const hideLoadingUI = () => {\n            this.loadingProgressBar.hide();\n            this.loadingSpinner.removeAllTasks();\n        };\n\n        const onProgressUIUpdate = (percentComplete, percentCompleteLabel, loaderStatus) => {\n            if (showLoadingUI) {\n                if (loaderStatus === LoaderStatus.Downloading) {\n                    if (percentComplete == 100) {\n                        this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Download complete!');\n                    } else {\n                        if (progressiveLoad) {\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Downloading splats...');\n                        } else {\n                            const suffix = percentCompleteLabel ? `: ${percentCompleteLabel}` : `...`;\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, `Downloading${suffix}`);\n                        }\n                    }\n                } else if (loaderStatus === LoaderStatus.Processing) {\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Processing splats...');\n                }\n            }\n        };\n\n        let downloadDone = false;\n        let downloadedPercentage = 0;\n        const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\n            if (showLoadingUI) {\n                if (firstBuild && progressiveLoad || finalBuild && !progressiveLoad) {\n                    this.loadingSpinner.removeTask(loadingUITaskId);\n                    if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\n                }\n                if (progressiveLoad) {\n                    if (finalBuild) {\n                        downloadDone = true;\n                        this.loadingProgressBar.hide();\n                    } else {\n                        this.loadingProgressBar.setProgress(downloadedPercentage);\n                    }\n                }\n            }\n        };\n\n        const onProgress = (percentComplete, percentCompleteLabel, loaderStatus) => {\n            downloadedPercentage = percentComplete;\n            onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\n            if (options.onProgress) options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\n        };\n\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\n            if (!progressiveLoad && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n            const addSplatBufferOptions = {\n                'rotation': options.rotation || options.orientation,\n                'position': options.position,\n                'scale': options.scale,\n                'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\n            };\n            return this.addSplatBuffers([splatBuffer], [addSplatBufferOptions],\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI,\n                                         progressiveLoad, progressiveLoad).then(() => {\n                if (!progressiveLoad && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\n                splatBuffersAddedUIUpdate(firstBuild, finalBuild);\n            });\n        };\n\n        const loadFunc = progressiveLoad ? this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this) :\n                                           this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this);\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this), onProgress, hideLoadingUI.bind(this));\n    }\n\n    /**\n     * Download a single splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\n     * by calling 'buildFunc' -- all before displaying the scene. Also sets/clears relevant instance synchronization objects,\n     * and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n     * @param {function} onException Function to be called when exception occurs\n     * @return {AbortablePromise}\n     */\n    downloadAndBuildSingleSplatSceneStandardLoad(path, format, splatAlphaRemovalThreshold, buildFunc, onProgress, onException) {\n\n        const downloadAndBuildPromise = nativePromiseWithExtractedComponents();\n\n        const downloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false, undefined, format)\n        .then((splatBuffer) => {\n            this.removeSplatSceneDownloadPromise(downloadPromise);\n            return buildFunc(splatBuffer, true, true).then(() => {\n                downloadAndBuildPromise.resolve();\n                this.clearSplatSceneDownloadAndBuildPromise();\n            });\n        })\n        .catch((e) => {\n            if (onException) onException();\n            downloadAndBuildPromise.reject();\n            this.clearSplatSceneDownloadAndBuildPromise();\n            this.removeSplatSceneDownloadPromise(downloadPromise);\n            if (!(e instanceof AbortedPromiseError)) {\n                throw (new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\n            }\n        });\n\n        this.addSplatSceneDownloadPromise(downloadPromise);\n        this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise.promise);\n\n        return downloadAndBuildPromise.promise;\n    }\n\n    /**\n     * Download a single splat scene and convert to splat buffer in a progressive manner, allowing rendering as the file downloads.\n     * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\n     * @param {function} onDownloadProgress Function to be called as file data are received\n     * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\n     * @return {AbortablePromise}\n     */\n    downloadAndBuildSingleSplatSceneProgressiveLoad(path, format, splatAlphaRemovalThreshold, buildFunc,\n                                                    onDownloadProgress, onDownloadException) {\n        let progressiveLoadedSectionBuildCount = 0;\n        let progressiveLoadedSectionBuilding = false;\n        const queuedProgressiveLoadSectionBuilds = [];\n\n        const checkAndBuildProgressiveLoadSections = () => {\n            if (queuedProgressiveLoadSectionBuilds.length > 0 &&\n                !progressiveLoadedSectionBuilding &&\n                !this.isDisposingOrDisposed()) {\n                progressiveLoadedSectionBuilding = true;\n                const queuedBuild = queuedProgressiveLoadSectionBuilds.shift();\n                buildFunc(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\n                .then(() => {\n                    progressiveLoadedSectionBuilding = false;\n                    if (queuedBuild.firstBuild) {\n                        progressiveLoadFirstSectionBuildPromise.reject = null;\n                        progressiveLoadFirstSectionBuildPromise.resolve();\n                    } else if (queuedBuild.finalBuild) {\n                        splatSceneDownloadAndBuildPromise.resolve();\n                        this.clearSplatSceneDownloadAndBuildPromise();\n                    }\n                    if (queuedProgressiveLoadSectionBuilds.length > 0) {\n                        delayedExecute(() => checkAndBuildProgressiveLoadSections());\n                    }\n                });\n            }\n        };\n\n        const onProgressiveLoadSectionProgress = (splatBuffer, finalBuild) => {\n            if (!this.isDisposingOrDisposed()) {\n                if (finalBuild || queuedProgressiveLoadSectionBuilds.length === 0 ||\n                    splatBuffer.getSplatCount() > queuedProgressiveLoadSectionBuilds[0].splatBuffer.getSplatCount()) {\n                    queuedProgressiveLoadSectionBuilds.push({\n                        splatBuffer,\n                        firstBuild: progressiveLoadedSectionBuildCount === 0,\n                        finalBuild\n                    });\n                    progressiveLoadedSectionBuildCount++;\n                    checkAndBuildProgressiveLoadSections();\n                }\n            }\n        };\n\n        let splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onDownloadProgress, true,\n                                                                             onProgressiveLoadSectionProgress, format);\n\n        const progressiveLoadFirstSectionBuildPromise = abortablePromiseWithExtractedComponents(splatSceneDownloadPromise.abortHandler);\n        const splatSceneDownloadAndBuildPromise = abortablePromiseWithExtractedComponents();\n\n        this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        this.setSplatSceneDownloadAndBuildPromise(splatSceneDownloadAndBuildPromise.promise);\n\n        splatSceneDownloadPromise.then(() => {\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        })\n        .catch((e) => {\n            this.clearSplatSceneDownloadAndBuildPromise();\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n            if (!(e instanceof AbortedPromiseError)) {\n                splatSceneDownloadAndBuildPromise.reject(e);\n                if (progressiveLoadFirstSectionBuildPromise.reject) progressiveLoadFirstSectionBuildPromise.reject(e);\n                if (onDownloadException) onDownloadException(e);\n            }\n        });\n\n        return progressiveLoadFirstSectionBuildPromise.promise;\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        const fileCount = sceneOptions.length;\n        const percentComplete = [];\n\n        let loadingUITaskId;\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n        }\n\n        const onLoadProgress = (fileIndex, percent, percentLabel, loaderStatus) => {\n            percentComplete[fileIndex] = percent;\n            let totalPercent = 0;\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\n            totalPercent = totalPercent / fileCount;\n            percentLabel = `${totalPercent.toFixed(2)}%`;\n            if (showLoadingUI) {\n                if (loaderStatus === LoaderStatus.Downloading) {\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, totalPercent == 100 ?\n                                                          `Download complete!` : `Downloading: ${percentLabel}`);\n                }\n            }\n            if (onProgress) onProgress(totalPercent, percentLabel, loaderStatus);\n        };\n\n        const downloadPromises = [];\n        const nativeLoadPromises = [];\n        const abortHandlers = [];\n        for (let i = 0; i < sceneOptions.length; i++) {\n            const options = sceneOptions[i];\n            const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(options.path);\n            const downloadPromise = this.downloadSplatSceneToSplatBuffer(options.path, options.splatAlphaRemovalThreshold,\n                                                                         onLoadProgress.bind(this, i), false, undefined, format);\n            abortHandlers.push(downloadPromise.abortHandler);\n            downloadPromises.push(downloadPromise);\n            nativeLoadPromises.push(downloadPromise.promise);\n            this.addSplatSceneDownloadPromise(downloadPromise);\n        }\n\n        const downloadPromise = new AbortablePromise((resolve, reject) => {\n            Promise.all(nativeLoadPromises)\n            .then((splatBuffers) => {\n                if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\n                if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI, false, false).then(() => {\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\n                    this.clearSplatSceneDownloadAndBuildPromise();\n                    resolve();\n                });\n            })\n            .catch((e) => {\n                if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\n                this.clearSplatSceneDownloadAndBuildPromise();\n                if (!(e instanceof AbortedPromiseError)) {\n                    reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\n                } else {\n                    resolve();\n                }\n            })\n            .finally(() => {\n                for (let downloadPromise of downloadPromises) {\n                    this.removeSplatSceneDownloadPromise(downloadPromise);\n                }\n            });\n        }, () => {\n            for (let abortHandler of abortHandlers) abortHandler();\n        });\n        this.setSplatSceneDownloadAndBuildPromise(downloadPromise);\n        return downloadPromise;\n    }\n\n    /**\n     * Download a splat scene and convert to SplatBuffer instance.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n     *                                            value (valid range: 0 - 255), defaults to 1\n     *\n     * @param {function} onProgress Function to be called as file data are received\n     * @param {boolean} progressiveBuild Construct file sections into splat buffers as they are downloaded\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\n     * @param {string} format File format of the scene\n     * @return {AbortablePromise}\n     */\n    downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\n                                    progressiveBuild = false, onSectionBuilt = undefined, format) {\n        if (format === SceneFormat.Splat) {\n            return SplatLoader.loadFromURL(path, onProgress, progressiveBuild,\n                                           onSectionBuilt, splatAlphaRemovalThreshold, 0, false);\n        } else if (format === SceneFormat.KSplat) {\n            return KSplatLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt);\n        } else if (format === SceneFormat.Ply) {\n            return PlyLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt,\n                                         splatAlphaRemovalThreshold, this.plyInMemoryCompressionLevel, this.sphericalHarmonicsDegree);\n        }\n\n        throw new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`);\n    }\n\n    static isProgressivelyLoadable(format) {\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n     * This function will terminate the existing sort worker (if there is one).\n     */\n    addSplatBuffers = function() {\n\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true, showLoadingUI = true,\n                        showLoadingUIForSplatTreeBuild = true, replaceExisting = false,\n                        enableRenderBeforeFirstSort = false, preserveVisibleRegion = true) {\n\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\n\n            this.splatRenderReady = false;\n            let splatProcessingTaskId = null;\n\n            const removeSplatProcessingTask = () => {\n                if (splatProcessingTaskId !== null) {\n                    this.loadingSpinner.removeTask(splatProcessingTaskId);\n                    splatProcessingTaskId = null;\n                }\n            };\n\n            const finish = (buildResults, resolver) => {\n                if (this.isDisposingOrDisposed()) return;\n\n                // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs splat centers and\n                // transform indexes so that it can calculate those distance values.\n                if (!this.gpuAcceleratedSort && this.sortWorker) {\n                    this.sortWorker.postMessage({\n                        'centers': buildResults.centers.buffer,\n                        'sceneIndexes': buildResults.sceneIndexes.buffer,\n                        'range': {\n                            'from': buildResults.from,\n                            'to': buildResults.to,\n                            'count': buildResults.count\n                        }\n                    });\n                }\n\n                this.updateSplatSort(true);\n\n                if (!this.sortWorker) {\n                    this.splatRenderReady = true;\n                    removeSplatProcessingTask();\n                    resolver();\n                } else {\n                    if (enableRenderBeforeFirstSort) {\n                        this.splatRenderReady = true;\n                    } else {\n                        this.runAfterNextSort.push(() => {\n                            this.splatRenderReady = true;\n                        });\n                    }\n                    this.runAfterNextSort.push(() => {\n                        removeSplatProcessingTask();\n                        resolver();\n                    });\n                }\n            };\n\n            return new Promise((resolve) => {\n                if (showLoadingUI) {\n                    splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\n                }\n                delayedExecute(() => {\n                    if (this.isDisposingOrDisposed()) {\n                        resolve();\n                    } else {\n                        const buildResults = this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild,\n                                                                        showLoadingUIForSplatTreeBuild, replaceExisting,\n                                                                        preserveVisibleRegion);\n                        const maxSplatCount = this.splatMesh.getMaxSplatCount();\n                        if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) this.disposeSortWorker();\n                        const sortWorkerSetupPromise = (!this.sortWorker && maxSplatCount > 0) ?\n                                                         this.setupSortWorker(this.splatMesh) : Promise.resolve();\n                        sortWorkerSetupPromise.then(() => {\n                            finish(buildResults, resolve);\n                        });\n                    }\n                }, true);\n            });\n        };\n\n    }();\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. By default, this function is additive;\n     * all splat buffers contained by the viewer's splat mesh before calling this function will be preserved. This behavior can be\n     * changed by passing 'true' for 'replaceExisting'.\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    addSplatBuffersToMesh = function() {\n\n        let splatOptimizingTaskId;\n\n        return function(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingUIForSplatTreeBuild = false,\n                        replaceExisting = false, preserveVisibleRegion = true) {\n            if (this.isDisposingOrDisposed()) return;\n            let allSplatBuffers = [];\n            let allSplatBufferOptions = [];\n            if (!replaceExisting) {\n                allSplatBuffers = this.splatMesh.scenes.map((scene) => scene.splatBuffer) || [];\n                allSplatBufferOptions = this.splatMesh.sceneOptions ? this.splatMesh.sceneOptions.map((sceneOptions) => sceneOptions) : [];\n            }\n            allSplatBuffers.push(...splatBuffers);\n            allSplatBufferOptions.push(...splatBufferOptions);\n            if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n            const onSplatTreeIndexesUpload = (finished) => {\n                if (this.isDisposingOrDisposed()) return;\n                const splatCount = this.splatMesh.getSplatCount();\n                if (showLoadingUIForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\n                    if (!finished && !splatOptimizingTaskId) {\n                        this.loadingSpinner.setMinimized(true, true);\n                        splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing splats...');\n                    }\n                }\n            };\n            const onSplatTreeReady = (finished) => {\n                if (this.isDisposingOrDisposed()) return;\n                if (finished && splatOptimizingTaskId) {\n                    this.loadingSpinner.removeTask(splatOptimizingTaskId);\n                    splatOptimizingTaskId = null;\n                }\n            };\n            const buildResults = this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild, onSplatTreeIndexesUpload,\n                                                      onSplatTreeReady, preserveVisibleRegion);\n            if (finalBuild && this.freeIntermediateSplatData) this.splatMesh.freeIntermediateSplatData();\n            return buildResults;\n        };\n\n    }();\n\n    /**\n     * Set up the splat sorting web worker.\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n     * @return {Promise}\n     */\n    setupSortWorker(splatMesh) {\n        if (this.isDisposingOrDisposed()) return;\n        return new Promise((resolve) => {\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\n            const splatCount = splatMesh.getSplatCount();\n            const maxSplatCount = splatMesh.getMaxSplatCount();\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers, this.enableSIMDInSort,\n                                               this.integerBasedSort, this.splatMesh.dynamicMode);\n            this.sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    if (this.sharedMemoryForWorkers) {\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    } else {\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\n                    }\n                    this.lastSortTime = e.data.sortTime;\n                    this.sortPromiseResolver();\n                    this.sortPromiseResolver = null;\n                    this.forceRenderNextFrame();\n                    if (this.runAfterNextSort.length > 0) {\n                        this.runAfterNextSort.forEach((func) => {\n                            func();\n                        });\n                        this.runAfterNextSort.length = 0;\n                    }\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    if (this.logLevel >= LogLevel.Info) console.log('Sorting web worker WASM setup complete.');\n                    if (this.sharedMemoryForWorkers) {\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\n                                                                                     e.data.precomputedDistancesOffset,\n                                                                                     maxSplatCount);\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\n                    } else {\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\n                    }\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                    this.sortWorker.maxSplatCount = maxSplatCount;\n\n                    if (this.logLevel >= LogLevel.Info) {\n                        console.log('Sorting web worker ready.');\n                        const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                        const covariancesTextureSize = splatDataTextures.covariances.size;\n                        const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                        console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                        console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    }\n\n                    resolve();\n                }\n            };\n        });\n    }\n\n    disposeSortWorker() {\n        if (this.sortWorker) this.sortWorker.terminate();\n        this.sortWorker = null;\n        this.sortPromise = null;\n        if (this.sortPromiseResolver) {\n            this.sortPromiseResolver();\n            this.sortPromiseResolver = null;\n        }\n        this.sortRunning = false;\n    }\n\n    removeSplatScene(indexToRemove, showLoadingUI = true) {\n        return this.removeSplatScenes([indexToRemove], showLoadingUI);\n    }\n\n    removeSplatScenes(indexesToRemove, showLoadingUI = true) {\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot remove splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot remove splat scene after dispose() is called.');\n        }\n\n        let sortPromise;\n\n        this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\n            let revmovalTaskId;\n\n            if (showLoadingUI) {\n                this.loadingSpinner.removeAllTasks();\n                this.loadingSpinner.show();\n                revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\n            }\n\n            const checkAndHideLoadingUI = () => {\n                if (showLoadingUI) {\n                    this.loadingSpinner.hide();\n                    this.loadingSpinner.removeTask(revmovalTaskId);\n                }\n            };\n\n            const onDone = (error) => {\n                checkAndHideLoadingUI();\n                this.splatSceneRemovalPromise = null;\n                if (!error) resolve();\n                else reject(error);\n            };\n\n            const checkForEarlyExit = () => {\n                if (this.isDisposingOrDisposed()) {\n                    onDone();\n                    return true;\n                }\n                return false;\n            };\n\n            sortPromise = this.sortPromise || Promise.resolve();\n            sortPromise.then(() => {\n                if (checkForEarlyExit()) return;\n                const savedSplatBuffers = [];\n                const savedSceneOptions = [];\n                const savedSceneTransformComponents = [];\n                for (let i = 0; i < this.splatMesh.scenes.length; i++) {\n                    let shouldRemove = false;\n                    for (let indexToRemove of indexesToRemove) {\n                        if (indexToRemove === i) {\n                            shouldRemove = true;\n                            break;\n                        }\n                    }\n                    if (!shouldRemove) {\n                        const scene = this.splatMesh.scenes[i];\n                        savedSplatBuffers.push(scene.splatBuffer);\n                        savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\n                        savedSceneTransformComponents.push({\n                            'position': scene.position.clone(),\n                            'quaternion': scene.quaternion.clone(),\n                            'scale': scene.scale.clone()\n                        });\n                    }\n                }\n                this.disposeSortWorker();\n                this.splatMesh.dispose();\n                this.sceneRevealMode = SceneRevealMode.Instant;\n                this.createSplatMesh();\n                this.addSplatBuffers(savedSplatBuffers, savedSceneOptions, true, false, true)\n                .then(() => {\n                    if (checkForEarlyExit()) return;\n                    checkAndHideLoadingUI();\n                    this.splatMesh.scenes.forEach((scene, index) => {\n                        scene.position.copy(savedSceneTransformComponents[index].position);\n                        scene.quaternion.copy(savedSceneTransformComponents[index].quaternion);\n                        scene.scale.copy(savedSceneTransformComponents[index].scale);\n                    });\n                    this.splatMesh.updateTransforms();\n                    this.splatRenderReady = false;\n                    this.updateSplatSort(true)\n                    .then(() => {\n                        if (checkForEarlyExit()) {\n                            this.splatRenderReady = true;\n                            return;\n                        }\n                        sortPromise = this.sortPromise || Promise.resolve();\n                        sortPromise.then(() => {\n                            this.splatRenderReady = true;\n                            onDone();\n                        });\n                    });\n                })\n                .catch((e) => {\n                    onDone(e);\n                });\n            });\n        });\n\n        return this.splatSceneRemovalPromise;\n    }\n\n    /**\n     * Start self-driven mode\n     */\n    start() {\n        if (this.selfDrivenMode) {\n            if (this.webXRMode) {\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\n            } else {\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n            }\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    /**\n     * Stop self-driven mode\n     */\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            if (!this.webXRMode) {\n                cancelAnimationFrame(this.requestFrameId);\n            }\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    /**\n     * Dispose of all resources held directly and indirectly by this viewer.\n     */\n    async dispose() {\n        if (this.isDisposingOrDisposed()) return this.disposePromise;\n\n        let waitPromises = [];\n        let promisesToAbort = [];\n        for (let promiseKey in this.splatSceneDownloadPromises) {\n            if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\n                const downloadPromiseToAbort = this.splatSceneDownloadPromises[promiseKey];\n                promisesToAbort.push(downloadPromiseToAbort);\n                waitPromises.push(downloadPromiseToAbort.promise);\n            }\n        }\n        if (this.sortPromise) {\n            waitPromises.push(this.sortPromise);\n        }\n\n        this.disposing = true;\n        this.disposePromise = Promise.all(waitPromises).finally(() => {\n            this.stop();\n            if (this.controls) {\n                this.controls.dispose();\n                this.controls = null;\n            }\n            if (this.splatMesh) {\n                this.splatMesh.dispose();\n                this.splatMesh = null;\n            }\n            if (this.sceneHelper) {\n                this.sceneHelper.dispose();\n                this.sceneHelper = null;\n            }\n            if (this.resizeObserver) {\n                this.resizeObserver.unobserve(this.rootElement);\n                this.resizeObserver = null;\n            }\n            this.disposeSortWorker();\n            this.removeEventHandlers();\n\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.setContainer(null);\n            this.loadingProgressBar.hide();\n            this.loadingProgressBar.setContainer(null);\n            this.infoPanel.setContainer(null);\n\n            this.camera = null;\n            this.threeScene = null;\n            this.splatRenderReady = false;\n            this.initialized = false;\n            if (this.renderer) {\n                if (!this.usingExternalRenderer) {\n                    this.rootElement.removeChild(this.renderer.domElement);\n                    this.renderer.dispose();\n                }\n                this.renderer = null;\n            }\n\n            if (!this.usingExternalRenderer) {\n                document.body.removeChild(this.rootElement);\n            }\n\n            this.sortWorkerSortedIndexes = null;\n            this.sortWorkerIndexesToSort = null;\n            this.sortWorkerPrecomputedDistances = null;\n            this.sortWorkerTransforms = null;\n            this.disposed = true;\n            this.disposing = false;\n        });\n        promisesToAbort.forEach((toAbort) => {\n            toAbort.abort('Scene disposed');\n        });\n        return this.disposePromise;\n    }\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode && !this.webXRMode) {\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        if (this.shouldRender()) {\n            this.render();\n            this.consecutiveRenderFrames++;\n        } else {\n            this.consecutiveRenderFrames = 0;\n        }\n        this.renderNextFrame = false;\n    }\n\n    forceRenderNextFrame() {\n        this.renderNextFrame = true;\n    }\n\n    shouldRender = function() {\n\n        let renderCount = 0;\n        const lastCameraPosition = new THREE.Vector3();\n        const lastCameraOrientation = new THREE.Quaternion();\n        const changeEpsilon = 0.0001;\n\n        return function() {\n            let shouldRender = false;\n            let cameraChanged = false;\n            if (this.camera) {\n                const cp = this.camera.position;\n                const co = this.camera.quaternion;\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\n            }\n\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\n\n            if (this.camera) {\n                lastCameraPosition.copy(this.camera.position);\n                lastCameraOrientation.copy(this.camera.quaternion);\n            }\n\n            renderCount++;\n            return shouldRender;\n        };\n\n    }();\n\n    render = function() {\n\n        return function() {\n            if (!this.initialized || !this.splatRenderReady) return;\n\n            const hasRenderables = (threeScene) => {\n                for (let child of threeScene.children) {\n                    if (child.visible) return true;\n                }\n                return false;\n            };\n\n            const savedAuoClear = this.renderer.autoClear;\n            if (hasRenderables(this.threeScene)) {\n                this.renderer.render(this.threeScene, this.camera);\n                this.renderer.autoClear = false;\n            }\n            this.renderer.render(this.splatMesh, this.camera);\n            this.renderer.autoClear = false;\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    update(renderer, camera) {\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n        if (!this.initialized || !this.splatRenderReady) return;\n        if (this.controls) {\n            this.controls.update();\n            if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\n                Viewer.setCameraPositionFromZoom(this.camera, this.camera, this.controls);\n            }\n        }\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\n        this.updateSplatSort();\n        this.updateForRendererSizeChanges();\n        this.updateSplatMesh();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfoPanel();\n        this.updateControlPlane();\n    }\n\n    updateForDropInMode(renderer, camera) {\n        this.renderer = renderer;\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n        this.camera = camera;\n        if (this.controls) this.controls.object = camera;\n        this.init();\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\n                const currentTime = getCurrentTime();\n                const calcDelta = currentTime - lastCalcTime;\n                if (calcDelta >= 1.0) {\n                    this.currentFPS = frameCount;\n                    frameCount = 0;\n                    lastCalcTime = currentTime;\n                } else {\n                    frameCount++;\n                }\n            } else {\n                this.currentFPS = null;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n        let lastCameraOrthographic;\n\n        return function() {\n            if (!this.usingExternalCamera) {\n                this.renderer.getSize(currentRendererSize);\n                if (lastCameraOrthographic === undefined || lastCameraOrthographic !== this.camera.isOrthographicCamera ||\n                    currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                    if (this.camera.isOrthographicCamera) {\n                        this.camera.left = -currentRendererSize.x / 2.0;\n                        this.camera.right = currentRendererSize.x / 2.0;\n                        this.camera.top = currentRendererSize.y / 2.0;\n                        this.camera.bottom = -currentRendererSize.y / 2.0;\n                    } else {\n                        this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    }\n                    this.camera.updateProjectionMatrix();\n                    lastRendererSize.copy(currentRendererSize);\n                    lastCameraOrthographic = this.camera.isOrthographicCamera;\n                }\n            }\n        };\n\n    }();\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n                this.forceRenderNextFrame();\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.forceRenderNextFrame();\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfoPanel = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.showInfo) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            this.getRenderDimensions(renderDimensions);\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\n            const splatRenderCountPct = splatCount > 0 ? this.splatRenderCount / splatCount * 100 : 0;\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\n                                  this.camera.up, this.camera.isOrthographicCamera, meshCursorPosition,\n                                  this.currentFPS || 'N/A', splatCount, this.splatRenderCount, splatRenderCountPct,\n                                  this.lastSortTime, this.focalAdjustment, this.splatMesh.getSplatScale(),\n                                  this.splatMesh.getPointCloudModeEnabled());\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    updateSplatSort = function() {\n\n        const mvpMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedSorts = [];\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return async function(force = false) {\n            if (this.sortRunning) return;\n            if (this.splatMesh.getSplatCount() <= 0) {\n                this.splatRenderCount = 0;\n                return;\n            }\n\n            let angleDiff = 0;\n            let positionDiff = 0;\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!force) {\n                if (!this.splatMesh.dynamicMode && queuedSorts.length === 0) {\n                    if (angleDiff <= 0.99) needsRefreshForRotation = true;\n                    if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                    if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n                }\n            }\n\n            this.sortRunning = true;\n            const { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\n            this.splatRenderCount = splatRenderCount;\n\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\n            const mvpCamera = this.perspectiveCamera || this.camera;\n            mvpMatrix.premultiply(mvpCamera.projectionMatrix);\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\n            }\n\n            if (this.splatMesh.dynamicMode || shouldSortAll) {\n                queuedSorts.push(this.splatRenderCount);\n            } else {\n                if (queuedSorts.length === 0) {\n                    for (let partialSort of partialSorts) {\n                        if (angleDiff < partialSort.angleThreshold) {\n                            for (let sortFraction of partialSort.sortFractions) {\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\n                            }\n                            break;\n                        }\n                    }\n                    queuedSorts.push(this.splatRenderCount);\n                }\n            }\n            let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            const sortMessage = {\n                'modelViewProj': mvpMatrix.elements,\n                'cameraPosition': cameraPositionArray,\n                'splatRenderCount': this.splatRenderCount,\n                'splatSortCount': sortCount,\n                'usePrecomputedDistances': this.gpuAcceleratedSort\n            };\n            if (this.splatMesh.dynamicMode) {\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n            }\n            if (!this.sharedMemoryForWorkers) {\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n                sortMessage.transforms = this.sortWorkerTransforms;\n                if (this.gpuAcceleratedSort) {\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\n                }\n            }\n\n            this.sortPromise = new Promise((resolve) => {\n                this.sortPromiseResolver = resolve;\n            });\n\n            this.sortWorker.postMessage({\n                'sort': sortMessage\n            });\n\n            if (queuedSorts.length === 0) {\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n        };\n\n    }();\n\n    /**\n     * Determine which splats to render by checking which are inside or close to the view frustum\n     */\n    gatherSceneNodesForSort = function() {\n\n        const nodeRenderList = [];\n        let allSplatsSortBuffer = null;\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const modelView = new THREE.Matrix4();\n        const baseModelView = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        return function(gatherAllNodes = false) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n\n            const splatTree = this.splatMesh.getSplatTree();\n\n            if (splatTree) {\n                baseModelView.copy(this.camera.matrixWorld).invert();\n                baseModelView.multiply(this.splatMesh.matrixWorld);\n\n                let nodeRenderCount = 0;\n                let splatRenderCount = 0;\n\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\n                    const subTree = splatTree.subTrees[s];\n                    modelView.copy(baseModelView);\n                    if (this.splatMesh.dynamicMode) {\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\n                        modelView.multiply(sceneTransform);\n                    }\n                    const nodeCount = subTree.nodesWithIndexes.length;\n                    for (let i = 0; i < nodeCount; i++) {\n                        const node = subTree.nodesWithIndexes[i];\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\n                        tempVector.copy(node.center).applyMatrix4(modelView);\n\n                        const distanceToNode = tempVector.length();\n                        tempVector.normalize();\n\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                        const ns = nodeSize(node);\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\n                            continue;\n                        }\n                        splatRenderCount += node.data.indexes.length;\n                        nodeRenderList[nodeRenderCount] = node;\n                        node.data.distanceToNode = distanceToNode;\n                        nodeRenderCount++;\n                    }\n                }\n\n                nodeRenderList.length = nodeRenderCount;\n                nodeRenderList.sort((a, b) => {\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                    else return 1;\n                });\n\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n                for (let i = 0; i < nodeRenderCount; i++) {\n                    const node = nodeRenderList[i];\n                    const windowSizeInts = node.data.indexes.length;\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\n                    destView.set(node.data.indexes);\n                    currentByteOffset -= windowSizeBytes;\n                }\n\n                return {\n                    'splatRenderCount': splatRenderCount,\n                    'shouldSortAll': false\n                };\n            } else {\n                const totalSplatCount = this.splatMesh.getSplatCount();\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\n                    for (let i = 0; i < totalSplatCount; i++) {\n                        allSplatsSortBuffer[i] = i;\n                    }\n                }\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\n                return {\n                    'splatRenderCount': totalSplatCount,\n                    'shouldSortAll': true\n                };\n            }\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.splatMesh.getScene(sceneIndex);\n    }\n\n    isMobile() {\n        return navigator.userAgent.includes('Mobi');\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0004\u0001|\u0003{\u0007}\u0003 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001cj(\u0002\u0000\"\u001dA\u0002tj(\u0002\u0000\"\u001bG\u0004@\u0002 \u0005�\t\u00028 \b \u001bA\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0001\u0002\u0003\u0000\u0001\u0002\u0003�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u001b!\u000f\u000b \u0003 \u001cj \u0001 \u001dA\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0014 \u0005*\u0002\u0018!\u0015 \u0005*\u0002\b!\u0016A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0014 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0016 \u0002*\u0002\u0000� \u0015 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001bj(\u0002\u0000A\u0002t\"\u001cj(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0014 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0015 \u000f*\u00028� \u0005*\u0002\b\"\u0016 \u000f*\u00020� \u0005*\u0002\u0018\"\u0017 \u000f*\u00024����!\u0018 \u0014 \u000f*\u0002,� \u0015 \u000f*\u0002(� \u0016 \u000f*\u0002 � \u0017 \u000f*\u0002$����!\u0019 \u0014 \u000f*\u0002\u001c� \u0015 \u000f*\u0002\u0018� \u0016 \u000f*\u0002\u0010� \u0017 \u000f*\u0002\u0014����!\u001a \u0014 \u000f*\u0002\f� \u0015 \u000f*\u0002\b� \u0016 \u000f*\u0002\u0000� \u0017 \u000f*\u0002\u0004����!\u0014 \u000e!\u000f\u000b \u0003 \u001bj\u0002 \u0018 \u0001 \u001cA\u0002tj\"\u000e*\u0002\f� \u0019 \u000e*\u0002\b� \u0014 \u000e*\u0002\u0000� \u001a \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0014 \f!\r\u0003@\u0002 \u0014 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0015�C\u0000\u0000\u0000O]\u0004@ \u0015�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n\n    constructor(options = {}) {\n        super();\n\n        options.selfDrivenMode = false;\n        options.useBuiltInControls = false;\n        options.rootElement = null;\n        options.ignoreDevicePixelRatio = false;\n        options.dropInMode = true;\n        options.camera = undefined;\n        options.renderer = undefined;\n\n        this.viewer = new Viewer(options);\n        this.splatMesh = null;\n        this.updateSplatMesh();\n\n        this.callbackMesh = DropInViewer.createCallbackMesh();\n        this.add(this.callbackMesh);\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\n\n        this.viewer.onSplatMeshChanged(() => {\n            this.updateSplatMesh();\n        });\n\n    }\n\n    updateSplatMesh() {\n        if (this.splatMesh !== this.viewer.splatMesh) {\n            if (this.splatMesh) {\n                this.remove(this.splatMesh);\n            }\n            this.splatMesh = this.viewer.splatMesh;\n            this.add(this.viewer.splatMesh);\n        }\n    }\n\n    /**\n     * Add a single splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\n        return this.viewer.addSplatScene(path, options);\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI) {\n        if (showLoadingUI !== false) showLoadingUI = true;\n        return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.viewer.getSplatScene(sceneIndex);\n    }\n\n    removeSplatScene(index, showLoadingUI = true) {\n        return this.viewer.removeSplatScene(index, showLoadingUI);\n    }\n\n    removeSplatScenes(indexes, showLoadingUI = true) {\n        return this.viewer.removeSplatScenes(indexes, showLoadingUI);\n    }\n\n    dispose() {\n        return this.viewer.dispose();\n    }\n\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\n        viewer.update(renderer, camera);\n    }\n\n    static createCallbackMesh() {\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\n        const material = new THREE.MeshBasicMaterial();\n        material.colorWrite = false;\n        material.depthWrite = false;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n}\n"],"names":["AbortablePromise","static","constructor","promiseFunc","abortHandler","resolver","rejecter","this","promise","Promise","resolve","reject","promiseResolve","bind","promiseReject","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","fetchWithProgress","path","onProgress","saveChunks","abortController","AbortController","signal","aborted","rejectFunc","fetch","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","reason","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","fast","window","setTimeout","getSphericalHarmonicsComponentCountForDegree","sphericalHarmonicsDegree","nativePromiseWithExtractedComponents","abortablePromiseWithExtractedComponents","Semver","major","minor","patch","toString","isIOS","ua","navigator","userAgent","indexOf","getIOSSemever","extract","match","UncompressedSplatArray","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","FRC0","FRC1","FRC2","FRC3","FRC4","FRC5","FRC6","FRC7","FRC8","FRC9","FRC10","FRC11","FRC12","FRC13","FRC14","FRC15","FRC16","FRC17","FRC18","FRC19","FRC20","FRC21","FRC22","FRC23","sphericalHarmonicsCount","componentCount","defaultSphericalHarmonics","Array","fill","splats","splatCount","createSplat","baseSplat","shEntries","i","addSplat","splat","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","rest","addSplatFromArray","src","srcIndex","srcSplat","Constants","SphericalHarmonics8BitCompressionHalfRange","SphericalHarmonics8BitCompressionRange","toHalfFloat","THREE","DataUtils","fromHalfFloat","toUncompressedFloat","compressionLevel","isSH","fromUint8","toUint8","v","floor","fromHalfFloatToUint8","fromUint8ToHalfFloat","dataViewFloatForCompressionLevel","dataView","floatIndex","getFloat32","getUint16","getUint8","convertBetweenCompressionLevels","noop","fromLevel","toLevel","outputConversionFunc","copyBetweenBuffers","srcBuffer","srcOffset","destBuffer","destOffset","byteCount","Uint8Array","dest","SplatBuffer","BytesPerCenter","BytesPerScale","BytesPerRotation","BytesPerColor","ScaleOffsetBytes","RotationffsetBytes","ColorOffsetBytes","SphericalHarmonicsOffsetBytes","ScaleRange","BytesPerSphericalHarmonicsComponent","SphericalHarmonicsOffsetFloat","SphericalHarmonicsDegrees","BytesPerSplat","bufferData","secLoadedCountsToMax","constructFromBuffer","getSplatCount","getMaxSplatCount","maxSplatCount","getMinSphericalHarmonicsDegree","minSphericalHarmonicsDegree","sections","section","getBucketIndex","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","splatCountOffset","srcSplatCentersBase","bytesPerSplat","DataView","dataBase","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","bucketArray","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","scale","rotation","Quaternion","outScale","outRotation","scaleOverride","srcSplatScalesBase","CompressionLevels","set","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","srcSplatColorsBase","splatColorsArray","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","centerDestBase","CenterComponentCount","fillSplatScaleRotationArray","ensurePositiveW","quaternion","flip","w","outScaleArray","outRotationArray","desiredOutputCompressionLevel","outputConversion","srcCompressionLevel","scaleDestBase","ScaleComponentCount","rotationDestBase","RotationComponentCount","srcScaleX","srcScaleY","srcScaleZ","srcRotationW","srcRotationX","srcRotationY","srcRotationZ","normalize","identity","premultiply","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","outCovariance","outOffset","setFromMatrix4","transpose","elements","fillSplatCovarianceArray","covarianceArray","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","colorDestBase","ColorComponentCount","alpha","fillSphericalHarmonicsArray","sphericalHarmonicVectors","tempMatrix3","tempTranslation","tempScale","tempRotation","sh11","sh12","sh13","sh21","sh22","sh23","sh24","sh25","shIn1","shIn2","shIn3","shIn4","shIn5","shOut1","shOut2","shOut3","shOut4","shOut5","set3","array","val1","val2","val3","set3FromArray","srcDestView","stride","srcBase","copy3","srcArray","destArray","setOutput3","destBase","conversionFunc","toUncompressedFloatArray3","outSphericalHarmonicsArray","outSphericalHarmonicsDegree","outSphericalHarmonicsComponentsCount","srcSplatSHBase","shDestBase","compressionLevelForOutputConversion","rotateSphericalHarmonics3","rotateSphericalHarmonics5","v1","v2","v3","transformRow","outArray","t0","t1","t2","addInto3","v4","v5","t3","t4","in1","in2","in3","tsh11","tsh12","tsh13","out1","out2","out3","dot3","in4","in5","tsh21","tsh22","tsh23","tsh24","tsh25","out4","out5","kSqrt0104","sqrt","kSqrt0304","kSqrt0103","kSqrt0403","kSqrt0112","dot5","parseHeader","headerArrayUint8","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","calculateComponentStorage","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","linkBufferArrays","buildMaps","bytesPerCenter","bytesPerScale","bytesPerRotation","bytesPerColor","sphericalHarmonicsComponentsPerSplat","sphericalHarmonicsBytesPerSplat","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","tempCenterBuffer","ArrayBuffer","tempScaleBuffer","tempRotationBuffer","tempColorBuffer","tempSHBuffer","tempRot","bucketCenterDelta","OFFSET_X","OFFSET_Y","OFFSET_Z","OFFSET_SCALE0","OFFSET_SCALE1","OFFSET_SCALE2","OFFSET_ROT0","OFFSET_ROT1","OFFSET_ROT2","OFFSET_ROT3","OFFSET_FDC0","OFFSET_FDC1","OFFSET_FDC2","OFFSET_OPACITY","OFFSET_FRC0","OFFSET_FRC9","OFFSET","compressPositionOffset","doubleCompressionScaleRange","round","targetSplat","sectionBuffer","bufferOffset","bucketCenter","centerBase","scaleBase","rotationBase","colorBase","sphericalHarmonicsBase","rot","shOut","s","sub","bytesPerSHComponent","srcVal","degree1ByteCount","rgba","Uint8ClampedArray","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","shDegree","sa","splatArray","sectionBuffers","sectionHeaderBuffers","totalSplatCount","validSplats","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","outSplatCount","fromArray","row","writeSplatDataToSectionBuffer","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","PlayCanvasCompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","headerSizeBytes","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","e","property","requiredStorageSizeBytes","getInt8","getInt16","getInt32","getUint32","getFloat64","readPly","readIndex","getElementStorageArrays","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","positionExtremes","scaleExtremes","maxScaleX","maxScaleY","maxScaleZ","position","color","c","Vector4","chunkSplatIndexOffset","positionArray","scaleArray","rotationArray","colorArray","outSplat","chunkIndex","norm","m","unpackRot","exp","parseToUncompressedSplatBufferSection","vertexDataBuffer","veretxReadOffset","outBuffer","outBytesPerSplat","tempSplat","decompressSplat","outBase","parseToUncompressedSplatArray","PlyFormat","FieldSizeIdDouble","FieldSizeIdInt","FieldSizeIdUInt","FieldSizeIdFloat","FieldSizeIdShort","FieldSizeIdUShort","FieldSizeIdUChar","FieldSizeStringMap","double","int","uint","float","short","ushort","uchar","FieldSize","PlyParserUtils","decodeSectionHeader","fieldNameIdMap","headerStartLine","extractedLines","processingSection","headerEndLine","vertexCount","endOfHeader","sectionName","fieldIds","fieldTypes","allFieldNames","usedFieldNames","fieldTypesByName","trim","lineComponents","validComponents","lineComponent","trimmedComponent","fieldMatch","fieldTypeStr","fieldName","fieldId","fieldType","fieldOffsets","bytesPerVertex","sphericalHarmonics","decodeSphericalHarmonicsFromSectionHeader","dataSizeBytes","degree","sphericalHarmonicsCoefficientsPerChannel","coefficientsPerChannel","sphericalHarmonicsDegree1Fields","degree1Fields","sphericalHarmonicsDegree2Fields","degree2Fields","fieldNames","sphericalHarmonicsFieldCount","rgb","getHeaderSectionNames","sectionNames","headerLine","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","extractHeaderFromBufferToText","headerOffset","readChunkSize","headerChunk","readHeaderFromBuffer","convertHeaderTextToLines","prunedLines","determineHeaderFormatFromHeaderText","headertText","format","determineHeaderFormatFromPlyBuffer","readVertex","vertexData","dataOffset","fieldsToRead","rawVertex","BaseFieldNamesToRead","BaseFieldsToReadIndexes","SCALE_0","SCALE_1","SCALE_2","ROT_0","ROT_1","ROT_2","ROT_3","F_DC_0","F_DC_1","F_DC_2","RED","GREEN","BLUE","F_REST_0","INRIAV1PlyParser","plyParserutils","decodeHeaderLines","shLineCount","forEach","shFieldsToReadCount","shRemainingFieldNamesToRead","from","fieldNamesToRead","fieldsToReadIndexes","reduce","acc","decodeHeaderFromBuffer","findSplatData","fromSplat","toSplat","splatData","splatDataOffset","toBuffer","toOffset","parsedSplat","parseToUncompressedSplat","decodeSectionSplatData","sectionSplatData","rawSplat","OFFSET_ROTATION0","OFFSET_ROTATION1","OFFSET_ROTATION2","OFFSET_ROTATION3","OFFSET_FRC","readSplat","SH_C0","CodeBookEntryNamesToRead","CodeBookEntriesToReadIndexes","CB_FEATURES_DC","CB_FEATURES_REST_0","CB_FEATURES_REST_3","CB_OPACITY","CB_SCALING","CB_ROTATION_RE","CB_ROTATION_IM","FieldNamesToRead","FieldsToReadIndexes","PLY_SCALE_0","PLY_SCALE_1","PLY_SCALE_2","PLY_ROT_0","PLY_ROT_1","PLY_ROT_2","PLY_ROT_3","PLY_X","PLY_Y","PLY_Z","PLY_F_DC_0","PLY_F_DC_1","PLY_F_DC_2","PLY_OPACITY","PLY_RED","PLY_GREEN","PLY_BLUE","hf","NaN","pow","INRIAV2PlyParser","decodeSectionHeadersFromHeaderLines","codeBookEntriesToReadIdMap","codeBookSectionIndex","currentStartLine","lastSectionFound","decodeSectionHeadersFromHeaderText","getSplatCountFromSectionHeaders","decodeHeaderFromHeaderText","findVertexData","targetSection","byteOffset","decodeCodeBook","codeBookData","codeBook","codeBookElementOffset","codeBookPage","page","baseValue","unified","PlyParser","plyFormat","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","clampDistance","point","centerDist","lengthSq","sort","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","LoaderStatus","storeChunksInBuffer","inBytes","sizeBytes","PlyLoader","loadFromURL","fileName","progressiveLoad","onStreamedSectionProgress","progressiveLoadSectionSizeBytes","ProgressiveLoadSectionSize","splatDataOffsetBytes","progressiveLoadBufferIn","progressiveLoadBufferOut","progressiveLoadSplatBuffer","compressedPlyHeaderChunksBuffer","headerLoaded","readyToLoadSplatData","compressed","progressiveLoadPromise","numBytesStreamed","numBytesParsed","numBytesDownloaded","textDecoder","inriaV1PlyParser","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","shDescriptor","splatBufferSizeBytes","CurrentMajorVersion","CurrentMinorVersion","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","keepChunks","keepSize","unshift","plyFileData","loadFromFileData","splatBuffer","SplatParser","fromBuffer","fromOffset","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","optimizeSplatData","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","fullBuffer","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","externalOnProgress","onSectionBuilt","progressiveLoadBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","numBytesProgressivelyLoaded","totalBytesToDownload","downloadComplete","loadSectionQueued","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","percentComplete","ProgressiveLoadSectionDelayDuration","fileData","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","sceneFormatFromPath","endsWith","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","clearDampedRotation","clearDampedPan","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","sphericalDelta","panOffset","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","isFinite","makeSafe","addScaledVector","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","angle","rotateUp","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","taskIDGen","elementID","elementIDGen","tasks","spinnerContainerOuter","className","display","spinnerContainerPrimary","spinnerPrimary","classList","messageContainerPrimary","innerHTML","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","show","setMessage","hide","visible","setContainer","removeChild","zIndex","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","LoadingProgressBar","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","InfoPanel","infoCells","layout","infoPanelContainer","append","infoPanel","infoTable","layoutEntry","labelCell","spacerCell","infoCell","renderDimensions","cameraPosition","cameraLookAtPosition","cameraUp","orthographicCamera","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","splatScale","pointCloudMode","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","renderSplatCount","sortTime","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","toCamera","viewport","matrixWorld","toCameraDistance","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","Hit","hitClone","SplatRenderMode","ThreeD","TwoD","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","hit","tempColor","tempCenter","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","splatSceneIndex","getSceneIndexForSplat","getScene","splatRenderMode","uniformScale","log10","SplatMaterial","buildVertexShaderBase","enableOptionalEffects","maxSphericalHarmonicsDegree","customVars","vertexShaderSource","MaxScenes","getVertexShaderFadeIn","getUniforms","pointCloudModeEnabled","fadeInComplete","orthographicMode","visibleRegionFadeStartRadius","visibleRegionRadius","currentTime","firstRenderTime","centersColorsTexture","sphericalHarmonicsTexture","sphericalHarmonicsTextureR","sphericalHarmonicsTextureG","sphericalHarmonicsTextureB","focal","orthoZoom","inverseFocalAdjustment","basisViewport","debugColor","centersColorsTextureSize","sphericalHarmonicsTextureSize","sphericalHarmonics8BitMode","sphericalHarmonicsMultiTextureMode","sceneOpacity","sceneVisibility","transformMatrices","SplatMaterial3D","build","antialiased","maxScreenSpaceSplatSize","buildVertexShaderProjection","fragmentShaderSource","buildFragmentShader","alphaTest","NormalBlending","SplatMaterial2D","referenceQuadGeneration","SplatGeometry","baseGeometry","BufferGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","SplatScene","updateTransform","copyTransformData","otherScene","compose","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","disposed","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","diposeSplatTreeWorker","splatTreeWorker","terminate","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","addCentersForScene","splatOffset","addedCount","addBase","checkForEarlyExit","scenes","transferBuffers","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","SceneRevealMode","Default","Gradual","Instant","LogLevel","None","Warning","Info","Debug","dummyGeometry","dummyMaterial","MAX_TEXTURE_TEXELS","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","logLevel","renderer","baseSplatTree","splatDataTextures","distancesTransformFeedback","program","centersBuffer","sceneIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","sceneIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionChanging","lastRenderer","buildScenes","splatBuffers","sceneOptions","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","buildSplatTree","minAlphas","onSplatTreeIndexesUpload","disposeSplatTree","buildStartTime","splatColor","sceneIndex","minAlpha","buildTime","log","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","keepSceneTransforms","preserveVisibleRegion","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","splatBufferSphericalHarmonicsDegree","splatBuffersChanged","isUpdateBuild","disposeMeshData","indexMaps","setupDistancesComputationTransformFeedback","dataUpdateResults","refreshGPUDataFromSplatBuffers","onSplatTreeReadyCallback","freeIntermediateSplatData","deleteTextureData","texture","image","onUpdate","baseData","covariances","colors","centerColors","sceneIndexes","textures","disposeTextures","computeDistancesOnGPUSyncTimeout","clearTimeout","disposeDistancesComputationGPUResources","textureKey","textureContainer","onSplatTreeReady","callback","getDataForDistancesComputation","start","end","getIntegerCenters","getFloatCenters","getSceneIndexes","sinceLastBuildOnly","refreshDataTexturesFromSplatBuffers","updateStart","refreshGPUBuffersForDistancesComputation","to","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","updateBaseDataFromSplatBuffers","updateDataTexturesFromBaseData","setupDataTextures","updateVisibleRegion","computeDataTextureSize","elementsPerTexel","elementsPerSplat","texSize","getCovariancesInitialTextureSpecs","elementsPerTexelStored","getCovariancesElementsPertexelStored","covarianceCompressionLevel","getTargetCovarianceCompressionLevel","shCompressionLevel","getTargetSphericalHarmonicsCompressionLevel","scales","rotations","initialCovTexSpecs","SphericalHarmonicsArrayType","shComponentCount","shData","fillSplatDataArrays","centersColsTexSize","paddedCentersCols","updateCenterColorsPaddedData","centersColsTex","DataTexture","RGBAIntegerFormat","internalFormat","size","covTexSpecs","covariancesElementsPerTexelStored","covTexSize","covariancesElementsPerTexelAllocated","covariancesTextureData","covTex","updatePaddedCompressedCovariancesTextureData","covariancesTextureHalfFloat","FloatType","covariancesTexture","dummyTex","covariancesAreHalfFloat","covariancesTextureSize","elementsPerTexelAllocated","scaleRotationsTexSize","ScaleRotationsDataType","scaleRotationsTextureType","paddedScaleRotations","updateScaleRotationsPaddedData","scaleRotationsTex","scaleRotationsTexture","scaleRotationsTextureSize","shTextureType","UnsignedByteType","HalfFloatType","paddedSHComponentCount","shElementsPerTexel","texelFormat","RGFormat","shTexSize","paddedSHArray","shTexture","paddedComponentCount","textureCount","shComponentCountPerChannel","paddedSHArraySize","textureUniforms","paddedSHArrays","shTextures","componentCountPerChannel","sceneIndexesTexSize","paddedTransformIndexes","sceneIndexesTexture","RedIntegerFormat","sceneIndexesTextureSize","covarancesTextureDesc","scaleRotationsTextureDesc","scaleRotationCompressionLevel","shITextureDesc","shTextureDesc","centerColorsTextureDescriptor","paddedCenterColors","centerColorsTexture","centerColorsTextureProps","__webglTexture","updateDataTexture","covarancesStartElement","covariancesEndElement","covariance","covariancesTextureProps","bytesPerElement","scaleRotationsTextureProps","shBytesPerElement","updateTexture","shTextureSize","shTextureProps","sceneIndexesTexDesc","sceneIndexesTextureProps","getMaximumSplatBufferCompressionLevel","maxCompressionLevel","getMinimumSplatBufferCompressionLevel","minCompressionLevel","computeTextureUpdateRegion","endSplat","textureWidth","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","paddedData","textureSize","textureProps","getContext","updateRegion","updateElementCount","updateDataView","updateHeight","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","texSubImage2D","sourceData","textureData","textureDataStartIndex","fromElement","toElement","textureDataView","textureDataIndex","sequentialCount","setUint16","colorsBase","centersBase","centerColorsBase","arr","scaleRotationsBase","avgCenter","scene","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","attributes","updateTransforms","updateUniforms","cameraFocalLengthX","cameraFocalLengthY","orthographicZoom","transforms","setSplatScale","getSplatScale","setPointCloudModeEnabled","getPointCloudModeEnabled","getSplatDataTextures","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","currentProgramDeleted","getProgramParameter","DELETE_STATUS","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","isUpdate","offsetSplats","ArrayType","subBufferOffset","bufferSubData","maxArray","STATIC_DRAW","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","timeout","bitflags","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","sphericalHarmonicsCompressionLevel","srcStart","srcEnd","destStart","padFour","floatCenters","intCenters","paddedFloatCenters","outTransform","matrixElements","intMatrixArray","SorterWasmNoSIMD","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","sceneIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","range","BytesPerInt","BytesPerFloat","centerDataSet","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","DepthMapRange","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","WebXRMode","VR","AR","VRButton","createButton","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","xr","isSessionSupported","supported","currentSession","onSessionStarted","session","onSessionEnded","setSession","textContent","sessionInit","optionalFeatures","requestSession","offerSession","err","showEnterVR","xrSessionIsGranted","exception","isSecureContext","location","replace","textDecoration","registerSessionGrantedListener","test","ARButton","domOverlay","overlay","svg","createElementNS","root","setReferenceSpaceType","showStartAR","RenderMode","Always","OnChange","Never","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","sharedMemoryForWorkers","dynamicScene","webXRMode","webXRActive","renderMode","enableSIMDInSort","plyInMemoryCompressionLevel","semver","onSplatMeshChangedCallback","createSplatMesh","controls","perspectiveControls","orthographicControls","perspectiveCamera","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","runAfterNextSort","selfDrivenModeRunning","splatRenderReady","raycaster","startInOrthographicMode","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","splatSceneDownloadPromises","splatSceneDownloadAndBuildPromise","splatSceneRemovalPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","disposePromise","frustumCulled","parentElement","setupCamera","setupRenderer","setupWebXR","setupControls","setupEventHandlers","Scene","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","onMouseUp","removeEventHandlers","setRenderMode","onSplatMeshChanged","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","setOrthographicMode","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","fromCamera","resetControls","fromControls","toControls","setCameraZoomFromPosition","setCameraPositionFromZoom","tempVector","positionCamera","zoomedCamera","toLookAtDistance","negate","zoomCamera","positionZamera","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","focalMultiplier","adjustForWebXRStereo","xrCameraProj00","getCamera","cameraProj00","isLoadingOrUnloading","Object","isDisposingOrDisposed","addSplatSceneDownloadPromise","removeSplatSceneDownloadPromise","setSplatSceneDownloadAndBuildPromise","clearSplatSceneDownloadAndBuildPromise","addSplatScene","isProgressivelyLoadable","showLoadingUI","loadingUITaskId","onProgressUIUpdate","percentCompleteLabel","loaderStatus","suffix","downloadDone","downloadedPercentage","splatBuffersAddedUIUpdate","firstBuild","downloadAndBuildSingleSplatSceneProgressiveLoad","downloadAndBuildSingleSplatSceneStandardLoad","addSplatBufferOptions","orientation","addSplatBuffers","buildFunc","onException","downloadAndBuildPromise","downloadPromise","downloadSplatSceneToSplatBuffer","onDownloadProgress","onDownloadException","progressiveLoadedSectionBuildCount","progressiveLoadedSectionBuilding","queuedProgressiveLoadSectionBuilds","checkAndBuildProgressiveLoadSections","queuedBuild","shift","progressiveLoadFirstSectionBuildPromise","splatSceneDownloadPromise","addSplatScenes","fileCount","onLoadProgress","fileIndex","totalPercent","downloadPromises","nativeLoadPromises","abortHandlers","all","finally","progressiveBuild","splatBufferOptions","showLoadingUIForSplatTreeBuild","replaceExisting","enableRenderBeforeFirstSort","splatProcessingTaskId","removeSplatProcessingTask","finish","buildResults","updateSplatSort","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","splatOptimizingTaskId","allSplatBuffers","allSplatBufferOptions","finished","DistancesArrayType","worker","sourceWasm","iOSSemVer","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","removeSplatScene","indexToRemove","removeSplatScenes","indexesToRemove","revmovalTaskId","checkAndHideLoadingUI","onDone","savedSplatBuffers","savedSceneOptions","savedSceneTransformComponents","shouldRemove","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","lastCameraOrthographic","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","force","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","mvpCamera","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","isMobile","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}